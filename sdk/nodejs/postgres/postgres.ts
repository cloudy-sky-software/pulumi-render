// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Input for creating a database
 */
export class Postgres extends pulumi.CustomResource {
    /**
     * Get an existing Postgres resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Postgres {
        return new Postgres(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:postgres:Postgres';

    /**
     * Returns true if the given object is an instance of Postgres.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Postgres {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Postgres.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The URL to view the PostgreSQL instance in the Render Dashboard
     */
    public /*out*/ readonly dashboardUrl!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly databaseUser!: pulumi.Output<string>;
    public readonly datadogAPIKey!: pulumi.Output<string | undefined>;
    public readonly diskSizeGB!: pulumi.Output<number | undefined>;
    public readonly enableHighAvailability!: pulumi.Output<boolean | undefined>;
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * The time at which the database will be expire. Applies to free tier databases only.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string | undefined>;
    public /*out*/ readonly highAvailabilityEnabled!: pulumi.Output<boolean>;
    public readonly ipAllowList!: pulumi.Output<outputs.postgres.CidrBlockAndDescription[]>;
    public /*out*/ readonly maintenance!: pulumi.Output<outputs.postgres.RedisDetailpropertiesmaintenance | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<outputs.postgres.Owner>;
    /**
     * The ID of the owner (team or personal user) whose resources should be returned
     */
    public readonly ownerId!: pulumi.Output<string>;
    public readonly plan!: pulumi.Output<enums.postgres.Plan>;
    public /*out*/ readonly primaryPostgresID!: pulumi.Output<string | undefined>;
    public readonly readReplicas!: pulumi.Output<outputs.postgres.ReadReplica[]>;
    /**
     * Defaults to "oregon"
     */
    public readonly region!: pulumi.Output<enums.postgres.Region>;
    public /*out*/ readonly role!: pulumi.Output<enums.postgres.Role>;
    public /*out*/ readonly status!: pulumi.Output<enums.postgres.Status>;
    public /*out*/ readonly suspended!: pulumi.Output<enums.postgres.Suspended>;
    public /*out*/ readonly suspenders!: pulumi.Output<enums.postgres.SuspendersItem[]>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The PostgreSQL version
     */
    public readonly version!: pulumi.Output<enums.postgres.Version>;

    /**
     * Create a Postgres resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.ownerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["databaseName"] = (args ? args.databaseName : undefined) ?? "randomly generated";
            resourceInputs["databaseUser"] = (args ? args.databaseUser : undefined) ?? "randomly generated";
            resourceInputs["datadogAPIKey"] = args ? args.datadogAPIKey : undefined;
            resourceInputs["diskSizeGB"] = args ? args.diskSizeGB : undefined;
            resourceInputs["enableHighAvailability"] = (args ? args.enableHighAvailability : undefined) ?? false;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["ipAllowList"] = args ? args.ipAllowList : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["readReplicas"] = args ? args.readReplicas : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["highAvailabilityEnabled"] = undefined /*out*/;
            resourceInputs["maintenance"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["primaryPostgresID"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["suspenders"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseUser"] = undefined /*out*/;
            resourceInputs["datadogAPIKey"] = undefined /*out*/;
            resourceInputs["diskSizeGB"] = undefined /*out*/;
            resourceInputs["enableHighAvailability"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["highAvailabilityEnabled"] = undefined /*out*/;
            resourceInputs["ipAllowList"] = undefined /*out*/;
            resourceInputs["maintenance"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["plan"] = undefined /*out*/;
            resourceInputs["primaryPostgresID"] = undefined /*out*/;
            resourceInputs["readReplicas"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["suspenders"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Postgres.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Postgres resource.
 */
export interface PostgresArgs {
    databaseName?: pulumi.Input<string>;
    databaseUser?: pulumi.Input<string>;
    datadogAPIKey?: pulumi.Input<string>;
    /**
     * The number of gigabytes of disk space to allocate for the database
     */
    diskSizeGB?: pulumi.Input<number>;
    enableHighAvailability?: pulumi.Input<boolean>;
    environmentId?: pulumi.Input<string>;
    ipAllowList?: pulumi.Input<pulumi.Input<inputs.postgres.CidrBlockAndDescriptionArgs>[]>;
    /**
     * The name of the database as it will appear in the Render Dashboard
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the owner (team or personal user) whose resources should be returned
     */
    ownerId: pulumi.Input<string>;
    plan: pulumi.Input<enums.postgres.Plan>;
    readReplicas?: pulumi.Input<pulumi.Input<inputs.postgres.ReadReplicaInputArgs>[]>;
    region?: pulumi.Input<string>;
    /**
     * The PostgreSQL version
     */
    version: pulumi.Input<enums.postgres.Version>;
}
