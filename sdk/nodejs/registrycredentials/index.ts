// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetRegistrycredentialArgs, GetRegistrycredentialResult } from "./getRegistrycredential";
export const getRegistrycredential: typeof import("./getRegistrycredential").getRegistrycredential = null as any;
export const getRegistrycredentialOutput: typeof import("./getRegistrycredential").getRegistrycredentialOutput = null as any;
utilities.lazyLoad(exports, ["getRegistrycredential","getRegistrycredentialOutput"], () => require("./getRegistrycredential"));

export { ListRegistrycredentialsArgs, ListRegistrycredentialsResult } from "./listRegistrycredentials";
export const listRegistrycredentials: typeof import("./listRegistrycredentials").listRegistrycredentials = null as any;
export const listRegistrycredentialsOutput: typeof import("./listRegistrycredentials").listRegistrycredentialsOutput = null as any;
utilities.lazyLoad(exports, ["listRegistrycredentials","listRegistrycredentialsOutput"], () => require("./listRegistrycredentials"));

export { RegistrycredentialsArgs } from "./registrycredentials";
export type Registrycredentials = import("./registrycredentials").Registrycredentials;
export const Registrycredentials: typeof import("./registrycredentials").Registrycredentials = null as any;
utilities.lazyLoad(exports, ["Registrycredentials"], () => require("./registrycredentials"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "render:registrycredentials:Registrycredentials":
                return new Registrycredentials(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("render", "registrycredentials", _module)
