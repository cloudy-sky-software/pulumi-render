// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FailoverPostgres struct {
	pulumi.CustomResourceState
}

// NewFailoverPostgres registers a new resource with the given unique name, arguments, and options.
func NewFailoverPostgres(ctx *pulumi.Context,
	name string, args *FailoverPostgresArgs, opts ...pulumi.ResourceOption) (*FailoverPostgres, error) {
	if args == nil {
		args = &FailoverPostgresArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FailoverPostgres
	err := ctx.RegisterResource("render:postgres:FailoverPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFailoverPostgres gets an existing FailoverPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailoverPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FailoverPostgresState, opts ...pulumi.ResourceOption) (*FailoverPostgres, error) {
	var resource FailoverPostgres
	err := ctx.ReadResource("render:postgres:FailoverPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FailoverPostgres resources.
type failoverPostgresState struct {
}

type FailoverPostgresState struct {
}

func (FailoverPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverPostgresState)(nil)).Elem()
}

type failoverPostgresArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a FailoverPostgres resource.
type FailoverPostgresArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (FailoverPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*failoverPostgresArgs)(nil)).Elem()
}

type FailoverPostgresInput interface {
	pulumi.Input

	ToFailoverPostgresOutput() FailoverPostgresOutput
	ToFailoverPostgresOutputWithContext(ctx context.Context) FailoverPostgresOutput
}

func (*FailoverPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverPostgres)(nil)).Elem()
}

func (i *FailoverPostgres) ToFailoverPostgresOutput() FailoverPostgresOutput {
	return i.ToFailoverPostgresOutputWithContext(context.Background())
}

func (i *FailoverPostgres) ToFailoverPostgresOutputWithContext(ctx context.Context) FailoverPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailoverPostgresOutput)
}

type FailoverPostgresOutput struct{ *pulumi.OutputState }

func (FailoverPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverPostgres)(nil)).Elem()
}

func (o FailoverPostgresOutput) ToFailoverPostgresOutput() FailoverPostgresOutput {
	return o
}

func (o FailoverPostgresOutput) ToFailoverPostgresOutputWithContext(ctx context.Context) FailoverPostgresOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FailoverPostgresInput)(nil)).Elem(), &FailoverPostgres{})
	pulumi.RegisterOutputType(FailoverPostgresOutput{})
}
