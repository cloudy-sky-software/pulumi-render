// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BackgroundWorkerDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type BackgroundWorkerDetailsEnv = (typeof BackgroundWorkerDetailsEnv)[keyof typeof BackgroundWorkerDetailsEnv];

export const BackgroundWorkerDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type BackgroundWorkerDetailsPlan = (typeof BackgroundWorkerDetailsPlan)[keyof typeof BackgroundWorkerDetailsPlan];

export const BackgroundWorkerDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type BackgroundWorkerDetailsPullRequestPreviewsEnabled = (typeof BackgroundWorkerDetailsPullRequestPreviewsEnabled)[keyof typeof BackgroundWorkerDetailsPullRequestPreviewsEnabled];

export const BackgroundWorkerDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type BackgroundWorkerDetailsRegion = (typeof BackgroundWorkerDetailsRegion)[keyof typeof BackgroundWorkerDetailsRegion];

export const CancelDeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type CancelDeployStatus = (typeof CancelDeployStatus)[keyof typeof CancelDeployStatus];

export const CancelDeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type CancelDeployTrigger = (typeof CancelDeployTrigger)[keyof typeof CancelDeployTrigger];

export const CronJobDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type CronJobDetailsEnv = (typeof CronJobDetailsEnv)[keyof typeof CronJobDetailsEnv];

export const CronJobDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type CronJobDetailsPlan = (typeof CronJobDetailsPlan)[keyof typeof CronJobDetailsPlan];

export const CronJobDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type CronJobDetailsRegion = (typeof CronJobDetailsRegion)[keyof typeof CronJobDetailsRegion];

export const CustomDomainDomainType = {
    Apex: "apex",
    Subdomain: "subdomain",
} as const;

export type CustomDomainDomainType = (typeof CustomDomainDomainType)[keyof typeof CustomDomainDomainType];

export const CustomDomainVerificationStatus = {
    Verified: "verified",
    Unverified: "unverified",
} as const;

export type CustomDomainVerificationStatus = (typeof CustomDomainVerificationStatus)[keyof typeof CustomDomainVerificationStatus];

export const DeployClearCache = {
    Clear: "clear",
    DoNotClear: "do_not_clear",
} as const;

/**
 * Defaults to "do_not_clear"
 */
export type DeployClearCache = (typeof DeployClearCache)[keyof typeof DeployClearCache];

export const DeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type DeployStatus = (typeof DeployStatus)[keyof typeof DeployStatus];

export const DeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type DeployTrigger = (typeof DeployTrigger)[keyof typeof DeployTrigger];

export const PreviewServicePlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type PreviewServicePlan = (typeof PreviewServicePlan)[keyof typeof PreviewServicePlan];

export const PrivateServiceDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type PrivateServiceDetailsEnv = (typeof PrivateServiceDetailsEnv)[keyof typeof PrivateServiceDetailsEnv];

export const PrivateServiceDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type PrivateServiceDetailsPlan = (typeof PrivateServiceDetailsPlan)[keyof typeof PrivateServiceDetailsPlan];

export const PrivateServiceDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type PrivateServiceDetailsPullRequestPreviewsEnabled = (typeof PrivateServiceDetailsPullRequestPreviewsEnabled)[keyof typeof PrivateServiceDetailsPullRequestPreviewsEnabled];

export const PrivateServiceDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type PrivateServiceDetailsRegion = (typeof PrivateServiceDetailsRegion)[keyof typeof PrivateServiceDetailsRegion];

export const RegistryCredentialRegistry = {
    Github: "GITHUB",
    Gitlab: "GITLAB",
    Docker: "DOCKER",
} as const;

/**
 * The registry to use this credential with
 */
export type RegistryCredentialRegistry = (typeof RegistryCredentialRegistry)[keyof typeof RegistryCredentialRegistry];

export const RollbackDeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type RollbackDeployStatus = (typeof RollbackDeployStatus)[keyof typeof RollbackDeployStatus];

export const RollbackDeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type RollbackDeployTrigger = (typeof RollbackDeployTrigger)[keyof typeof RollbackDeployTrigger];

export const ServerPortProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

export type ServerPortProtocol = (typeof ServerPortProtocol)[keyof typeof ServerPortProtocol];

export const ServiceAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type ServiceAutoDeploy = (typeof ServiceAutoDeploy)[keyof typeof ServiceAutoDeploy];

export const ServiceBackgroundWorkerDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type ServiceBackgroundWorkerDetailsCreateEnv = (typeof ServiceBackgroundWorkerDetailsCreateEnv)[keyof typeof ServiceBackgroundWorkerDetailsCreateEnv];

export const ServiceBackgroundWorkerDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type ServiceBackgroundWorkerDetailsCreatePlan = (typeof ServiceBackgroundWorkerDetailsCreatePlan)[keyof typeof ServiceBackgroundWorkerDetailsCreatePlan];

export const ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = (typeof ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled)[keyof typeof ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled];

export const ServiceBackgroundWorkerDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type ServiceBackgroundWorkerDetailsCreateRegion = (typeof ServiceBackgroundWorkerDetailsCreateRegion)[keyof typeof ServiceBackgroundWorkerDetailsCreateRegion];

export const ServiceCronJobDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type ServiceCronJobDetailsCreateEnv = (typeof ServiceCronJobDetailsCreateEnv)[keyof typeof ServiceCronJobDetailsCreateEnv];

export const ServiceCronJobDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type ServiceCronJobDetailsCreatePlan = (typeof ServiceCronJobDetailsCreatePlan)[keyof typeof ServiceCronJobDetailsCreatePlan];

export const ServiceCronJobDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type ServiceCronJobDetailsCreateRegion = (typeof ServiceCronJobDetailsCreateRegion)[keyof typeof ServiceCronJobDetailsCreateRegion];

export const ServiceNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type ServiceNotifyOnFail = (typeof ServiceNotifyOnFail)[keyof typeof ServiceNotifyOnFail];

export const ServicePrivateServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type ServicePrivateServiceDetailsCreateEnv = (typeof ServicePrivateServiceDetailsCreateEnv)[keyof typeof ServicePrivateServiceDetailsCreateEnv];

export const ServicePrivateServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type ServicePrivateServiceDetailsCreatePlan = (typeof ServicePrivateServiceDetailsCreatePlan)[keyof typeof ServicePrivateServiceDetailsCreatePlan];

export const ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled = (typeof ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled];

export const ServicePrivateServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type ServicePrivateServiceDetailsCreateRegion = (typeof ServicePrivateServiceDetailsCreateRegion)[keyof typeof ServicePrivateServiceDetailsCreateRegion];

export const ServiceRouteType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;

export type ServiceRouteType = (typeof ServiceRouteType)[keyof typeof ServiceRouteType];

export const ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled = (typeof ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled)[keyof typeof ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled];

export const ServiceSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type ServiceSuspended = (typeof ServiceSuspended)[keyof typeof ServiceSuspended];

export const ServiceSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type ServiceSuspendersItem = (typeof ServiceSuspendersItem)[keyof typeof ServiceSuspendersItem];

export const ServiceType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

export const ServiceWebServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type ServiceWebServiceDetailsCreateEnv = (typeof ServiceWebServiceDetailsCreateEnv)[keyof typeof ServiceWebServiceDetailsCreateEnv];

export const ServiceWebServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type ServiceWebServiceDetailsCreatePlan = (typeof ServiceWebServiceDetailsCreatePlan)[keyof typeof ServiceWebServiceDetailsCreatePlan];

export const ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled = (typeof ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled];

export const ServiceWebServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type ServiceWebServiceDetailsCreateRegion = (typeof ServiceWebServiceDetailsCreateRegion)[keyof typeof ServiceWebServiceDetailsCreateRegion];

export const StaticSiteDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type StaticSiteDetailsPullRequestPreviewsEnabled = (typeof StaticSiteDetailsPullRequestPreviewsEnabled)[keyof typeof StaticSiteDetailsPullRequestPreviewsEnabled];

export const WebServiceDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type WebServiceDetailsEnv = (typeof WebServiceDetailsEnv)[keyof typeof WebServiceDetailsEnv];

export const WebServiceDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type WebServiceDetailsPlan = (typeof WebServiceDetailsPlan)[keyof typeof WebServiceDetailsPlan];

export const WebServiceDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type WebServiceDetailsPullRequestPreviewsEnabled = (typeof WebServiceDetailsPullRequestPreviewsEnabled)[keyof typeof WebServiceDetailsPullRequestPreviewsEnabled];

export const WebServiceDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type WebServiceDetailsRegion = (typeof WebServiceDetailsRegion)[keyof typeof WebServiceDetailsRegion];
