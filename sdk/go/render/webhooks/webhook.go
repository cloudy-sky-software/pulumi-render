// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webhooks

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Webhook struct {
	pulumi.CustomResourceState

	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
	EventFilter EventFilterItemArrayOutput `pulumi:"eventFilter"`
	Name        pulumi.StringOutput        `pulumi:"name"`
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	Secret  pulumi.StringOutput `pulumi:"secret"`
	Url     pulumi.StringOutput `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.EventFilter == nil {
		return nil, errors.New("invalid value for required argument 'EventFilter'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("render:webhooks:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("render:webhooks:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
}

type WebhookState struct {
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	Enabled bool `pulumi:"enabled"`
	// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
	EventFilter []EventFilterItem `pulumi:"eventFilter"`
	Name        *string           `pulumi:"name"`
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId string `pulumi:"ownerId"`
	Url     string `pulumi:"url"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	Enabled pulumi.BoolInput
	// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
	EventFilter EventFilterItemArrayInput
	Name        pulumi.StringPtrInput
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId pulumi.StringInput
	Url     pulumi.StringInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

func (o WebhookOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
func (o WebhookOutput) EventFilter() EventFilterItemArrayOutput {
	return o.ApplyT(func(v *Webhook) EventFilterItemArrayOutput { return v.EventFilter }).(EventFilterItemArrayOutput)
}

func (o WebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the owner (team or personal user) whose resources should be returned
func (o WebhookOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o WebhookOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

func (o WebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterOutputType(WebhookOutput{})
}
