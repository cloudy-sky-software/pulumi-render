# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ListOwnersResponse',
    'Owner',
]

@pulumi.output_type
class ListOwnersResponse(dict):
    def __init__(__self__, *,
                 cursor: Optional[str] = None,
                 owner: Optional['outputs.Owner'] = None):
        """
        :param 'Owner' owner: The owner object represents an authorized user or team. The `type` property indicates if the owner is a user or team.
        """
        ListOwnersResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cursor=cursor,
            owner=owner,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cursor: Optional[str] = None,
             owner: Optional['outputs.Owner'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cursor is not None:
            _setter("cursor", cursor)
        if owner is not None:
            _setter("owner", owner)

    @property
    @pulumi.getter
    def cursor(self) -> Optional[str]:
        return pulumi.get(self, "cursor")

    @property
    @pulumi.getter
    def owner(self) -> Optional['outputs.Owner']:
        """
        The owner object represents an authorized user or team. The `type` property indicates if the owner is a user or team.
        """
        return pulumi.get(self, "owner")


@pulumi.output_type
class Owner(dict):
    """
    The owner object represents an authorized user or team. The `type` property indicates if the owner is a user or team.
    """
    def __init__(__self__, *,
                 email: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional['OwnerType'] = None):
        """
        The owner object represents an authorized user or team. The `type` property indicates if the owner is a user or team.
        :param str email: The email of the owner.
        :param str id: The owner ID.
        :param str name: The name of the owner.
        :param 'OwnerType' type: The type of the authorized user.
        """
        Owner._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            id=id,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional[str] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional['OwnerType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email is not None:
            _setter("email", email)
        if id is not None:
            _setter("id", id)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The email of the owner.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The owner ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the owner.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional['OwnerType']:
        """
        The type of the authorized user.
        """
        return pulumi.get(self, "type")


