// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package webhooks

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupWebhook(ctx *pulumi.Context, args *LookupWebhookArgs, opts ...pulumi.InvokeOption) (*LookupWebhookResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWebhookResult
	err := ctx.Invoke("render:webhooks:getWebhook", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWebhookArgs struct {
	// Unique identifier for the webhook
	WebhookId string `pulumi:"webhookId"`
}

type LookupWebhookResult struct {
	Enabled bool `pulumi:"enabled"`
	// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
	EventFilter []WebhookWithCursorpropertieswebhookEventFilterItem `pulumi:"eventFilter"`
	Id          string                                              `pulumi:"id"`
	Name        string                                              `pulumi:"name"`
	Secret      string                                              `pulumi:"secret"`
	Url         string                                              `pulumi:"url"`
}

func LookupWebhookOutput(ctx *pulumi.Context, args LookupWebhookOutputArgs, opts ...pulumi.InvokeOption) LookupWebhookResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWebhookResultOutput, error) {
			args := v.(LookupWebhookArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("render:webhooks:getWebhook", args, LookupWebhookResultOutput{}, options).(LookupWebhookResultOutput), nil
		}).(LookupWebhookResultOutput)
}

type LookupWebhookOutputArgs struct {
	// Unique identifier for the webhook
	WebhookId pulumi.StringInput `pulumi:"webhookId"`
}

func (LookupWebhookOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebhookArgs)(nil)).Elem()
}

type LookupWebhookResultOutput struct{ *pulumi.OutputState }

func (LookupWebhookResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWebhookResult)(nil)).Elem()
}

func (o LookupWebhookResultOutput) ToLookupWebhookResultOutput() LookupWebhookResultOutput {
	return o
}

func (o LookupWebhookResultOutput) ToLookupWebhookResultOutputWithContext(ctx context.Context) LookupWebhookResultOutput {
	return o
}

func (o LookupWebhookResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWebhookResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
func (o LookupWebhookResultOutput) EventFilter() WebhookWithCursorpropertieswebhookEventFilterItemArrayOutput {
	return o.ApplyT(func(v LookupWebhookResult) []WebhookWithCursorpropertieswebhookEventFilterItem { return v.EventFilter }).(WebhookWithCursorpropertieswebhookEventFilterItemArrayOutput)
}

func (o LookupWebhookResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebhookResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupWebhookResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebhookResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupWebhookResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebhookResult) string { return v.Secret }).(pulumi.StringOutput)
}

func (o LookupWebhookResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWebhookResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWebhookResultOutput{})
}
