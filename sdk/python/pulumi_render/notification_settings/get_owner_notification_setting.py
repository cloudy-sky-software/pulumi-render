# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload, Awaitable
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetOwnerNotificationSettingProperties',
    'AwaitableGetOwnerNotificationSettingProperties',
    'get_owner_notification_setting',
    'get_owner_notification_setting_output',
]

@pulumi.output_type
class GetOwnerNotificationSettingProperties:
    def __init__(__self__, email_enabled=None, notifications_to_send=None, owner_id=None, preview_notifications_enabled=None, slack_enabled=None):
        if email_enabled and not isinstance(email_enabled, bool):
            raise TypeError("Expected argument 'email_enabled' to be a bool")
        pulumi.set(__self__, "email_enabled", email_enabled)
        if notifications_to_send and not isinstance(notifications_to_send, str):
            raise TypeError("Expected argument 'notifications_to_send' to be a str")
        pulumi.set(__self__, "notifications_to_send", notifications_to_send)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if preview_notifications_enabled and not isinstance(preview_notifications_enabled, bool):
            raise TypeError("Expected argument 'preview_notifications_enabled' to be a bool")
        pulumi.set(__self__, "preview_notifications_enabled", preview_notifications_enabled)
        if slack_enabled and not isinstance(slack_enabled, bool):
            raise TypeError("Expected argument 'slack_enabled' to be a bool")
        pulumi.set(__self__, "slack_enabled", slack_enabled)

    @property
    @pulumi.getter(name="emailEnabled")
    def email_enabled(self) -> bool:
        return pulumi.get(self, "email_enabled")

    @property
    @pulumi.getter(name="notificationsToSend")
    def notifications_to_send(self) -> 'GetOwnerNotificationSettingPropertiesNotificationsToSend':
        return pulumi.get(self, "notifications_to_send")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="previewNotificationsEnabled")
    def preview_notifications_enabled(self) -> bool:
        return pulumi.get(self, "preview_notifications_enabled")

    @property
    @pulumi.getter(name="slackEnabled")
    def slack_enabled(self) -> bool:
        return pulumi.get(self, "slack_enabled")


class AwaitableGetOwnerNotificationSettingProperties(GetOwnerNotificationSettingProperties):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOwnerNotificationSettingProperties(
            email_enabled=self.email_enabled,
            notifications_to_send=self.notifications_to_send,
            owner_id=self.owner_id,
            preview_notifications_enabled=self.preview_notifications_enabled,
            slack_enabled=self.slack_enabled)


def get_owner_notification_setting(owner_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOwnerNotificationSettingProperties:
    """
    Use this data source to access information about an existing resource.

    :param str owner_id: The ID of the owner (team or personal user) whose resources should be returned
    """
    __args__ = dict()
    __args__['ownerId'] = owner_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('render:notification-settings:getOwnerNotificationSetting', __args__, opts=opts, typ=GetOwnerNotificationSettingProperties).value

    return AwaitableGetOwnerNotificationSettingProperties(
        email_enabled=pulumi.get(__ret__, 'email_enabled'),
        notifications_to_send=pulumi.get(__ret__, 'notifications_to_send'),
        owner_id=pulumi.get(__ret__, 'owner_id'),
        preview_notifications_enabled=pulumi.get(__ret__, 'preview_notifications_enabled'),
        slack_enabled=pulumi.get(__ret__, 'slack_enabled'))
def get_owner_notification_setting_output(owner_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOwnerNotificationSettingProperties]:
    """
    Use this data source to access information about an existing resource.

    :param str owner_id: The ID of the owner (team or personal user) whose resources should be returned
    """
    __args__ = dict()
    __args__['ownerId'] = owner_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('render:notification-settings:getOwnerNotificationSetting', __args__, opts=opts, typ=GetOwnerNotificationSettingProperties)
    return __ret__.apply(lambda __response__: GetOwnerNotificationSettingProperties(
        email_enabled=pulumi.get(__response__, 'email_enabled'),
        notifications_to_send=pulumi.get(__response__, 'notifications_to_send'),
        owner_id=pulumi.get(__response__, 'owner_id'),
        preview_notifications_enabled=pulumi.get(__response__, 'preview_notifications_enabled'),
        slack_enabled=pulumi.get(__response__, 'slack_enabled')))
