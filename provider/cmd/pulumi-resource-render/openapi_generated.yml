openapi: 3.0.2
components:
    schemas:
        addUpdateEnvVarInput:
            oneOf:
                - $ref: '#/components/schemas/envVarValue'
                - $ref: '#/components/schemas/envVarGenerateValue'
            type: object
        autoscalingConfig:
            type: object
            required:
                - enabled
                - min
                - max
                - criteria
            properties:
                criteria:
                    $ref: '#/components/schemas/autoscalingCriteria'
                enabled:
                    type: boolean
                    default: false
                max:
                    type: integer
                    description: The maximum number of instances for the service
                min:
                    type: integer
                    description: The minimum number of instances for the service
        autoscalingCriteria:
            type: object
            required:
                - cpu
                - memory
            properties:
                cpu:
                    $ref: '#/components/schemas/autoscalingCriteriaPercentage'
                memory:
                    $ref: '#/components/schemas/autoscalingCriteriaPercentage'
        autoscalingCriteriaPercentage:
            type: object
            required:
                - enabled
                - percentage
            properties:
                enabled:
                    type: boolean
                    default: false
                percentage:
                    type: integer
                    description: |
                        Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
        backgroundWorker:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsPOST'
                    type:
                        type: string
                        default: background_worker
            title: BackgroundWorker
        backgroundWorkerDetails:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
        backgroundWorkerDetailsOutput:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
        backgroundWorkerDetailsPATCH:
            type: object
            properties:
                envSpecificDetails:
                    oneOf:
                        - $ref: '#/components/schemas/dockerDetailsPATCH'
                        - $ref: '#/components/schemas/nativeEnvironmentDetailsPATCH'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    enum:
                        - "yes"
                        - "no"
        backgroundWorkerDetailsPOST:
            type: object
            required:
                - env
            properties:
                disk:
                    type: object
                    required:
                        - name
                        - mountPath
                    properties:
                        mountPath:
                            type: string
                        name:
                            type: string
                        sizeGB:
                            type: integer
                            description: Defaults to 1
                            minimum: 1
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: Defaults to 1
                    default: 1
                    minimum: 1
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    description: Defaults to "no"
                    enum:
                        - "yes"
                        - "no"
                    default: "no"
                region:
                    $ref: '#/components/schemas/region'
        backgroundWorkerOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsOutput'
                    type:
                        type: string
                        default: background_worker
            title: BackgroundWorker
        backgroundWorkerPatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsPATCH'
                    type:
                        type: string
                        default: background_worker
            title: BackgroundWorker
        buildFilter:
            type: object
            required:
                - paths
                - ignoredPaths
            properties:
                ignoredPaths:
                    type: array
                    items:
                        type: string
                paths:
                    type: array
                    items:
                        type: string
        cidrBlockAndDescription:
            type: object
            required:
                - cidrBlock
                - description
            properties:
                cidrBlock:
                    type: string
                description:
                    type: string
                    description: User-provided description of the CIDR block
        cronJob:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsPOST'
                    type:
                        type: string
                        default: cron_job
            title: CronJob
        cronJobDetails:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - schedule
                - buildPlan
            properties:
                buildPlan:
                    type: string
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                lastSuccessfulRunAt:
                    type: string
                    format: date-time
                plan:
                    $ref: '#/components/schemas/plan'
                region:
                    $ref: '#/components/schemas/region'
                schedule:
                    type: string
        cronJobDetailsOutput:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - schedule
                - buildPlan
            properties:
                buildPlan:
                    type: string
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                lastSuccessfulRunAt:
                    type: string
                    format: date-time
                plan:
                    $ref: '#/components/schemas/plan'
                region:
                    $ref: '#/components/schemas/region'
                schedule:
                    type: string
        cronJobDetailsPATCH:
            type: object
            properties:
                envSpecificDetails:
                    oneOf:
                        - $ref: '#/components/schemas/dockerDetailsPATCH'
                        - $ref: '#/components/schemas/nativeEnvironmentDetailsPATCH'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                schedule:
                    type: string
        cronJobDetailsPOST:
            type: object
            required:
                - env
                - schedule
            properties:
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                region:
                    $ref: '#/components/schemas/region'
                schedule:
                    type: string
        cronJobOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsOutput'
                    type:
                        type: string
                        default: cron_job
            title: CronJob
        cronJobPatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsPATCH'
                    type:
                        type: string
                        default: cron_job
            title: CronJob
        cursor:
            type: string
        customDomain:
            type: object
            required:
                - id
                - name
                - domainType
                - publicSuffix
                - verificationStatus
                - createdAt
                - redirectForName
            properties:
                createdAt:
                    type: string
                    format: date-time
                domainType:
                    type: string
                    enum:
                        - apex
                        - subdomain
                id:
                    type: string
                name:
                    type: string
                publicSuffix:
                    type: string
                redirectForName:
                    type: string
                server:
                    type: object
                    properties:
                        id:
                            type: string
                        name:
                            type: string
                verificationStatus:
                    type: string
                    enum:
                        - verified
                        - unverified
        databaseRole:
            type: string
            enum:
                - primary
                - replica
        databaseStatus:
            type: string
            enum:
                - creating
                - available
                - unavailable
                - config_restart
                - suspended
                - maintenance_scheduled
                - maintenance_in_progress
                - recovery_failed
                - recovery_in_progress
                - unknown
                - updating_instance
        deploy:
            type: object
            required:
                - id
            properties:
                commit:
                    type: object
                    properties:
                        createdAt:
                            type: string
                            format: date-time
                        id:
                            type: string
                        message:
                            type: string
                createdAt:
                    type: string
                    format: date-time
                finishedAt:
                    type: string
                    format: date-time
                id:
                    type: string
                image:
                    type: object
                    description: Image information used when creating the deploy. Not present for Git-backed deploys
                    properties:
                        ref:
                            type: string
                            description: Image reference used when creating the deploy
                        registryCredential:
                            type: string
                            description: Name of credential used to pull the image, if provided
                        sha:
                            type: string
                            description: SHA that the image reference was resolved to when creating the deploy
                status:
                    type: string
                    enum:
                        - created
                        - build_in_progress
                        - update_in_progress
                        - live
                        - deactivated
                        - build_failed
                        - update_failed
                        - canceled
                        - pre_deploy_in_progress
                        - pre_deploy_failed
                trigger:
                    type: string
                    enum:
                        - api
                        - blueprint_sync
                        - deploy_hook
                        - deployed_by_render
                        - manual
                        - other
                        - new_commit
                        - rollback
                        - service_resumed
                        - service_updated
                updatedAt:
                    type: string
                    format: date-time
        disk:
            type: object
            required:
                - id
                - name
                - sizeGB
                - mountPath
            properties:
                id:
                    type: string
                mountPath:
                    type: string
                name:
                    type: string
                sizeGB:
                    type: integer
        diskDetails:
            type: object
            properties:
                createdAt:
                    type: string
                    format: date-time
                id:
                    type: string
                mountPath:
                    type: string
                name:
                    type: string
                serviceId:
                    type: string
                sizeGB:
                    type: integer
                updatedAt:
                    type: string
                    format: date-time
        diskPATCH:
            type: object
            properties:
                mountPath:
                    type: string
                name:
                    type: string
                sizeGB:
                    type: integer
        diskPOST:
            type: object
            required:
                - name
                - sizeGB
                - mountPath
                - serviceId
            properties:
                mountPath:
                    type: string
                name:
                    type: string
                serviceId:
                    type: string
                sizeGB:
                    type: integer
        diskSnapshot:
            type: object
            properties:
                createdAt:
                    type: string
                    format: date-time
                instanceId:
                    type: string
                snapshotKey:
                    type: string
        dockerDetails:
            type: object
            required:
                - dockerCommand
                - dockerContext
                - dockerfilePath
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    type: string
                preDeployCommand:
                    type: string
                registryCredential:
                    $ref: '#/components/schemas/registryCredential'
        dockerDetailsPATCH:
            type: object
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    type: string
                preDeployCommand:
                    type: string
                registryCredentialId:
                    type: string
        dockerDetailsPOST:
            type: object
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    type: string
                    description: Defaults to "./Dockerfile"
                preDeployCommand:
                    type: string
                registryCredentialId:
                    type: string
        envGroup:
            type: object
            required:
                - id
                - name
                - ownerId
                - envVars
                - secretFiles
                - serviceLinks
            properties:
                envVars:
                    type: array
                    items:
                        $ref: '#/components/schemas/envVar'
                environmentId:
                    type: string
                id:
                    type: string
                name:
                    type: string
                ownerId:
                    type: string
                secretFiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/secretFile'
                serviceLinks:
                    type: array
                    description: List of serviceIds linked to the envGroup
                    items:
                        $ref: '#/components/schemas/serviceLink'
        envGroupPATCHInput:
            type: object
            required:
                - name
            properties:
                name:
                    type: string
        envGroupPOSTInput:
            type: object
            required:
                - name
                - ownerId
                - envVars
            properties:
                envVars:
                    type: array
                    items:
                        $ref: '#/components/schemas/envVar'
                environmentId:
                    type: string
                name:
                    type: string
                ownerId:
                    type: string
                secretFiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/secretFileInput'
                serviceIds:
                    type: array
                    items:
                        type: string
                        description: List of serviceIds to link the envGroup to
        envSpecificDetails:
            oneOf:
                - $ref: '#/components/schemas/dockerDetails'
                - $ref: '#/components/schemas/nativeEnvironmentDetails'
        envVar:
            type: object
            required:
                - key
                - value
            properties:
                key:
                    type: string
                value:
                    type: string
        envVarGenerateValue:
            type: object
            required:
                - generateValue
            properties:
                generateValue:
                    type: boolean
        envVarInput:
            oneOf:
                - $ref: '#/components/schemas/envVarKeyValue'
                - $ref: '#/components/schemas/envVarKeyGenerateValue'
            type: object
        envVarInputArray:
            type: array
            items:
                $ref: '#/components/schemas/envVarInput'
        envVarKeyGenerateValue:
            type: object
            required:
                - key
                - generateValue
            properties:
                generateValue:
                    type: boolean
                key:
                    type: string
        envVarKeyValue:
            type: object
            required:
                - key
                - value
            properties:
                key:
                    type: string
                value:
                    type: string
        envVarValue:
            type: object
            required:
                - value
            properties:
                value:
                    type: string
        envVarWithCursor:
            type: object
            required:
                - envVar
                - cursor
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                envVar:
                    $ref: '#/components/schemas/envVar'
        environment:
            type: object
            required:
                - id
                - name
                - projectId
                - databasesIds
                - redisIDs
                - serviceIds
                - envGroupIds
                - protected
            properties:
                databasesIds:
                    type: array
                    items:
                        type: string
                envGroupIds:
                    type: array
                    items:
                        type: string
                id:
                    type: string
                name:
                    type: string
                projectId:
                    type: string
                protected:
                    type: boolean
                redisIDs:
                    type: array
                    items:
                        type: string
                serviceIds:
                    type: array
                    items:
                        type: string
        environmentPATCHInput:
            type: object
            properties:
                name:
                    type: string
                projectId:
                    type: string
                protected:
                    type: boolean
        environmentPOSTInput:
            type: object
            required:
                - name
                - projectId
            properties:
                databasesIds:
                    type: array
                    items:
                        type: string
                envGroupIds:
                    type: array
                    items:
                        type: string
                name:
                    type: string
                projectId:
                    type: string
                protected:
                    type: boolean
                    default: false
                redisIDs:
                    type: array
                    items:
                        type: string
                serviceIds:
                    type: array
                    items:
                        type: string
        error:
            type: object
            properties:
                id:
                    type: string
                message:
                    type: string
        filterApplicationValuesCollection:
            type: array
            description: A collection of filter values for application metrics
            items:
                type: object
                properties:
                    filter:
                        type: string
                        enum:
                            - instance
                    values:
                        type: array
                        items:
                            type: string
                            example: srv-xxxxx-yyyy
            required:
                - items
        filterHTTPValuesCollection:
            type: array
            description: A collection of filter values for HTTP metrics
            items:
                type: object
                properties:
                    filter:
                        type: string
                        enum:
                            - host
                            - statusCode
                    values:
                        type: array
                        items:
                            type: string
                            example: api.example.com
            required:
                - items
        filterPathValuesCollection:
            type: array
            description: A collection of suggested paths to filter by
            items:
                type: string
                example: /user/*
            required:
                - items
        header:
            type: object
            required:
                - id
                - path
                - name
                - value
            properties:
                id:
                    type: string
                name:
                    type: string
                path:
                    type: string
                value:
                    type: string
        headerPost:
            type: object
            required:
                - path
                - name
                - value
            properties:
                name:
                    type: string
                    description: Header name
                    example: Cache-Control
                path:
                    type: string
                    description: The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
                    example: /static/*
                value:
                    type: string
                    description: Header value
                    example: public, max-age=604800
        image:
            type: object
            required:
                - imagePath
                - ownerId
            properties:
                imagePath:
                    type: string
                    description: Path to the image used for this server (e.g docker.io/library/nginx:latest).
                ownerId:
                    type: string
                    description: The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
                registryCredentialId:
                    type: string
                    description: Optional reference to the registry credential passed to the image repository to retrieve this image.
        job:
            type: object
            required:
                - id
                - serviceId
                - startCommand
                - planId
                - createdAt
            properties:
                createdAt:
                    type: string
                    format: date-time
                    example: "2021-07-15T07:20:05.777035-07:00"
                finishedAt:
                    type: string
                    format: date-time
                    example: "2021-07-15T07:20:05.777035-07:00"
                id:
                    type: string
                    example: job-xxxxx
                planId:
                    type: string
                    example: plan-srv-004
                serviceId:
                    type: string
                    example: srv-xxxxx
                startCommand:
                    type: string
                    example: echo 'hello world'
                startedAt:
                    type: string
                    format: date-time
                    example: "2021-07-15T07:20:05.777035-07:00"
                status:
                    type: string
                    example: succeeded
        label:
            type: object
            description: A time series datapoint label
            required:
                - field
                - value
            properties:
                field:
                    type: string
                    example: service
                value:
                    type: string
                    example: srv-xxxxx
        listServices:
            type: array
            items:
                $ref: '#/components/schemas/listServicesResponse'
        listServicesResponse:
            type: object
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                service:
                    oneOf:
                        - $ref: '#/components/schemas/backgroundWorkerOutput'
                        - $ref: '#/components/schemas/cronJobOutput'
                        - $ref: '#/components/schemas/privateServiceOutput'
                        - $ref: '#/components/schemas/staticSiteOutput'
                        - $ref: '#/components/schemas/webServiceOutput'
                    discriminator:
                        propertyName: type
                        mapping:
                            background_worker: '#/components/schemas/backgroundWorkerOutput'
                            cron_job: '#/components/schemas/cronJobOutput'
                            private_service: '#/components/schemas/privateServiceOutput'
                            static_site: '#/components/schemas/staticSiteOutput'
                            web_service: '#/components/schemas/webServiceOutput'
        maintenanceInfo:
            type: object
            required:
                - id
                - type
                - scheduledAt
                - state
            properties:
                id:
                    type: string
                pendingMaintenanceBy:
                    type: string
                    format: date-time
                scheduledAt:
                    type: string
                    format: date-time
                state:
                    $ref: '#/components/schemas/maintenanceState'
                type:
                    type: string
        maintenanceState:
            type: string
            enum:
                - scheduled
                - notified
                - in_progress
                - user_fix_required
                - cancelled
                - succeeded
                - failed
        maxmemoryPolicy:
            type: string
            description: The eviction policy for the Redis instance
            enum:
                - noeviction
                - allkeys_lfu
                - allkeys_lru
                - allkeys_random
                - volatile_lfu
                - volatile_lru
                - volatile_random
                - volatile_ttl
        maybeDeploy:
            type: object
            properties:
                triggeringDeploy:
                    type: string
                    enum:
                        - "yes"
                        - "no"
        nativeEnvironmentDetails:
            type: object
            required:
                - buildCommand
                - startCommand
            properties:
                buildCommand:
                    type: string
                preDeployCommand:
                    type: string
                startCommand:
                    type: string
        nativeEnvironmentDetailsPATCH:
            type: object
            properties:
                buildCommand:
                    type: string
                preDeployCommand:
                    type: string
                startCommand:
                    type: string
        nativeEnvironmentDetailsPOST:
            type: object
            description: Fields for native environment (runtime) services
            required:
                - buildCommand
                - startCommand
            properties:
                buildCommand:
                    type: string
                preDeployCommand:
                    type: string
                startCommand:
                    type: string
        notificationOverride:
            type: object
            required:
                - type
                - id
                - previewNotificationsEnabled
                - notificationsToSend
            properties:
                id:
                    type: string
                notificationsToSend:
                    $ref: '#/components/schemas/notifyOverride'
                previewNotificationsEnabled:
                    $ref: '#/components/schemas/notifyPreviewOverride'
                type:
                    type: string
                    enum:
                        - service
        notificationServiceOverride:
            type: object
            required:
                - serviceId
                - previewNotificationsEnabled
                - notificationsToSend
            properties:
                notificationsToSend:
                    $ref: '#/components/schemas/notifyOverride'
                previewNotificationsEnabled:
                    type: boolean
                serviceId:
                    type: string
        notificationServiceOverridePATCH:
            type: object
            properties:
                notificationsToSend:
                    $ref: '#/components/schemas/notifyOverride'
                previewNotificationsEnabled:
                    $ref: '#/components/schemas/notifyPreviewOverride'
        notificationSetting:
            type: object
            required:
                - ownerId
                - slackEnabled
                - emailEnabled
                - previewNotificationsEnabled
                - notificationsToSend
            properties:
                emailEnabled:
                    type: boolean
                notificationsToSend:
                    $ref: '#/components/schemas/notifySettingV2'
                ownerId:
                    type: string
                previewNotificationsEnabled:
                    type: boolean
                slackEnabled:
                    type: boolean
        notificationSettingPATCH:
            type: object
            properties:
                emailEnabled:
                    type: boolean
                notificationsToSend:
                    $ref: '#/components/schemas/notifySettingV2'
                previewNotificationsEnabled:
                    type: boolean
        notifyOverride:
            type: string
            enum:
                - default
                - none
                - failure
                - all
        notifyPreviewOverride:
            type: string
            enum:
                - default
                - false
                - true
        notifySetting:
            type: string
            enum:
                - default
                - notify
                - ignore
        notifySettingV2:
            type: string
            enum:
                - none
                - failure
                - all
        owner:
            type: object
            required:
                - id
                - name
                - email
                - type
            properties:
                email:
                    type: string
                id:
                    type: string
                name:
                    type: string
                type:
                    type: string
                    enum:
                        - user
                        - team
        paidPlan:
            type: string
            enum:
                - starter
                - standard
                - pro
                - pro_plus
                - pro_max
                - pro_ultra
        plan:
            type: string
            description: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
            enum:
                - starter
                - starter_plus
                - standard
                - standard_plus
                - pro
                - pro_plus
                - pro_max
                - pro_ultra
                - free
                - custom
            example: starter
        postgres:
            type: object
            required:
                - id
                - ipAllowList
                - createdAt
                - databaseName
                - databaseUser
                - highAvailabilityEnabled
                - name
                - owner
                - project
                - plan
                - region
                - readReplicas
                - role
                - status
                - version
            properties:
                createdAt:
                    type: string
                    format: date-time
                databaseName:
                    type: string
                databaseUser:
                    type: string
                environmentId:
                    type: string
                expiresAt:
                    type: string
                    format: date-time
                    description: The time at which the database will be expire. Applies to free tier databases only.
                highAvailabilityEnabled:
                    type: boolean
                id:
                    type: string
                ipAllowList:
                    type: array
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                maintenance:
                    $ref: '#/components/schemas/maintenanceInfo'
                name:
                    type: string
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    $ref: '#/components/schemas/postgresPlans'
                primaryPostgresID:
                    type: string
                readReplicas:
                    $ref: '#/components/schemas/readReplicas'
                region:
                    $ref: '#/components/schemas/region'
                role:
                    $ref: '#/components/schemas/databaseRole'
                status:
                    $ref: '#/components/schemas/databaseStatus'
                version:
                    $ref: '#/components/schemas/postgresVersion'
        postgresPATCHInput:
            type: object
            properties:
                datadogAPIKey:
                    type: string
                enableHighAvailability:
                    type: boolean
                ipAllowList:
                    type: array
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                name:
                    type: string
                plan:
                    $ref: '#/components/schemas/postgresPlans'
                readReplicas:
                    $ref: '#/components/schemas/readReplicas'
        postgresPOSTInput:
            type: object
            description: Input for creating a database
            required:
                - name
                - plan
                - ownerId
                - version
            properties:
                databaseName:
                    type: string
                    default: randomly generated
                databaseUser:
                    type: string
                    default: randomly generated
                datadogAPIKey:
                    type: string
                enableHighAvailability:
                    type: boolean
                    default: false
                environmentId:
                    type: string
                ipAllowList:
                    type: array
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                name:
                    type: string
                    description: The name of the database as it will appear in the Render dashboard
                ownerId:
                    type: string
                    description: The ID of the owner (team or personal user) whose resources should be returned
                plan:
                    $ref: '#/components/schemas/postgresPlans'
                readReplicas:
                    $ref: '#/components/schemas/readReplicas'
                region:
                    type: string
                version:
                    $ref: '#/components/schemas/postgresVersion'
        postgresPlans:
            type: string
            enum:
                - free
                - starter
                - standard
                - pro
                - pro_plus
                - custom
        postgresVersion:
            type: string
            description: The PostgreSQL version
            enum:
                - 11
                - 12
                - 13
                - 14
                - 15
                - 16
        previewInput:
            type: object
            required:
                - imagePath
            properties:
                imagePath:
                    type: string
                    description: 'Must be either a full URL or the relative path to an image. If a relative path, Render uses the base service''s image URL as its root. For example, if the base service''s image URL is `docker.io/library/nginx:latest`, then valid values are: `docker.io/library/nginx:<any tag or SHA>`, `library/nginx:<any tag or SHA>`, or `nginx:<any tag or SHA>`. Note that the path must match (only the tag or SHA can vary).'
                    example: docker.io/library/nginx:latest
                name:
                    type: string
                    description: A name for the service preview instance. If not specified, Render generates the name using the base service's name and the specified tag or SHA.
                    example: preview
                plan:
                    $ref: '#/components/schemas/plan'
        privateService:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsPOST'
                    type:
                        type: string
                        default: private_service
            title: PrivateService
        privateServiceDetails:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
                - openPorts
                - url
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                openPorts:
                    type: array
                    items:
                        $ref: '#/components/schemas/serverPort'
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                url:
                    type: string
        privateServiceDetailsOutput:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
                - openPorts
                - url
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                openPorts:
                    type: array
                    items:
                        $ref: '#/components/schemas/serverPort'
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                url:
                    type: string
        privateServiceDetailsPATCH:
            type: object
            properties:
                envSpecificDetails:
                    oneOf:
                        - $ref: '#/components/schemas/dockerDetailsPATCH'
                        - $ref: '#/components/schemas/nativeEnvironmentDetailsPATCH'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    enum:
                        - "yes"
                        - "no"
        privateServiceDetailsPOST:
            type: object
            required:
                - env
            properties:
                disk:
                    type: object
                    required:
                        - name
                        - mountPath
                    properties:
                        mountPath:
                            type: string
                        name:
                            type: string
                        sizeGB:
                            type: integer
                            description: Defaults to 1
                            minimum: 1
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                numInstances:
                    type: integer
                    description: Defaults to 1
                    default: 1
                    minimum: 1
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    description: Defaults to "no"
                    enum:
                        - "yes"
                        - "no"
                    default: "no"
                region:
                    $ref: '#/components/schemas/region'
        privateServiceOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsOutput'
                    type:
                        type: string
                        default: private_service
            title: PrivateService
        privateServicePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsPATCH'
                    type:
                        type: string
                        default: private_service
            title: PrivateService
        project:
            type: object
            description: A project is a collection of environments
            required:
                - id
                - createdAt
                - updatedAt
                - name
                - owner
                - environmentIds
            properties:
                createdAt:
                    type: string
                    format: date-time
                environmentIds:
                    type: array
                    description: The environments associated with the project
                    items:
                        type: string
                        description: The ID of the environment
                id:
                    type: string
                    description: The ID of the project
                name:
                    type: string
                    description: The name of the project
                owner:
                    $ref: '#/components/schemas/owner'
                updatedAt:
                    type: string
                    format: date-time
        projectPATCHInput:
            type: object
            description: Input type for updating a project
            properties:
                name:
                    type: string
        projectPOSTEnvironmentInput:
            type: object
            required:
                - name
            properties:
                databasesIds:
                    type: array
                    items:
                        type: string
                envGroupsIds:
                    type: array
                    items:
                        type: string
                name:
                    type: string
                protected:
                    type: boolean
                    default: false
                redisIds:
                    type: array
                    items:
                        type: string
                servicesIds:
                    type: array
                    items:
                        type: string
        projectPOSTInput:
            type: object
            required:
                - name
                - ownerId
                - environments
            properties:
                environments:
                    type: array
                    description: The environments to create when creating the project
                    items:
                        $ref: '#/components/schemas/projectPOSTEnvironmentInput'
                name:
                    type: string
                    description: The name of the project
                ownerId:
                    type: string
                    description: The ID of the owner that the project belongs to
        pullRequestPreviewsEnabled:
            type: string
            enum:
                - "yes"
                - "no"
        readReplicas:
            type: integer
            default: 0
            minimum: 0
            maximum: 1
        redis:
            type: object
            description: A Redis instance
            required:
                - id
                - createdAt
                - status
                - region
                - plan
                - name
                - owner
                - options
                - externalConnectionString
                - redisCLICommand
                - ipAllowList
            properties:
                createdAt:
                    type: string
                    format: date-time
                    description: The creation time of the Redis instance
                environmentId:
                    type: string
                    description: The ID of the environment the Redis instance is associated with
                id:
                    type: string
                    description: The ID of the Redis instance
                ipAllowList:
                    type: array
                    description: The IP allow list for the Redis instance
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                name:
                    type: string
                    description: The name of the Redis instance
                options:
                    $ref: '#/components/schemas/redisOptions'
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    $ref: '#/components/schemas/redisPlans'
                region:
                    $ref: '#/components/schemas/region'
                status:
                    $ref: '#/components/schemas/databaseStatus'
        redisOptions:
            type: object
            description: Options for a Redis instance
            properties:
                maxmemoryPolicy:
                    type: string
        redisPATCHInput:
            type: object
            description: Input type for updating a Redis instance
            properties:
                ipAllowList:
                    type: array
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                maxmemoryPolicy:
                    $ref: '#/components/schemas/maxmemoryPolicy'
                name:
                    type: string
                    description: The name of the Redis instance
                plan:
                    $ref: '#/components/schemas/redisPlans'
        redisPOSTInput:
            type: object
            description: Input type for creating a Redis instance
            required:
                - name
                - ownerId
                - plan
            properties:
                environmentId:
                    type: string
                ipAllowList:
                    type: array
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                maxmemoryPolicy:
                    $ref: '#/components/schemas/maxmemoryPolicy'
                name:
                    type: string
                    description: The name of the Redis instance
                ownerId:
                    type: string
                    description: The ID of the owner of the Redis instance
                plan:
                    $ref: '#/components/schemas/redisPlans'
                region:
                    type: string
                    description: The region where the Redis instance is located
        redisPlans:
            type: string
            enum:
                - free
                - starter
                - standard
                - pro
                - pro_plus
                - custom
        region:
            type: string
            enum:
                - frankfurt
                - oregon
                - ohio
                - singapore
        registryCredential:
            type: object
            required:
                - id
                - name
                - username
                - registry
            properties:
                id:
                    type: string
                    description: Unique identifier for this credential
                name:
                    type: string
                    description: Descriptive name for this credential
                registry:
                    type: string
                    description: The registry to use this credential with
                    enum:
                        - GITHUB
                        - GITLAB
                        - DOCKER
                username:
                    type: string
                    description: The username associated with the credential
        resource:
            type: object
            required:
                - id
                - name
            properties:
                id:
                    type: string
                name:
                    type: string
        route:
            type: object
            required:
                - id
                - type
                - source
                - destination
                - priority
            properties:
                destination:
                    type: string
                id:
                    type: string
                priority:
                    type: integer
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0
                source:
                    type: string
                type:
                    type: string
                    enum:
                        - redirect
                        - rewrite
        routePatch:
            type: object
            required:
                - priority
            properties:
                priority:
                    type: integer
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0. Moves this route to the specified priority and adjusts other route priorities accordingly.
        routePost:
            type: object
            required:
                - type
                - source
                - destination
            properties:
                destination:
                    type: string
                    example: /foo/:bar
                priority:
                    type: integer
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list.
                source:
                    type: string
                    example: /:bar/foo
                type:
                    type: string
                    enum:
                        - redirect
                        - rewrite
        secretFile:
            type: object
            required:
                - id
                - name
            properties:
                id:
                    type: string
                name:
                    type: string
        secretFileInput:
            type: object
            required:
                - name
                - content
            properties:
                content:
                    type: string
                name:
                    type: string
        serverPort:
            type: object
            required:
                - port
                - protocol
            properties:
                port:
                    type: integer
                    example: 10000
                protocol:
                    type: string
                    enum:
                        - TCP
                        - UDP
        service:
            type: object
            required:
                - id
                - name
                - ownerId
                - type
                - createdAt
                - updatedAt
                - suspended
                - suspenders
                - autoDeploy
                - notifyOnFail
                - slug
                - serviceDetails
                - rootDir
            properties:
                autoDeploy:
                    type: string
                    enum:
                        - "yes"
                        - "no"
                branch:
                    type: string
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                createdAt:
                    type: string
                    format: date-time
                id:
                    type: string
                imagePath:
                    type: string
                name:
                    type: string
                notifyOnFail:
                    $ref: '#/components/schemas/notifySetting'
                ownerId:
                    type: string
                repo:
                    type: string
                    example: https://github.com/render-examples/flask-hello-world
                rootDir:
                    type: string
                slug:
                    type: string
                suspended:
                    type: string
                    enum:
                        - suspended
                        - not_suspended
                suspenders:
                    type: array
                    items:
                        $ref: '#/components/schemas/suspenderType'
                updatedAt:
                    type: string
                    format: date-time
        serviceEnv:
            type: string
            description: Environment (runtime)
            enum:
                - docker
                - elixir
                - go
                - node
                - python
                - ruby
                - rust
                - image
        serviceLink:
            type: object
            required:
                - id
                - name
                - type
            properties:
                id:
                    type: string
                name:
                    type: string
                type:
                    $ref: '#/components/schemas/serviceTypeShort'
        servicePATCH:
            type: object
            properties:
                autoDeploy:
                    type: string
                    enum:
                        - "yes"
                        - "no"
                branch:
                    type: string
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                image:
                    $ref: '#/components/schemas/image'
                name:
                    type: string
                repo:
                    type: string
                rootDir:
                    type: string
        servicePOST:
            type: object
            required:
                - type
                - name
                - ownerId
            properties:
                autoDeploy:
                    type: string
                    description: Defaults to "yes"
                    enum:
                        - "yes"
                        - "no"
                    default: "yes"
                branch:
                    type: string
                    description: If left empty, this will fall back to the default branch of the repository
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                envVars:
                    $ref: '#/components/schemas/envVarInputArray'
                image:
                    $ref: '#/components/schemas/image'
                name:
                    type: string
                ownerId:
                    type: string
                repo:
                    type: string
                    description: Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
                    example: https://github.com/render-examples/flask-hello-world
                rootDir:
                    type: string
                secretFiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/secretFile'
        serviceType:
            type: string
            enum:
                - static_site
                - web_service
                - private_service
                - background_worker
                - cron_job
        serviceTypeShort:
            type: string
            enum:
                - static
                - web
                - pserv
                - worker
                - cron
        staticSite:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsPOST'
                    type:
                        type: string
                        default: static_site
            title: StaticSite
        staticSiteDetails:
            type: object
            required:
                - buildCommand
                - publishPath
                - pullRequestPreviewsEnabled
                - url
                - buildPlan
            properties:
                buildCommand:
                    type: string
                buildPlan:
                    type: string
                parentServer:
                    $ref: '#/components/schemas/resource'
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                url:
                    type: string
        staticSiteDetailsOutput:
            type: object
            required:
                - buildCommand
                - publishPath
                - pullRequestPreviewsEnabled
                - url
                - buildPlan
            properties:
                buildCommand:
                    type: string
                buildPlan:
                    type: string
                parentServer:
                    $ref: '#/components/schemas/resource'
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                url:
                    type: string
        staticSiteDetailsPATCH:
            type: object
            properties:
                buildCommand:
                    type: string
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    type: string
                    enum:
                        - "yes"
                        - "no"
        staticSiteDetailsPOST:
            type: object
            properties:
                buildCommand:
                    type: string
                headers:
                    type: array
                    items:
                        $ref: '#/components/schemas/headerPost'
                publishPath:
                    type: string
                    description: Defaults to "public"
                pullRequestPreviewsEnabled:
                    type: string
                    description: Defaults to "no"
                    enum:
                        - "yes"
                        - "no"
                    default: "no"
                routes:
                    type: array
                    items:
                        $ref: '#/components/schemas/route'
        staticSiteOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsOutput'
                    type:
                        type: string
                        default: static_site
            title: StaticSite
        staticSitePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsPATCH'
                    type:
                        type: string
                        default: static_site
            title: StaticSite
        suspenderType:
            type: string
            enum:
                - admin
                - billing
                - user
                - parent_service
                - unknown
        timeSeries:
            type: object
            description: A time series data point
            required:
                - labels
                - values
                - unit
            properties:
                labels:
                    type: array
                    description: List of labels describing the time series
                    items:
                        $ref: '#/components/schemas/label'
                unit:
                    $ref: '#/components/schemas/unit'
                values:
                    type: array
                    description: The values of the time series
                    items:
                        $ref: '#/components/schemas/timeSeriesValue'
        timeSeriesCollection:
            type: array
            description: A collection of time series
            items:
                $ref: '#/components/schemas/timeSeries'
            required:
                - items
        timeSeriesValue:
            type: object
            description: A time series datapoint value
            required:
                - timestamp
                - value
                - unit
            properties:
                timestamp:
                    type: string
                    format: date-time
                    example: "2021-06-17T08:15:30Z"
                value:
                    type: number
                    example: 1
        unit:
            type: string
            example: GB
        webService:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsPOST'
                    type:
                        type: string
                        default: web_service
            title: WebService
        webServiceDetails:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
                - healthCheckPath
                - openPorts
                - url
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                healthCheckPath:
                    type: string
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                openPorts:
                    type: array
                    items:
                        $ref: '#/components/schemas/serverPort'
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                url:
                    type: string
        webServiceDetailsOutput:
            type: object
            required:
                - env
                - envSpecificDetails
                - plan
                - region
                - pullRequestPreviewsEnabled
                - numInstances
                - buildPlan
                - healthCheckPath
                - openPorts
                - url
            properties:
                autoscaling:
                    $ref: '#/components/schemas/autoscalingConfig'
                buildPlan:
                    type: string
                disk:
                    $ref: '#/components/schemas/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                healthCheckPath:
                    type: string
                numInstances:
                    type: integer
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                openPorts:
                    type: array
                    items:
                        $ref: '#/components/schemas/serverPort'
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                url:
                    type: string
        webServiceDetailsPATCH:
            type: object
            properties:
                envSpecificDetails:
                    oneOf:
                        - $ref: '#/components/schemas/dockerDetailsPATCH'
                        - $ref: '#/components/schemas/nativeEnvironmentDetailsPATCH'
                healthCheckPath:
                    type: string
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    enum:
                        - "yes"
                        - "no"
        webServiceDetailsPOST:
            type: object
            required:
                - env
            properties:
                disk:
                    type: object
                    required:
                        - name
                        - mountPath
                    properties:
                        mountPath:
                            type: string
                        name:
                            type: string
                        sizeGB:
                            type: integer
                            description: Defaults to 1
                            minimum: 1
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                healthCheckPath:
                    type: string
                numInstances:
                    type: integer
                    description: Defaults to 1
                    minimum: 1
                plan:
                    $ref: '#/components/schemas/paidPlan'
                pullRequestPreviewsEnabled:
                    type: string
                    description: Defaults to "no"
                    enum:
                        - "yes"
                        - "no"
                    default: "no"
                region:
                    $ref: '#/components/schemas/region'
        webServiceOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsOutput'
                    type:
                        type: string
                        default: web_service
            title: WebService
        webServicePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - type: object
                  properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsPATCH'
                    type:
                        type: string
                        default: web_service
            title: WebService
    parameters:
        applicationMetricAggregationMethod:
            name: aggregationMethod
            in: query
            description: The aggregation method to apply to multiple time series
            schema:
                type: string
                enum:
                    - AVG
                    - MAX
                    - MIN
        createdAfterParam:
            name: createdAfter
            in: query
            description: Filter for resources created after a certain time (specified as an ISO 8601 timestamp)
            schema:
                type: string
                format: date-time
            example: "2021-02-17T08:15:30Z"
        createdBeforeParam:
            name: createdBefore
            in: query
            description: Filter for resources created before a certain time (specified as an ISO 8601 timestamp)
            schema:
                type: string
                format: date-time
            example: "2021-06-17T08:15:30Z"
        cursorParam:
            name: cursor
            in: query
            description: Cursor to begin retrieving entries for this query
            schema:
                type: string
        customDomainIdOrNameParam:
            name: customDomainIdOrName
            in: path
            description: The ID or name of the custom domain
            required: true
            schema:
                type: string
        deployIdParam:
            name: deployId
            in: path
            description: The ID of the deploy
            required: true
            schema:
                type: string
        endTimeParam:
            name: endTime
            in: query
            description: Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.
            schema:
                type: string
                format: date-time
                example: "2021-06-17T08:30:30Z"
        envParam:
            name: env
            in: query
            description: Filter for environments (runtimes) of services
            style: form
            explode: false
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/serviceEnv'
        environmentIdParam:
            name: environmentId
            in: query
            description: Filter for resources that belong to an environment
            style: form
            explode: false
            schema:
                type: array
                items:
                    type: string
        hostQueryParam:
            name: host
            in: query
            description: The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together
            schema:
                type: string
                example: example.com
        httpAggregateBy:
            name: aggregateBy
            in: query
            description: The field to aggregate by
            schema:
                type: string
                enum:
                    - statusCode
                    - host
        httpStatusCode:
            name: statusCode
            in: query
            description: The status codes of HTTP requests to filter to. When multiple status code query params are provided, they are ORed together
            schema:
                type: string
                example: 200
        includeReplicasParam:
            name: includeReplicas
            in: query
            description: Include replicas in the response
            schema:
                type: boolean
                default: true
        instanceQueryParam:
            name: instance
            in: query
            description: Instance ID to query. When multiple instance ID query params are provided, they are ORed together
            schema:
                type: string
                example: srv-xxxxx-yyyy
        jobIdParam:
            name: jobId
            in: path
            description: The ID of the job
            required: true
            schema:
                type: string
        limitParam:
            name: limit
            in: query
            description: Max number of items that can be returned
            schema:
                type: number
                description: Defaults to 20
                default: 20
                minimum: 1
                maximum: 100
        nameParam:
            name: name
            in: query
            description: Filter by resource name
            style: form
            explode: false
            schema:
                type: array
                items:
                    type: string
        ownerIdParam:
            name: ownerId
            in: query
            description: The ID of the owner (team or personal user) whose resources should be returned
            style: form
            explode: false
            schema:
                type: array
                items:
                    type: string
        ownerIdPathParam:
            name: ownerId
            in: path
            description: The ID of the owner (team or personal user) whose resources should be returned
            required: true
            schema:
                type: string
        pathQueryParam:
            name: path
            in: query
            description: The paths of HTTP requests to filter to. When multiple path query params are provided, they are ORed together
            schema:
                type: string
                example: /graphql
        quantile:
            name: quantile
            in: query
            description: The quantile of latencies to fetch. When multiple quantile query params are provided, they are ORed together
            schema:
                type: number
                format: float
                example: 0.99
        regionParam:
            name: region
            in: query
            description: Filter by resource region
            style: form
            explode: false
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/region'
        resolutionParam:
            name: resolutionSeconds
            in: query
            description: The resolution of the returned data
            schema:
                type: number
                default: 60
                example: 60
                minimum: 30
        serviceIdParam:
            name: serviceId
            in: path
            description: The ID of the service
            required: true
            schema:
                type: string
        serviceIdsParam:
            name: serviceIds
            in: query
            description: Filter for resources by service ID
            style: form
            schema:
                type: array
                items:
                    type: string
        serviceQueryParam:
            name: service
            in: query
            description: Service ID to query. When multiple service query params are provided, they are ORed together
            required: true
            schema:
                type: string
                example: srv-xxxxx
        serviceTypeParam:
            name: type
            in: query
            description: Filter for types of services
            style: form
            explode: false
            schema:
                type: array
                items:
                    $ref: '#/components/schemas/serviceType'
        startTimeParam:
            name: startTime
            in: query
            description: Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.
            schema:
                type: string
                format: date-time
                example: "2021-06-17T08:15:30Z"
        suspendedParam:
            name: suspended
            in: query
            description: Filter resources based on whether they're suspended or not suspended
            style: form
            explode: false
            schema:
                type: array
                items:
                    type: string
                    enum:
                        - suspended
                        - not_suspended
        updatedAfterParam:
            name: updatedAfter
            in: query
            description: Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)
            schema:
                type: string
                format: date-time
        updatedBeforeParam:
            name: updatedBefore
            in: query
            description: Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)
            schema:
                type: string
                format: date-time
            example: "2021-06-17T08:15:30Z"
    headers:
        RateLimitRemaining:
            description: The number of requests left for this time period.
            schema:
                type: integer
    responses:
        400BadRequest:
            description: The request could not be understood by the server.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        401Unauthorized:
            description: Authorization information is missing or invalid.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        402PaymentRequired:
            description: You must enter payment information to perform this request.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        403Forbidden:
            description: You do not have permissions for the requested resource.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        404NotFound:
            description: Unable to find the requested resource.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        406NotAcceptable:
            description: Unable to generate preferred media types as specified by Accept request header.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        409Conflict:
            description: The current state of the resource conflicts with this request.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        410Gone:
            description: The requested resource is no longer available.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        429RateLimit:
            description: Rate limit has been surpassed.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        500InternalServerError:
            description: An unexpected server error has occurred.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        503ServiceUnavailable:
            description: Server currently unavailable.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
        Metrics200Response:
            description: A successful response
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/timeSeriesCollection'
        MetricsFiltersApplication200Response:
            description: A successful response
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/filterApplicationValuesCollection'
        MetricsFiltersHTTP200Response:
            description: A successful response
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/filterHTTPValuesCollection'
        MetricsFiltersPath200Response:
            description: A successful response
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/filterPathValuesCollection'
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
info:
    title: Render Public API
    description: Manage everything about your Render services
    contact:
        name: Render API
        url: https://community.render.com
        email: support@render.com
    version: 1.0.0
paths:
    /metrics/bandwidth:
        get:
            tags:
                - Metrics
            summary: Get bandwidth usage for one or more services
            operationId: get-bandwidth
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/serviceQueryParam'
    /metrics/cpu:
        get:
            tags:
                - Metrics
            summary: Get CPU usage for one or more services
            operationId: get-cpu
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
            - $ref: '#/components/parameters/applicationMetricAggregationMethod'
    /metrics/cpu-limit:
        get:
            tags:
                - Metrics
            summary: Get CPU limit for one or more services
            operationId: get-cpu-limit
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
    /metrics/cpu-target:
        get:
            tags:
                - Metrics
            summary: Get CPU target for one or more services
            operationId: get-cpu-target
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
    /metrics/disk-capacity:
        get:
            tags:
                - Metrics
            summary: Get disk capacity for one or more services
            operationId: get-disk-capacity
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
    /metrics/disk-usage:
        get:
            tags:
                - Metrics
            summary: Get disk usage for one or more services
            operationId: get-disk-usage
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
    /metrics/filters/application:
        get:
            tags:
                - Metrics
            summary: Get instance values to filter by for one or more services
            operationId: get-application-filter-values
            responses:
                "200":
                    $ref: '#/components/responses/MetricsFiltersApplication200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
    /metrics/filters/http:
        get:
            tags:
                - Metrics
            summary: Get status codes and host values to filter by for one or more services
            operationId: get-http-filter-values
            responses:
                "200":
                    $ref: '#/components/responses/MetricsFiltersHTTP200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/hostQueryParam'
            - $ref: '#/components/parameters/httpStatusCode'
    /metrics/filters/path:
        get:
            tags:
                - Metrics
            summary: Get path suggestions to filter by for one or more services
            description: The path suggestions are based on the most recent 5000 log lines as filtered by the provided filters
            operationId: get-path-filter-values
            responses:
                "200":
                    $ref: '#/components/responses/MetricsFiltersPath200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/hostQueryParam'
            - $ref: '#/components/parameters/httpStatusCode'
            - $ref: '#/components/parameters/pathQueryParam'
    /metrics/http-latency:
        get:
            tags:
                - Metrics
            summary: Get HTTP latency for one or more services
            operationId: get-http-latency
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/hostQueryParam'
            - $ref: '#/components/parameters/pathQueryParam'
            - $ref: '#/components/parameters/quantile'
    /metrics/http-requests:
        get:
            tags:
                - Metrics
            summary: Get HTTP request count for one or more services
            operationId: get-http-requests
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/hostQueryParam'
            - $ref: '#/components/parameters/pathQueryParam'
            - $ref: '#/components/parameters/httpAggregateBy'
    /metrics/instance-count:
        get:
            tags:
                - Metrics
            summary: Get instance count for one or more services
            operationId: get-instance-count
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
    /metrics/memory:
        get:
            tags:
                - Metrics
            summary: Get memory usage for one or more services
            operationId: get-memory
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
    /metrics/memory-limit:
        get:
            tags:
                - Metrics
            summary: Get CPU limit for one or more services
            operationId: get-memory-limit
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
    /metrics/memory-target:
        get:
            tags:
                - Metrics
            summary: Get memory target for one or more services
            operationId: get-memory-target
            responses:
                "200":
                    $ref: '#/components/responses/Metrics200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/components/parameters/resolutionParam'
            - $ref: '#/components/parameters/serviceQueryParam'
            - $ref: '#/components/parameters/instanceQueryParam'
    /owners:
        get:
            tags:
                - Owners
            summary: List authorized users and teams
            operationId: get-owners
            parameters:
                - name: name
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: email
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        owner:
                                            $ref: '#/components/schemas/owner'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
    /owners/{ownerId}:
        get:
            tags:
                - Owners
            summary: Retrieve user or team
            operationId: get-owner
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/owner'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - name: ownerId
              in: path
              description: The ID of the user or team
              required: true
              schema:
                type: string
    /registrycredentials:
        get:
            tags:
                - Registry Credentials
            summary: List registry credentials
            description: List registry credentials
            operationId: get-registry-credentials
            parameters:
                - name: name
                  in: query
                  description: Filter for the name of a credential
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: username
                  in: query
                  description: Filter for the username of a credential
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: type
                  in: query
                  description: Filter for the registry type for the credential
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                        enum:
                            - GITHUB
                            - GITLAB
                            - DOCKER
                - name: createdBefore
                  in: query
                  description: Filter for services created before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: createdAfter
                  in: query
                  description: Filter for services created after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - name: updatedBefore
                  in: query
                  description: Filter for services updated before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: updatedAfter
                  in: query
                  description: Filter for services updated after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/registryCredential'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        post:
            tags:
                - Registry Credentials
            summary: Create registry credential
            description: Create registry credential
            operationId: create-registry-credential
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - registry
                                - username
                                - authToken
                                - ownerId
                            properties:
                                authToken:
                                    type: string
                                name:
                                    type: string
                                ownerId:
                                    type: string
                                registry:
                                    type: string
                                    enum:
                                        - GITHUB
                                        - GITLAB
                                        - DOCKER
                                username:
                                    type: string
            responses:
                "200":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
    /registrycredentials/{registryCredentialId}:
        delete:
            tags:
                - Registry Credentials
            summary: Delete registry credential
            description: Delete registry credential
            operationId: delete-registry-credential
            responses:
                "204":
                    description: Registry credential deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        get:
            tags:
                - Registry Credentials
            summary: Retrieve registry credentials
            description: Retrieve registry credentials
            operationId: getRegistrycredentials
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        patch:
            tags:
                - Registry Credentials
            summary: Update registry credential
            description: Update registry credential. Services that use this credential must be redeployed to use the updated values.
            operationId: update-registry-credential
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - registry
                                - username
                                - authToken
                            properties:
                                authToken:
                                    type: string
                                name:
                                    type: string
                                registry:
                                    type: string
                                    enum:
                                        - GITHUB
                                        - GITLAB
                                        - DOCKER
                                username:
                                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - name: registryCredentialId
              in: path
              description: The ID of the registry credential
              required: true
              schema:
                type: string
    /services:
        get:
            tags:
                - Services
            summary: List services
            operationId: get-services
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/serviceTypeParam'
                - $ref: '#/components/parameters/envParam'
                - $ref: '#/components/parameters/regionParam'
                - $ref: '#/components/parameters/suspendedParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/listServices'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        post:
            tags:
                - Services
            summary: Create service
            operationId: create-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorker'
                                - $ref: '#/components/schemas/cronJob'
                                - $ref: '#/components/schemas/privateService'
                                - $ref: '#/components/schemas/staticSite'
                                - $ref: '#/components/schemas/webService'
                            discriminator:
                                propertyName: type
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorker'
                                    cron_job: '#/components/schemas/cronJob'
                                    private_service: '#/components/schemas/privateService'
                                    static_site: '#/components/schemas/staticSite'
                                    web_service: '#/components/schemas/webService'
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                                discriminator:
                                    propertyName: type
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
    /services/{serviceId}:
        delete:
            tags:
                - Services
            summary: Delete service
            operationId: delete-service
            requestBody:
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorker'
                                - $ref: '#/components/schemas/cronJob'
                                - $ref: '#/components/schemas/privateService'
                                - $ref: '#/components/schemas/staticSite'
                                - $ref: '#/components/schemas/webService'
                            discriminator:
                                propertyName: type
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorker'
                                    cron_job: '#/components/schemas/cronJob'
                                    private_service: '#/components/schemas/privateService'
                                    static_site: '#/components/schemas/staticSite'
                                    web_service: '#/components/schemas/webService'
            responses:
                "204":
                    description: Service deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        get:
            tags:
                - Services
            summary: Retrieve service
            operationId: get-service
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                                discriminator:
                                    propertyName: type
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        patch:
            tags:
                - Services
            summary: Update service
            operationId: update-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorkerPatch'
                                - $ref: '#/components/schemas/cronJobPatch'
                                - $ref: '#/components/schemas/privateServicePatch'
                                - $ref: '#/components/schemas/staticSitePatch'
                                - $ref: '#/components/schemas/webServicePatch'
                            discriminator:
                                propertyName: type
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorkerPatch'
                                    cron_job: '#/components/schemas/cronJobPatch'
                                    private_service: '#/components/schemas/privateServicePatch'
                                    static_site: '#/components/schemas/staticSitePatch'
                                    web_service: '#/components/schemas/webServicePatch'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                                discriminator:
                                    propertyName: type
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/autoscaling:
        put:
            tags:
                - Services
            summary: Update the autoscaling config for a service
            operationId: autoscale-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/autoscalingConfig'
            responses:
                "200":
                    description: Autoscaling configuration updated
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/autoscalingConfig'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/custom-domains:
        get:
            tags:
                - Custom Domains
            summary: List custom domains
            operationId: get-custom-domains
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
                - name: name
                  in: query
                  description: Filter for the names of custom domain
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: domainType
                  in: query
                  description: Filter for apex or subdomains
                  schema:
                    type: string
                    enum:
                        - apex
                        - subdomain
                - name: verificationStatus
                  in: query
                  description: Filter for verified or unverified custom domains
                  schema:
                    type: string
                    enum:
                        - verified
                        - unverified
                - name: createdBefore
                  in: query
                  description: Filter for custom domains created before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: createdAfter
                  in: query
                  description: Filter for custom domains created after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        customDomain:
                                            $ref: '#/components/schemas/customDomain'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        post:
            tags:
                - Custom Domains
            summary: Add custom domain
            operationId: create-custom-domain
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                            properties:
                                name:
                                    type: string
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/customDomain'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/custom-domains/{customDomainIdOrName}:
        delete:
            tags:
                - Custom Domains
            summary: Delete custom domain
            operationId: delete-custom-domain
            responses:
                "204":
                    description: Custom domain deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        get:
            tags:
                - Custom Domains
            summary: Retrieve custom domain
            operationId: get-custom-domain
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/customDomain'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/customDomainIdOrNameParam'
    /services/{serviceId}/custom-domains/{customDomainIdOrName}/verify:
        post:
            tags:
                - Custom Domains
            summary: Verify DNS configuration
            operationId: refresh-custom-domain
            responses:
                "202":
                    description: Custom domain verification triggered
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/customDomainIdOrNameParam'
    /services/{serviceId}/deploys:
        get:
            tags:
                - Deploys
            summary: List deploys
            operationId: get-deploys
            parameters:
                - name: createdBefore
                  in: query
                  description: Filter for deploys created before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: createdAfter
                  in: query
                  description: Filter for deploys created after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - name: updatedBefore
                  in: query
                  description: Filter for deploys updated before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: updatedAfter
                  in: query
                  description: Filter for deploys updated after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - name: finishedBefore
                  in: query
                  description: Filter for deploys finished before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: finishedAfter
                  in: query
                  description: Filter for deploys finished after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        deploy:
                                            $ref: '#/components/schemas/deploy'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        post:
            tags:
                - Deploys
            summary: Trigger a deploy
            operationId: create-deploy
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                clearCache:
                                    type: string
                                    description: Defaults to "do_not_clear"
                                    enum:
                                        - clear
                                        - do_not_clear
                                    default: do_not_clear
                                commitId:
                                    type: string
                                    description: Specific ID of commit to deploy for a web service, defaults to latest commit. Not supported for Cron Job deploys.
                                imageUrl:
                                    type: string
                                    description: URL of the image to deploy for an image-backed service. The host, repository, and image name must match the currently configured image for the service.
            responses:
                "201":
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/deploys/{deployId}:
        get:
            tags:
                - Deploys
            summary: Retrieve deploy
            operationId: get-deploy
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/deployIdParam'
    /services/{serviceId}/deploys/{deployId}/cancel:
        post:
            tags:
                - Deploys
            summary: Cancel deploy
            description: This endpoint allows you to cancel a running deploy. Canceling cronjob deploys is currently not supported.
            operationId: cancel-deploy
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/deployIdParam'
    /services/{serviceId}/env-vars:
        get:
            tags:
                - Services
            summary: Retrieve environment variables
            operationId: get-env-vars-for-service
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/envVarWithCursor'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        put:
            tags:
                - Services
            summary: Update environment variables
            description: Replaces all environment variables for a service with the provided list of environment variables.
            operationId: update-env-vars-for-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/envVarInputArray'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/envVarWithCursor'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/headers:
        get:
            tags:
                - Services / Headers
            summary: Retrieve headers
            operationId: retrieve-headers
            parameters:
                - name: path
                  in: query
                  description: Filter for specific paths that headers apply to
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: name
                  in: query
                  description: Filter for header names
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: value
                  in: query
                  description: Filter for header values
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        headers:
                                            $ref: '#/components/schemas/header'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/jobs:
        get:
            tags:
                - Jobs
            summary: List jobs
            operationId: list-job
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
                - name: status
                  in: query
                  description: Filter for the status of the job (`pending`, `running`, `succeeded`, or `failed`)
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                        enum:
                            - pending
                            - running
                            - succeeded
                            - failed
                - name: createdBefore
                  in: query
                  description: Filter for jobs created before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: createdAfter
                  in: query
                  description: Filter for jobs created after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - name: startedBefore
                  in: query
                  description: Filter for jobs started before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: startedAfter
                  in: query
                  description: Filter for jobs started after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
                - name: finishedBefore
                  in: query
                  description: Filter for jobs finished before a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-06-17T08:15:30Z"
                - name: finishedAfter
                  in: query
                  description: Filter for jobs finished after a certain time (specified as an ISO 8601 timestamp)
                  schema:
                    type: string
                    format: date-time
                  example: "2021-02-17T08:15:30Z"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        job:
                                            $ref: '#/components/schemas/job'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        post:
            tags:
                - Jobs
            summary: Create job
            operationId: post-job
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - startCommand
                            properties:
                                planId:
                                    type: string
                                startCommand:
                                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/job'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/jobs/{jobId}:
        get:
            tags:
                - Jobs
            summary: Retrieve job
            operationId: get-job
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/job'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/jobIdParam'
    /services/{serviceId}/jobs/{jobId}/cancel:
        post:
            tags:
                - Jobs
            summary: Cancel running job
            operationId: cancel-job
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/job'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/jobIdParam'
    /services/{serviceId}/preview:
        post:
            tags:
                - Services
            summary: Create preview for image-backed service
            description: Creates a build preview instance for an image-backed service. The preview uses the settings of the base service (referenced by `serviceId`), except settings overridden via provided parameters. You can view all active previews from your service's Previews tab on the Render Dashboard. Note that you can't create previews for Git-backed services using the Render API.
            operationId: preview-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/previewInput'
            responses:
                "200":
                    description: Created
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    deployId:
                                        type: string
                                    service:
                                        $ref: '#/components/schemas/service'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/restart:
        post:
            tags:
                - Services
            summary: Restart a server
            operationId: restart-server
            responses:
                "200":
                    description: Server restarted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/resume:
        post:
            tags:
                - Services
            summary: Resume service
            operationId: resume-service
            responses:
                "202":
                    description: Service resumed successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/rollback:
        post:
            tags:
                - Deploys
            summary: Rollback to a previous deploy
            description: Trigger a rollback to a previous deploy
            operationId: rollback-deploy
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - deployId
                            properties:
                                deployId:
                                    type: string
                                    description: The ID of the deploy to rollback to
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/routes:
        get:
            tags:
                - Services / Routes
            summary: Retrieve redirect and rewrite rules
            operationId: retrieve-routes
            parameters:
                - name: type
                  in: query
                  description: Filter for the type of route rule
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                        enum:
                            - redirect
                            - rewrite
                - name: source
                  in: query
                  description: Filter for the source path of the route
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - name: destination
                  in: query
                  description: Filter for the destination path of the route
                  style: form
                  explode: false
                  schema:
                    type: array
                    items:
                        type: string
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        routes:
                                            $ref: '#/components/schemas/route'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/scale:
        post:
            tags:
                - Services
            summary: Scale service to desired number of instances
            operationId: scale-service
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - numInstances
                            properties:
                                numInstances:
                                    type: integer
                                    example: 3
            responses:
                "202":
                    description: Service scaled successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
    /services/{serviceId}/suspend:
        post:
            tags:
                - Services
            summary: Suspend service
            operationId: suspend-service
            responses:
                "202":
                    description: Service suspended successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
security:
    - BearerAuth: []
servers:
    - url: https://api.render.com/v1
tags:
    - name: Custom Domains
    - name: Deploys
    - name: Disks
    - name: Environments
      description: A collection of environment variable groups, services, Postgres, and Redis instances
    - name: Environment Variable Groups
      description: A collection of environment variables that can be shared across services
    - name: Jobs
    - name: Metrics
      description: The `Metrics` endpoints allow you to retrieve metrics for your Render services.
    - name: Notification Settings
    - name: Owners
      description: The `Owners` endpoints supply more information about the users and teams that your API key has access to.
    - name: Postgres
    - name: Projects
      description: A collection of environments
    - name: Redis
    - name: Registry Credentials
    - name: Services
    - name: Services / Headers
      description: Use HTTP headers to inject response headers in static site responses. You can also use wildcards like /path/* to add headers to responses for all matching request paths.
    - name: Services / Routes
      description: Add Redirect or Rewrite Rules to modify requests to your site without writing code. You can use URL parameters to capture path segments, and wildcards to redirect everything under a given path.
