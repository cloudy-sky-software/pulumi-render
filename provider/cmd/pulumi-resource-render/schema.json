{
    "name": "render",
    "displayName": "Render",
    "description": "A Pulumi package for creating and managing Render resources.",
    "keywords": [
        "pulumi",
        "render",
        "category/cloud",
        "kind/native"
    ],
    "homepage": "https://cloudysky.software",
    "license": "Apache-2.0",
    "repository": "https://github.com/cloudy-sky-software/pulumi-render",
    "pluginDownloadURL": "https://github.com/cloudy-sky-software/pulumi-render/releases/download/${VERSION}",
    "publisher": "Cloudy Sky Software",
    "language": {
        "csharp": {
            "namespaces": {
                "": "Provider",
                "render": "Render",
                "services": "Services"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "CloudySkySoftware"
        },
        "go": {
            "importBasePath": "github.com/cloudy-sky-software/pulumi-render/sdk/go/render"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0",
                "@types/glob": "^5.0.35",
                "@types/node-fetch": "^2.1.4",
                "@types/tmp": "^0.0.33",
                "glob": "^7.1.2",
                "node-fetch": "^2.3.0",
                "shell-quote": "^1.6.1",
                "tmp": "^0.0.33"
            },
            "devDependencies": {
                "@types/mocha": "^5.2.5",
                "@types/shell-quote": "^1.6.0",
                "mocha": "^5.2.0"
            },
            "packageName": "@cloudyskysoftware/render"
        },
        "python": {
            "packageName": "cloudyskysoftware_pulumi_render",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The Render API key",
                "language": {
                    "csharp": {
                        "name": "ApiKey"
                    }
                },
                "secret": true
            },
            "clearCacheOnServiceUpdateDeployments": {
                "$ref": "#/types/render:services:DeployClearCache",
                "description": "When a service is updated, a deployment is automatically triggered. This variable controls whether or not the service cache should be cleared upon deployment.",
                "language": {
                    "csharp": {
                        "name": "ClearCacheOnServiceUpdateDeployments"
                    }
                }
            }
        }
    },
    "types": {
        "render:services:CustomDomainDomainType": {
            "type": "string",
            "enum": [
                {
                    "name": "Apex",
                    "value": "apex"
                },
                {
                    "name": "Subdomain",
                    "value": "subdomain"
                }
            ]
        },
        "render:services:CustomDomainVerificationStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Verified",
                    "value": "verified"
                },
                {
                    "name": "Unverified",
                    "value": "unverified"
                }
            ]
        },
        "render:services:DeployClearCache": {
            "type": "string",
            "enum": [
                {
                    "name": "DoNotClear",
                    "value": "do_not_clear"
                },
                {
                    "name": "Clear",
                    "value": "clear"
                }
            ]
        },
        "render:services:DeployCommit": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:ServerProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:ServiceDisk": {
            "properties": {
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "number",
                    "default": 1
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "render:services:ServiceDockerDetails": {
            "properties": {
                "dockerCommand": {
                    "type": "string"
                },
                "dockerContext": {
                    "type": "string"
                },
                "dockerfilePath": {
                    "type": "string",
                    "default": "./Dockerfile"
                }
            },
            "type": "object"
        },
        "render:services:ServiceNativeEnvironmentDetails": {
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "buildCommand",
                "startCommand"
            ]
        },
        "render:services:ServiceNotifyOnFail": {
            "description": "The notification setting for this service upon deployment failure.",
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "Notify",
                    "value": "notify"
                },
                {
                    "name": "Ignore",
                    "value": "ignore"
                }
            ]
        },
        "render:services:ServiceServiceHeader": {
            "description": "A service header object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "value"
            ]
        },
        "render:services:ServiceStaticSite": {
            "description": "A static website service",
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceServiceHeader"
                    }
                },
                "parentServer": {
                    "$ref": "#/types/render:services:ServiceStaticSiteParentServerProperties"
                },
                "publishPath": {
                    "type": "string",
                    "default": "public"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:ServiceStaticSitePullRequestPreviewsEnabled",
                    "default": "no"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceStaticSiteRoute"
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The HTTPS service URL. A subdomain of onrender.com, by default."
                }
            },
            "type": "object"
        },
        "render:services:ServiceStaticSiteParentServerProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:ServiceStaticSitePullRequestPreviewsEnabled": {
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:ServiceStaticSiteRoute": {
            "description": "A route object for a static site",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:services:ServiceStaticSiteRouteType"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "source",
                "type"
            ]
        },
        "render:services:ServiceStaticSiteRouteType": {
            "type": "string",
            "enum": [
                {
                    "name": "Redirect",
                    "value": "redirect"
                },
                {
                    "name": "Rewrite",
                    "value": "rewrite"
                }
            ]
        },
        "render:services:ServiceSuspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:services:ServiceType": {
            "type": "string",
            "enum": [
                {
                    "name": "StaticSite",
                    "value": "static_site"
                },
                {
                    "name": "WebService",
                    "value": "web_service"
                },
                {
                    "name": "PrivateService",
                    "value": "private_service"
                },
                {
                    "name": "BackgroundWorker",
                    "value": "background_worker"
                },
                {
                    "name": "CronJob",
                    "value": "cron_job"
                }
            ]
        },
        "render:services:ServiceWebService": {
            "properties": {
                "disk": {
                    "$ref": "#/types/render:services:ServiceDisk"
                },
                "env": {
                    "$ref": "#/types/render:services:ServiceWebServiceEnv"
                },
                "envSpecificDetails": {
                    "oneOf": [
                        {
                            "$ref": "#/types/render:services:ServiceDockerDetails"
                        },
                        {
                            "$ref": "#/types/render:services:ServiceNativeEnvironmentDetails"
                        }
                    ]
                },
                "healthCheckPath": {
                    "type": "string"
                },
                "numInstances": {
                    "type": "number",
                    "default": 1
                },
                "plan": {
                    "$ref": "#/types/render:services:ServiceWebServicePlan",
                    "default": "starter"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:ServiceWebServicePullRequestPreviewsEnabled",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:ServiceWebServiceRegion",
                    "default": "oregon"
                }
            },
            "type": "object",
            "required": [
                "env"
            ]
        },
        "render:services:ServiceWebServiceEnv": {
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                }
            ]
        },
        "render:services:ServiceWebServicePlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                }
            ]
        },
        "render:services:ServiceWebServicePullRequestPreviewsEnabled": {
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:ServiceWebServiceRegion": {
            "type": "string",
            "enum": [
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                }
            ]
        }
    },
    "provider": {
        "description": "The provider type for the render package.",
        "type": "object",
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The Render API key.",
                "defaultInfo": {
                    "environment": [
                        "RENDER_APIKEY"
                    ]
                },
                "language": {
                    "csharp": {
                        "name": "ApiKey"
                    }
                },
                "secret": true
            }
        }
    },
    "resources": {
        "render:services:CustomDomain": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "domainType": {
                    "$ref": "#/types/render:services:CustomDomainDomainType"
                },
                "name": {
                    "type": "string"
                },
                "publicSuffix": {
                    "type": "string"
                },
                "redirectForName": {
                    "type": "string"
                },
                "server": {
                    "$ref": "#/types/render:services:ServerProperties"
                },
                "verificationStatus": {
                    "$ref": "#/types/render:services:CustomDomainVerificationStatus"
                }
            },
            "type": "object",
            "required": [
                "name",
                "domainType",
                "redirectForName",
                "verificationStatus",
                "server"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "server": {
                    "$ref": "#/types/render:services:ServerProperties"
                }
            },
            "requiredInputs": [
                "name",
                "server"
            ]
        },
        "render:services:Deploy": {
            "properties": {
                "clearCache": {
                    "$ref": "#/types/render:services:DeployClearCache",
                    "default": "do_not_clear"
                },
                "commit": {
                    "$ref": "#/types/render:services:DeployCommit"
                }
            },
            "type": "object",
            "inputProperties": {
                "clearCache": {
                    "$ref": "#/types/render:services:DeployClearCache",
                    "default": "do_not_clear"
                }
            }
        },
        "render:services:Scale": {
            "properties": {
                "numInstances": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "numInstances"
            ],
            "inputProperties": {
                "numInstances": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "numInstances"
            ]
        },
        "render:services:Service": {
            "description": "\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create a service\n```typescript\nimport * as render from \"@pulumi/render\";\n\n// TODO: Fill me in!\nconst service = new render.Service(\"staticSite\", {});\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Whether to auto deploy the service or not upon git push."
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository."
                },
                "createdAt": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail",
                    "description": "The notification setting for this service upon deployment failure."
                },
                "ownerId": {
                    "type": "string",
                    "description": "The id of the owner (user/team)."
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "serviceDetails": {
                    "oneOf": [
                        {
                            "$ref": "#/types/render:services:ServiceStaticSite"
                        },
                        {
                            "$ref": "#/types/render:services:ServiceWebService"
                        }
                    ],
                    "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                            "static_site": "#/components/schemas/staticSite",
                            "web_service": "#/components/schemas/webService"
                        }
                    }
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/types/render:services:ServiceType"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "name",
                "ownerId",
                "repo"
            ],
            "inputProperties": {
                "autoDeploy": {
                    "type": "boolean",
                    "description": "Whether to auto deploy the service or not upon git push."
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository."
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The id of the owner (user/team)."
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "serviceDetails": {
                    "oneOf": [
                        {
                            "$ref": "#/types/render:services:ServiceStaticSite"
                        },
                        {
                            "$ref": "#/types/render:services:ServiceWebService"
                        }
                    ],
                    "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                            "static_site": "#/components/schemas/staticSite",
                            "web_service": "#/components/schemas/webService"
                        }
                    }
                },
                "type": {
                    "$ref": "#/types/render:services:ServiceType"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId",
                "repo",
                "type"
            ]
        },
        "render:services:Suspend": {
            "type": "object"
        }
    }
}