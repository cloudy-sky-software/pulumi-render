// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Services
{
    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsCreateEnv : IEquatable<BackgroundWorkerDetailsCreateEnv>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsCreateEnv Docker { get; } = new BackgroundWorkerDetailsCreateEnv("docker");
        public static BackgroundWorkerDetailsCreateEnv Elixir { get; } = new BackgroundWorkerDetailsCreateEnv("elixir");
        public static BackgroundWorkerDetailsCreateEnv Go { get; } = new BackgroundWorkerDetailsCreateEnv("go");
        public static BackgroundWorkerDetailsCreateEnv Node { get; } = new BackgroundWorkerDetailsCreateEnv("node");
        public static BackgroundWorkerDetailsCreateEnv Python { get; } = new BackgroundWorkerDetailsCreateEnv("python");
        public static BackgroundWorkerDetailsCreateEnv Ruby { get; } = new BackgroundWorkerDetailsCreateEnv("ruby");
        public static BackgroundWorkerDetailsCreateEnv Rust { get; } = new BackgroundWorkerDetailsCreateEnv("rust");
        public static BackgroundWorkerDetailsCreateEnv Image { get; } = new BackgroundWorkerDetailsCreateEnv("image");

        public static bool operator ==(BackgroundWorkerDetailsCreateEnv left, BackgroundWorkerDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsCreateEnv left, BackgroundWorkerDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsCreateEnv other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "starter"
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsCreatePlan : IEquatable<BackgroundWorkerDetailsCreatePlan>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsCreatePlan Starter { get; } = new BackgroundWorkerDetailsCreatePlan("starter");
        public static BackgroundWorkerDetailsCreatePlan Standard { get; } = new BackgroundWorkerDetailsCreatePlan("standard");
        public static BackgroundWorkerDetailsCreatePlan Pro { get; } = new BackgroundWorkerDetailsCreatePlan("pro");
        public static BackgroundWorkerDetailsCreatePlan ProPlus { get; } = new BackgroundWorkerDetailsCreatePlan("pro_plus");
        public static BackgroundWorkerDetailsCreatePlan ProMax { get; } = new BackgroundWorkerDetailsCreatePlan("pro_max");
        public static BackgroundWorkerDetailsCreatePlan ProUltra { get; } = new BackgroundWorkerDetailsCreatePlan("pro_ultra");

        public static bool operator ==(BackgroundWorkerDetailsCreatePlan left, BackgroundWorkerDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsCreatePlan left, BackgroundWorkerDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsCreatePlan other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled : IEquatable<BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled No { get; } = new BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled left, BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled left, BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsCreateRegion : IEquatable<BackgroundWorkerDetailsCreateRegion>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsCreateRegion Frankfurt { get; } = new BackgroundWorkerDetailsCreateRegion("frankfurt");
        public static BackgroundWorkerDetailsCreateRegion Oregon { get; } = new BackgroundWorkerDetailsCreateRegion("oregon");
        public static BackgroundWorkerDetailsCreateRegion Ohio { get; } = new BackgroundWorkerDetailsCreateRegion("ohio");
        public static BackgroundWorkerDetailsCreateRegion Singapore { get; } = new BackgroundWorkerDetailsCreateRegion("singapore");
        public static BackgroundWorkerDetailsCreateRegion Virginia { get; } = new BackgroundWorkerDetailsCreateRegion("virginia");

        public static bool operator ==(BackgroundWorkerDetailsCreateRegion left, BackgroundWorkerDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsCreateRegion left, BackgroundWorkerDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsCreateRegion other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsCreateRuntime : IEquatable<BackgroundWorkerDetailsCreateRuntime>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsCreateRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsCreateRuntime Docker { get; } = new BackgroundWorkerDetailsCreateRuntime("docker");
        public static BackgroundWorkerDetailsCreateRuntime Elixir { get; } = new BackgroundWorkerDetailsCreateRuntime("elixir");
        public static BackgroundWorkerDetailsCreateRuntime Go { get; } = new BackgroundWorkerDetailsCreateRuntime("go");
        public static BackgroundWorkerDetailsCreateRuntime Node { get; } = new BackgroundWorkerDetailsCreateRuntime("node");
        public static BackgroundWorkerDetailsCreateRuntime Python { get; } = new BackgroundWorkerDetailsCreateRuntime("python");
        public static BackgroundWorkerDetailsCreateRuntime Ruby { get; } = new BackgroundWorkerDetailsCreateRuntime("ruby");
        public static BackgroundWorkerDetailsCreateRuntime Rust { get; } = new BackgroundWorkerDetailsCreateRuntime("rust");
        public static BackgroundWorkerDetailsCreateRuntime Image { get; } = new BackgroundWorkerDetailsCreateRuntime("image");

        public static bool operator ==(BackgroundWorkerDetailsCreateRuntime left, BackgroundWorkerDetailsCreateRuntime right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsCreateRuntime left, BackgroundWorkerDetailsCreateRuntime right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsCreateRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsCreateRuntime other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsCreateRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputBuildPlan : IEquatable<BackgroundWorkerDetailsOutputBuildPlan>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputBuildPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputBuildPlan Starter { get; } = new BackgroundWorkerDetailsOutputBuildPlan("starter");
        public static BackgroundWorkerDetailsOutputBuildPlan Performance { get; } = new BackgroundWorkerDetailsOutputBuildPlan("performance");

        public static bool operator ==(BackgroundWorkerDetailsOutputBuildPlan left, BackgroundWorkerDetailsOutputBuildPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputBuildPlan left, BackgroundWorkerDetailsOutputBuildPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputBuildPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputBuildPlan other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputBuildPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputEnv : IEquatable<BackgroundWorkerDetailsOutputEnv>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputEnv Docker { get; } = new BackgroundWorkerDetailsOutputEnv("docker");
        public static BackgroundWorkerDetailsOutputEnv Elixir { get; } = new BackgroundWorkerDetailsOutputEnv("elixir");
        public static BackgroundWorkerDetailsOutputEnv Go { get; } = new BackgroundWorkerDetailsOutputEnv("go");
        public static BackgroundWorkerDetailsOutputEnv Node { get; } = new BackgroundWorkerDetailsOutputEnv("node");
        public static BackgroundWorkerDetailsOutputEnv Python { get; } = new BackgroundWorkerDetailsOutputEnv("python");
        public static BackgroundWorkerDetailsOutputEnv Ruby { get; } = new BackgroundWorkerDetailsOutputEnv("ruby");
        public static BackgroundWorkerDetailsOutputEnv Rust { get; } = new BackgroundWorkerDetailsOutputEnv("rust");
        public static BackgroundWorkerDetailsOutputEnv Image { get; } = new BackgroundWorkerDetailsOutputEnv("image");

        public static bool operator ==(BackgroundWorkerDetailsOutputEnv left, BackgroundWorkerDetailsOutputEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputEnv left, BackgroundWorkerDetailsOutputEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputEnv other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputPlan : IEquatable<BackgroundWorkerDetailsOutputPlan>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputPlan Starter { get; } = new BackgroundWorkerDetailsOutputPlan("starter");
        public static BackgroundWorkerDetailsOutputPlan StarterPlus { get; } = new BackgroundWorkerDetailsOutputPlan("starter_plus");
        public static BackgroundWorkerDetailsOutputPlan Standard { get; } = new BackgroundWorkerDetailsOutputPlan("standard");
        public static BackgroundWorkerDetailsOutputPlan StandardPlus { get; } = new BackgroundWorkerDetailsOutputPlan("standard_plus");
        public static BackgroundWorkerDetailsOutputPlan Pro { get; } = new BackgroundWorkerDetailsOutputPlan("pro");
        public static BackgroundWorkerDetailsOutputPlan ProPlus { get; } = new BackgroundWorkerDetailsOutputPlan("pro_plus");
        public static BackgroundWorkerDetailsOutputPlan ProMax { get; } = new BackgroundWorkerDetailsOutputPlan("pro_max");
        public static BackgroundWorkerDetailsOutputPlan ProUltra { get; } = new BackgroundWorkerDetailsOutputPlan("pro_ultra");
        public static BackgroundWorkerDetailsOutputPlan Free { get; } = new BackgroundWorkerDetailsOutputPlan("free");
        public static BackgroundWorkerDetailsOutputPlan Custom { get; } = new BackgroundWorkerDetailsOutputPlan("custom");

        public static bool operator ==(BackgroundWorkerDetailsOutputPlan left, BackgroundWorkerDetailsOutputPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputPlan left, BackgroundWorkerDetailsOutputPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputPlan other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled : IEquatable<BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled No { get; } = new BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled left, BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled left, BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputRegion : IEquatable<BackgroundWorkerDetailsOutputRegion>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputRegion Frankfurt { get; } = new BackgroundWorkerDetailsOutputRegion("frankfurt");
        public static BackgroundWorkerDetailsOutputRegion Oregon { get; } = new BackgroundWorkerDetailsOutputRegion("oregon");
        public static BackgroundWorkerDetailsOutputRegion Ohio { get; } = new BackgroundWorkerDetailsOutputRegion("ohio");
        public static BackgroundWorkerDetailsOutputRegion Singapore { get; } = new BackgroundWorkerDetailsOutputRegion("singapore");
        public static BackgroundWorkerDetailsOutputRegion Virginia { get; } = new BackgroundWorkerDetailsOutputRegion("virginia");

        public static bool operator ==(BackgroundWorkerDetailsOutputRegion left, BackgroundWorkerDetailsOutputRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputRegion left, BackgroundWorkerDetailsOutputRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputRegion other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsOutputRuntime : IEquatable<BackgroundWorkerDetailsOutputRuntime>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsOutputRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsOutputRuntime Docker { get; } = new BackgroundWorkerDetailsOutputRuntime("docker");
        public static BackgroundWorkerDetailsOutputRuntime Elixir { get; } = new BackgroundWorkerDetailsOutputRuntime("elixir");
        public static BackgroundWorkerDetailsOutputRuntime Go { get; } = new BackgroundWorkerDetailsOutputRuntime("go");
        public static BackgroundWorkerDetailsOutputRuntime Node { get; } = new BackgroundWorkerDetailsOutputRuntime("node");
        public static BackgroundWorkerDetailsOutputRuntime Python { get; } = new BackgroundWorkerDetailsOutputRuntime("python");
        public static BackgroundWorkerDetailsOutputRuntime Ruby { get; } = new BackgroundWorkerDetailsOutputRuntime("ruby");
        public static BackgroundWorkerDetailsOutputRuntime Rust { get; } = new BackgroundWorkerDetailsOutputRuntime("rust");
        public static BackgroundWorkerDetailsOutputRuntime Image { get; } = new BackgroundWorkerDetailsOutputRuntime("image");

        public static bool operator ==(BackgroundWorkerDetailsOutputRuntime left, BackgroundWorkerDetailsOutputRuntime right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsOutputRuntime left, BackgroundWorkerDetailsOutputRuntime right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsOutputRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsOutputRuntime other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsOutputRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CancelJobStatus : IEquatable<CancelJobStatus>
    {
        private readonly string _value;

        private CancelJobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelJobStatus Succeeded { get; } = new CancelJobStatus("succeeded");
        public static CancelJobStatus Failed { get; } = new CancelJobStatus("failed");
        public static CancelJobStatus Canceled { get; } = new CancelJobStatus("canceled");

        public static bool operator ==(CancelJobStatus left, CancelJobStatus right) => left.Equals(right);
        public static bool operator !=(CancelJobStatus left, CancelJobStatus right) => !left.Equals(right);

        public static explicit operator string(CancelJobStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelJobStatus other && Equals(other);
        public bool Equals(CancelJobStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.
    /// </summary>
    [EnumType]
    public readonly struct ClearCache : IEquatable<ClearCache>
    {
        private readonly string _value;

        private ClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClearCache Clear { get; } = new ClearCache("clear");
        public static ClearCache DoNotClear { get; } = new ClearCache("do_not_clear");

        public static bool operator ==(ClearCache left, ClearCache right) => left.Equals(right);
        public static bool operator !=(ClearCache left, ClearCache right) => !left.Equals(right);

        public static explicit operator string(ClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClearCache other && Equals(other);
        public bool Equals(ClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsCreateEnv : IEquatable<CronJobDetailsCreateEnv>
    {
        private readonly string _value;

        private CronJobDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsCreateEnv Docker { get; } = new CronJobDetailsCreateEnv("docker");
        public static CronJobDetailsCreateEnv Elixir { get; } = new CronJobDetailsCreateEnv("elixir");
        public static CronJobDetailsCreateEnv Go { get; } = new CronJobDetailsCreateEnv("go");
        public static CronJobDetailsCreateEnv Node { get; } = new CronJobDetailsCreateEnv("node");
        public static CronJobDetailsCreateEnv Python { get; } = new CronJobDetailsCreateEnv("python");
        public static CronJobDetailsCreateEnv Ruby { get; } = new CronJobDetailsCreateEnv("ruby");
        public static CronJobDetailsCreateEnv Rust { get; } = new CronJobDetailsCreateEnv("rust");
        public static CronJobDetailsCreateEnv Image { get; } = new CronJobDetailsCreateEnv("image");

        public static bool operator ==(CronJobDetailsCreateEnv left, CronJobDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsCreateEnv left, CronJobDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsCreateEnv other && Equals(other);
        public bool Equals(CronJobDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "starter"
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsCreatePlan : IEquatable<CronJobDetailsCreatePlan>
    {
        private readonly string _value;

        private CronJobDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsCreatePlan Starter { get; } = new CronJobDetailsCreatePlan("starter");
        public static CronJobDetailsCreatePlan Standard { get; } = new CronJobDetailsCreatePlan("standard");
        public static CronJobDetailsCreatePlan Pro { get; } = new CronJobDetailsCreatePlan("pro");
        public static CronJobDetailsCreatePlan ProPlus { get; } = new CronJobDetailsCreatePlan("pro_plus");
        public static CronJobDetailsCreatePlan ProMax { get; } = new CronJobDetailsCreatePlan("pro_max");
        public static CronJobDetailsCreatePlan ProUltra { get; } = new CronJobDetailsCreatePlan("pro_ultra");

        public static bool operator ==(CronJobDetailsCreatePlan left, CronJobDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsCreatePlan left, CronJobDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsCreatePlan other && Equals(other);
        public bool Equals(CronJobDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsCreateRegion : IEquatable<CronJobDetailsCreateRegion>
    {
        private readonly string _value;

        private CronJobDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsCreateRegion Frankfurt { get; } = new CronJobDetailsCreateRegion("frankfurt");
        public static CronJobDetailsCreateRegion Oregon { get; } = new CronJobDetailsCreateRegion("oregon");
        public static CronJobDetailsCreateRegion Ohio { get; } = new CronJobDetailsCreateRegion("ohio");
        public static CronJobDetailsCreateRegion Singapore { get; } = new CronJobDetailsCreateRegion("singapore");
        public static CronJobDetailsCreateRegion Virginia { get; } = new CronJobDetailsCreateRegion("virginia");

        public static bool operator ==(CronJobDetailsCreateRegion left, CronJobDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsCreateRegion left, CronJobDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsCreateRegion other && Equals(other);
        public bool Equals(CronJobDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsCreateRuntime : IEquatable<CronJobDetailsCreateRuntime>
    {
        private readonly string _value;

        private CronJobDetailsCreateRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsCreateRuntime Docker { get; } = new CronJobDetailsCreateRuntime("docker");
        public static CronJobDetailsCreateRuntime Elixir { get; } = new CronJobDetailsCreateRuntime("elixir");
        public static CronJobDetailsCreateRuntime Go { get; } = new CronJobDetailsCreateRuntime("go");
        public static CronJobDetailsCreateRuntime Node { get; } = new CronJobDetailsCreateRuntime("node");
        public static CronJobDetailsCreateRuntime Python { get; } = new CronJobDetailsCreateRuntime("python");
        public static CronJobDetailsCreateRuntime Ruby { get; } = new CronJobDetailsCreateRuntime("ruby");
        public static CronJobDetailsCreateRuntime Rust { get; } = new CronJobDetailsCreateRuntime("rust");
        public static CronJobDetailsCreateRuntime Image { get; } = new CronJobDetailsCreateRuntime("image");

        public static bool operator ==(CronJobDetailsCreateRuntime left, CronJobDetailsCreateRuntime right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsCreateRuntime left, CronJobDetailsCreateRuntime right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsCreateRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsCreateRuntime other && Equals(other);
        public bool Equals(CronJobDetailsCreateRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobDetailsOutputBuildPlan : IEquatable<CronJobDetailsOutputBuildPlan>
    {
        private readonly string _value;

        private CronJobDetailsOutputBuildPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsOutputBuildPlan Starter { get; } = new CronJobDetailsOutputBuildPlan("starter");
        public static CronJobDetailsOutputBuildPlan Performance { get; } = new CronJobDetailsOutputBuildPlan("performance");

        public static bool operator ==(CronJobDetailsOutputBuildPlan left, CronJobDetailsOutputBuildPlan right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsOutputBuildPlan left, CronJobDetailsOutputBuildPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsOutputBuildPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsOutputBuildPlan other && Equals(other);
        public bool Equals(CronJobDetailsOutputBuildPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsOutputEnv : IEquatable<CronJobDetailsOutputEnv>
    {
        private readonly string _value;

        private CronJobDetailsOutputEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsOutputEnv Docker { get; } = new CronJobDetailsOutputEnv("docker");
        public static CronJobDetailsOutputEnv Elixir { get; } = new CronJobDetailsOutputEnv("elixir");
        public static CronJobDetailsOutputEnv Go { get; } = new CronJobDetailsOutputEnv("go");
        public static CronJobDetailsOutputEnv Node { get; } = new CronJobDetailsOutputEnv("node");
        public static CronJobDetailsOutputEnv Python { get; } = new CronJobDetailsOutputEnv("python");
        public static CronJobDetailsOutputEnv Ruby { get; } = new CronJobDetailsOutputEnv("ruby");
        public static CronJobDetailsOutputEnv Rust { get; } = new CronJobDetailsOutputEnv("rust");
        public static CronJobDetailsOutputEnv Image { get; } = new CronJobDetailsOutputEnv("image");

        public static bool operator ==(CronJobDetailsOutputEnv left, CronJobDetailsOutputEnv right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsOutputEnv left, CronJobDetailsOutputEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsOutputEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsOutputEnv other && Equals(other);
        public bool Equals(CronJobDetailsOutputEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsOutputPlan : IEquatable<CronJobDetailsOutputPlan>
    {
        private readonly string _value;

        private CronJobDetailsOutputPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsOutputPlan Starter { get; } = new CronJobDetailsOutputPlan("starter");
        public static CronJobDetailsOutputPlan StarterPlus { get; } = new CronJobDetailsOutputPlan("starter_plus");
        public static CronJobDetailsOutputPlan Standard { get; } = new CronJobDetailsOutputPlan("standard");
        public static CronJobDetailsOutputPlan StandardPlus { get; } = new CronJobDetailsOutputPlan("standard_plus");
        public static CronJobDetailsOutputPlan Pro { get; } = new CronJobDetailsOutputPlan("pro");
        public static CronJobDetailsOutputPlan ProPlus { get; } = new CronJobDetailsOutputPlan("pro_plus");
        public static CronJobDetailsOutputPlan ProMax { get; } = new CronJobDetailsOutputPlan("pro_max");
        public static CronJobDetailsOutputPlan ProUltra { get; } = new CronJobDetailsOutputPlan("pro_ultra");
        public static CronJobDetailsOutputPlan Free { get; } = new CronJobDetailsOutputPlan("free");
        public static CronJobDetailsOutputPlan Custom { get; } = new CronJobDetailsOutputPlan("custom");

        public static bool operator ==(CronJobDetailsOutputPlan left, CronJobDetailsOutputPlan right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsOutputPlan left, CronJobDetailsOutputPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsOutputPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsOutputPlan other && Equals(other);
        public bool Equals(CronJobDetailsOutputPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsOutputRegion : IEquatable<CronJobDetailsOutputRegion>
    {
        private readonly string _value;

        private CronJobDetailsOutputRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsOutputRegion Frankfurt { get; } = new CronJobDetailsOutputRegion("frankfurt");
        public static CronJobDetailsOutputRegion Oregon { get; } = new CronJobDetailsOutputRegion("oregon");
        public static CronJobDetailsOutputRegion Ohio { get; } = new CronJobDetailsOutputRegion("ohio");
        public static CronJobDetailsOutputRegion Singapore { get; } = new CronJobDetailsOutputRegion("singapore");
        public static CronJobDetailsOutputRegion Virginia { get; } = new CronJobDetailsOutputRegion("virginia");

        public static bool operator ==(CronJobDetailsOutputRegion left, CronJobDetailsOutputRegion right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsOutputRegion left, CronJobDetailsOutputRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsOutputRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsOutputRegion other && Equals(other);
        public bool Equals(CronJobDetailsOutputRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsOutputRuntime : IEquatable<CronJobDetailsOutputRuntime>
    {
        private readonly string _value;

        private CronJobDetailsOutputRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsOutputRuntime Docker { get; } = new CronJobDetailsOutputRuntime("docker");
        public static CronJobDetailsOutputRuntime Elixir { get; } = new CronJobDetailsOutputRuntime("elixir");
        public static CronJobDetailsOutputRuntime Go { get; } = new CronJobDetailsOutputRuntime("go");
        public static CronJobDetailsOutputRuntime Node { get; } = new CronJobDetailsOutputRuntime("node");
        public static CronJobDetailsOutputRuntime Python { get; } = new CronJobDetailsOutputRuntime("python");
        public static CronJobDetailsOutputRuntime Ruby { get; } = new CronJobDetailsOutputRuntime("ruby");
        public static CronJobDetailsOutputRuntime Rust { get; } = new CronJobDetailsOutputRuntime("rust");
        public static CronJobDetailsOutputRuntime Image { get; } = new CronJobDetailsOutputRuntime("image");

        public static bool operator ==(CronJobDetailsOutputRuntime left, CronJobDetailsOutputRuntime right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsOutputRuntime left, CronJobDetailsOutputRuntime right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsOutputRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsOutputRuntime other && Equals(other);
        public bool Equals(CronJobDetailsOutputRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainDomainType : IEquatable<CustomDomainDomainType>
    {
        private readonly string _value;

        private CustomDomainDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainDomainType Apex { get; } = new CustomDomainDomainType("apex");
        public static CustomDomainDomainType Subdomain { get; } = new CustomDomainDomainType("subdomain");

        public static bool operator ==(CustomDomainDomainType left, CustomDomainDomainType right) => left.Equals(right);
        public static bool operator !=(CustomDomainDomainType left, CustomDomainDomainType right) => !left.Equals(right);

        public static explicit operator string(CustomDomainDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainDomainType other && Equals(other);
        public bool Equals(CustomDomainDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainVerificationStatus : IEquatable<CustomDomainVerificationStatus>
    {
        private readonly string _value;

        private CustomDomainVerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainVerificationStatus Verified { get; } = new CustomDomainVerificationStatus("verified");
        public static CustomDomainVerificationStatus Unverified { get; } = new CustomDomainVerificationStatus("unverified");

        public static bool operator ==(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => left.Equals(right);
        public static bool operator !=(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDomainVerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainVerificationStatus other && Equals(other);
        public bool Equals(CustomDomainVerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployStatus : IEquatable<DeployStatus>
    {
        private readonly string _value;

        private DeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployStatus Created { get; } = new DeployStatus("created");
        public static DeployStatus BuildInProgress { get; } = new DeployStatus("build_in_progress");
        public static DeployStatus UpdateInProgress { get; } = new DeployStatus("update_in_progress");
        public static DeployStatus Live { get; } = new DeployStatus("live");
        public static DeployStatus Deactivated { get; } = new DeployStatus("deactivated");
        public static DeployStatus BuildFailed { get; } = new DeployStatus("build_failed");
        public static DeployStatus UpdateFailed { get; } = new DeployStatus("update_failed");
        public static DeployStatus Canceled { get; } = new DeployStatus("canceled");
        public static DeployStatus PreDeployInProgress { get; } = new DeployStatus("pre_deploy_in_progress");
        public static DeployStatus PreDeployFailed { get; } = new DeployStatus("pre_deploy_failed");

        public static bool operator ==(DeployStatus left, DeployStatus right) => left.Equals(right);
        public static bool operator !=(DeployStatus left, DeployStatus right) => !left.Equals(right);

        public static explicit operator string(DeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployStatus other && Equals(other);
        public bool Equals(DeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployTrigger : IEquatable<DeployTrigger>
    {
        private readonly string _value;

        private DeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployTrigger Api { get; } = new DeployTrigger("api");
        public static DeployTrigger BlueprintSync { get; } = new DeployTrigger("blueprint_sync");
        public static DeployTrigger DeployHook { get; } = new DeployTrigger("deploy_hook");
        public static DeployTrigger DeployedByRender { get; } = new DeployTrigger("deployed_by_render");
        public static DeployTrigger Manual { get; } = new DeployTrigger("manual");
        public static DeployTrigger Other { get; } = new DeployTrigger("other");
        public static DeployTrigger NewCommit { get; } = new DeployTrigger("new_commit");
        public static DeployTrigger Rollback { get; } = new DeployTrigger("rollback");
        public static DeployTrigger ServiceResumed { get; } = new DeployTrigger("service_resumed");
        public static DeployTrigger ServiceUpdated { get; } = new DeployTrigger("service_updated");

        public static bool operator ==(DeployTrigger left, DeployTrigger right) => left.Equals(right);
        public static bool operator !=(DeployTrigger left, DeployTrigger right) => !left.Equals(right);

        public static explicit operator string(DeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployTrigger other && Equals(other);
        public bool Equals(DeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct JobStatus : IEquatable<JobStatus>
    {
        private readonly string _value;

        private JobStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static JobStatus Succeeded { get; } = new JobStatus("succeeded");
        public static JobStatus Failed { get; } = new JobStatus("failed");
        public static JobStatus Canceled { get; } = new JobStatus("canceled");

        public static bool operator ==(JobStatus left, JobStatus right) => left.Equals(right);
        public static bool operator !=(JobStatus left, JobStatus right) => !left.Equals(right);

        public static explicit operator string(JobStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is JobStatus other && Equals(other);
        public bool Equals(JobStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan Starter { get; } = new Plan("starter");
        public static Plan StarterPlus { get; } = new Plan("starter_plus");
        public static Plan Standard { get; } = new Plan("standard");
        public static Plan StandardPlus { get; } = new Plan("standard_plus");
        public static Plan Pro { get; } = new Plan("pro");
        public static Plan ProPlus { get; } = new Plan("pro_plus");
        public static Plan ProMax { get; } = new Plan("pro_max");
        public static Plan ProUltra { get; } = new Plan("pro_ultra");
        public static Plan Free { get; } = new Plan("free");
        public static Plan Custom { get; } = new Plan("custom");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "off"
    /// </summary>
    [EnumType]
    public readonly struct PreviewsGeneration : IEquatable<PreviewsGeneration>
    {
        private readonly string _value;

        private PreviewsGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreviewsGeneration Off { get; } = new PreviewsGeneration("off");
        public static PreviewsGeneration Manual { get; } = new PreviewsGeneration("manual");
        public static PreviewsGeneration Automatic { get; } = new PreviewsGeneration("automatic");

        public static bool operator ==(PreviewsGeneration left, PreviewsGeneration right) => left.Equals(right);
        public static bool operator !=(PreviewsGeneration left, PreviewsGeneration right) => !left.Equals(right);

        public static explicit operator string(PreviewsGeneration value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreviewsGeneration other && Equals(other);
        public bool Equals(PreviewsGeneration other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsCreateEnv : IEquatable<PrivateServiceDetailsCreateEnv>
    {
        private readonly string _value;

        private PrivateServiceDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsCreateEnv Docker { get; } = new PrivateServiceDetailsCreateEnv("docker");
        public static PrivateServiceDetailsCreateEnv Elixir { get; } = new PrivateServiceDetailsCreateEnv("elixir");
        public static PrivateServiceDetailsCreateEnv Go { get; } = new PrivateServiceDetailsCreateEnv("go");
        public static PrivateServiceDetailsCreateEnv Node { get; } = new PrivateServiceDetailsCreateEnv("node");
        public static PrivateServiceDetailsCreateEnv Python { get; } = new PrivateServiceDetailsCreateEnv("python");
        public static PrivateServiceDetailsCreateEnv Ruby { get; } = new PrivateServiceDetailsCreateEnv("ruby");
        public static PrivateServiceDetailsCreateEnv Rust { get; } = new PrivateServiceDetailsCreateEnv("rust");
        public static PrivateServiceDetailsCreateEnv Image { get; } = new PrivateServiceDetailsCreateEnv("image");

        public static bool operator ==(PrivateServiceDetailsCreateEnv left, PrivateServiceDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsCreateEnv left, PrivateServiceDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsCreateEnv other && Equals(other);
        public bool Equals(PrivateServiceDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "starter"
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsCreatePlan : IEquatable<PrivateServiceDetailsCreatePlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsCreatePlan Starter { get; } = new PrivateServiceDetailsCreatePlan("starter");
        public static PrivateServiceDetailsCreatePlan Standard { get; } = new PrivateServiceDetailsCreatePlan("standard");
        public static PrivateServiceDetailsCreatePlan Pro { get; } = new PrivateServiceDetailsCreatePlan("pro");
        public static PrivateServiceDetailsCreatePlan ProPlus { get; } = new PrivateServiceDetailsCreatePlan("pro_plus");
        public static PrivateServiceDetailsCreatePlan ProMax { get; } = new PrivateServiceDetailsCreatePlan("pro_max");
        public static PrivateServiceDetailsCreatePlan ProUltra { get; } = new PrivateServiceDetailsCreatePlan("pro_ultra");

        public static bool operator ==(PrivateServiceDetailsCreatePlan left, PrivateServiceDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsCreatePlan left, PrivateServiceDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsCreatePlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsCreatePullRequestPreviewsEnabled : IEquatable<PrivateServiceDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServiceDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new PrivateServiceDetailsCreatePullRequestPreviewsEnabled("yes");
        public static PrivateServiceDetailsCreatePullRequestPreviewsEnabled No { get; } = new PrivateServiceDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServiceDetailsCreatePullRequestPreviewsEnabled left, PrivateServiceDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsCreatePullRequestPreviewsEnabled left, PrivateServiceDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServiceDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsCreateRegion : IEquatable<PrivateServiceDetailsCreateRegion>
    {
        private readonly string _value;

        private PrivateServiceDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsCreateRegion Frankfurt { get; } = new PrivateServiceDetailsCreateRegion("frankfurt");
        public static PrivateServiceDetailsCreateRegion Oregon { get; } = new PrivateServiceDetailsCreateRegion("oregon");
        public static PrivateServiceDetailsCreateRegion Ohio { get; } = new PrivateServiceDetailsCreateRegion("ohio");
        public static PrivateServiceDetailsCreateRegion Singapore { get; } = new PrivateServiceDetailsCreateRegion("singapore");
        public static PrivateServiceDetailsCreateRegion Virginia { get; } = new PrivateServiceDetailsCreateRegion("virginia");

        public static bool operator ==(PrivateServiceDetailsCreateRegion left, PrivateServiceDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsCreateRegion left, PrivateServiceDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsCreateRegion other && Equals(other);
        public bool Equals(PrivateServiceDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsCreateRuntime : IEquatable<PrivateServiceDetailsCreateRuntime>
    {
        private readonly string _value;

        private PrivateServiceDetailsCreateRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsCreateRuntime Docker { get; } = new PrivateServiceDetailsCreateRuntime("docker");
        public static PrivateServiceDetailsCreateRuntime Elixir { get; } = new PrivateServiceDetailsCreateRuntime("elixir");
        public static PrivateServiceDetailsCreateRuntime Go { get; } = new PrivateServiceDetailsCreateRuntime("go");
        public static PrivateServiceDetailsCreateRuntime Node { get; } = new PrivateServiceDetailsCreateRuntime("node");
        public static PrivateServiceDetailsCreateRuntime Python { get; } = new PrivateServiceDetailsCreateRuntime("python");
        public static PrivateServiceDetailsCreateRuntime Ruby { get; } = new PrivateServiceDetailsCreateRuntime("ruby");
        public static PrivateServiceDetailsCreateRuntime Rust { get; } = new PrivateServiceDetailsCreateRuntime("rust");
        public static PrivateServiceDetailsCreateRuntime Image { get; } = new PrivateServiceDetailsCreateRuntime("image");

        public static bool operator ==(PrivateServiceDetailsCreateRuntime left, PrivateServiceDetailsCreateRuntime right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsCreateRuntime left, PrivateServiceDetailsCreateRuntime right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsCreateRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsCreateRuntime other && Equals(other);
        public bool Equals(PrivateServiceDetailsCreateRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsOutputBuildPlan : IEquatable<PrivateServiceDetailsOutputBuildPlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputBuildPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputBuildPlan Starter { get; } = new PrivateServiceDetailsOutputBuildPlan("starter");
        public static PrivateServiceDetailsOutputBuildPlan Performance { get; } = new PrivateServiceDetailsOutputBuildPlan("performance");

        public static bool operator ==(PrivateServiceDetailsOutputBuildPlan left, PrivateServiceDetailsOutputBuildPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputBuildPlan left, PrivateServiceDetailsOutputBuildPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputBuildPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputBuildPlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputBuildPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsOutputEnv : IEquatable<PrivateServiceDetailsOutputEnv>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputEnv Docker { get; } = new PrivateServiceDetailsOutputEnv("docker");
        public static PrivateServiceDetailsOutputEnv Elixir { get; } = new PrivateServiceDetailsOutputEnv("elixir");
        public static PrivateServiceDetailsOutputEnv Go { get; } = new PrivateServiceDetailsOutputEnv("go");
        public static PrivateServiceDetailsOutputEnv Node { get; } = new PrivateServiceDetailsOutputEnv("node");
        public static PrivateServiceDetailsOutputEnv Python { get; } = new PrivateServiceDetailsOutputEnv("python");
        public static PrivateServiceDetailsOutputEnv Ruby { get; } = new PrivateServiceDetailsOutputEnv("ruby");
        public static PrivateServiceDetailsOutputEnv Rust { get; } = new PrivateServiceDetailsOutputEnv("rust");
        public static PrivateServiceDetailsOutputEnv Image { get; } = new PrivateServiceDetailsOutputEnv("image");

        public static bool operator ==(PrivateServiceDetailsOutputEnv left, PrivateServiceDetailsOutputEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputEnv left, PrivateServiceDetailsOutputEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputEnv other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsOutputPlan : IEquatable<PrivateServiceDetailsOutputPlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputPlan Starter { get; } = new PrivateServiceDetailsOutputPlan("starter");
        public static PrivateServiceDetailsOutputPlan StarterPlus { get; } = new PrivateServiceDetailsOutputPlan("starter_plus");
        public static PrivateServiceDetailsOutputPlan Standard { get; } = new PrivateServiceDetailsOutputPlan("standard");
        public static PrivateServiceDetailsOutputPlan StandardPlus { get; } = new PrivateServiceDetailsOutputPlan("standard_plus");
        public static PrivateServiceDetailsOutputPlan Pro { get; } = new PrivateServiceDetailsOutputPlan("pro");
        public static PrivateServiceDetailsOutputPlan ProPlus { get; } = new PrivateServiceDetailsOutputPlan("pro_plus");
        public static PrivateServiceDetailsOutputPlan ProMax { get; } = new PrivateServiceDetailsOutputPlan("pro_max");
        public static PrivateServiceDetailsOutputPlan ProUltra { get; } = new PrivateServiceDetailsOutputPlan("pro_ultra");
        public static PrivateServiceDetailsOutputPlan Free { get; } = new PrivateServiceDetailsOutputPlan("free");
        public static PrivateServiceDetailsOutputPlan Custom { get; } = new PrivateServiceDetailsOutputPlan("custom");

        public static bool operator ==(PrivateServiceDetailsOutputPlan left, PrivateServiceDetailsOutputPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputPlan left, PrivateServiceDetailsOutputPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputPlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsOutputPullRequestPreviewsEnabled : IEquatable<PrivateServiceDetailsOutputPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputPullRequestPreviewsEnabled Yes { get; } = new PrivateServiceDetailsOutputPullRequestPreviewsEnabled("yes");
        public static PrivateServiceDetailsOutputPullRequestPreviewsEnabled No { get; } = new PrivateServiceDetailsOutputPullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServiceDetailsOutputPullRequestPreviewsEnabled left, PrivateServiceDetailsOutputPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputPullRequestPreviewsEnabled left, PrivateServiceDetailsOutputPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsOutputRegion : IEquatable<PrivateServiceDetailsOutputRegion>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputRegion Frankfurt { get; } = new PrivateServiceDetailsOutputRegion("frankfurt");
        public static PrivateServiceDetailsOutputRegion Oregon { get; } = new PrivateServiceDetailsOutputRegion("oregon");
        public static PrivateServiceDetailsOutputRegion Ohio { get; } = new PrivateServiceDetailsOutputRegion("ohio");
        public static PrivateServiceDetailsOutputRegion Singapore { get; } = new PrivateServiceDetailsOutputRegion("singapore");
        public static PrivateServiceDetailsOutputRegion Virginia { get; } = new PrivateServiceDetailsOutputRegion("virginia");

        public static bool operator ==(PrivateServiceDetailsOutputRegion left, PrivateServiceDetailsOutputRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputRegion left, PrivateServiceDetailsOutputRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputRegion other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsOutputRuntime : IEquatable<PrivateServiceDetailsOutputRuntime>
    {
        private readonly string _value;

        private PrivateServiceDetailsOutputRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsOutputRuntime Docker { get; } = new PrivateServiceDetailsOutputRuntime("docker");
        public static PrivateServiceDetailsOutputRuntime Elixir { get; } = new PrivateServiceDetailsOutputRuntime("elixir");
        public static PrivateServiceDetailsOutputRuntime Go { get; } = new PrivateServiceDetailsOutputRuntime("go");
        public static PrivateServiceDetailsOutputRuntime Node { get; } = new PrivateServiceDetailsOutputRuntime("node");
        public static PrivateServiceDetailsOutputRuntime Python { get; } = new PrivateServiceDetailsOutputRuntime("python");
        public static PrivateServiceDetailsOutputRuntime Ruby { get; } = new PrivateServiceDetailsOutputRuntime("ruby");
        public static PrivateServiceDetailsOutputRuntime Rust { get; } = new PrivateServiceDetailsOutputRuntime("rust");
        public static PrivateServiceDetailsOutputRuntime Image { get; } = new PrivateServiceDetailsOutputRuntime("image");

        public static bool operator ==(PrivateServiceDetailsOutputRuntime left, PrivateServiceDetailsOutputRuntime right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsOutputRuntime left, PrivateServiceDetailsOutputRuntime right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsOutputRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsOutputRuntime other && Equals(other);
        public bool Equals(PrivateServiceDetailsOutputRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The registry to use this credential with
    /// </summary>
    [EnumType]
    public readonly struct RegistryCredentialRegistry : IEquatable<RegistryCredentialRegistry>
    {
        private readonly string _value;

        private RegistryCredentialRegistry(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryCredentialRegistry Github { get; } = new RegistryCredentialRegistry("GITHUB");
        public static RegistryCredentialRegistry Gitlab { get; } = new RegistryCredentialRegistry("GITLAB");
        public static RegistryCredentialRegistry Docker { get; } = new RegistryCredentialRegistry("DOCKER");
        public static RegistryCredentialRegistry GoogleArtifact { get; } = new RegistryCredentialRegistry("GOOGLE_ARTIFACT");
        public static RegistryCredentialRegistry AwsEcr { get; } = new RegistryCredentialRegistry("AWS_ECR");

        public static bool operator ==(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => left.Equals(right);
        public static bool operator !=(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => !left.Equals(right);

        public static explicit operator string(RegistryCredentialRegistry value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryCredentialRegistry other && Equals(other);
        public bool Equals(RegistryCredentialRegistry other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RouteCreateType : IEquatable<RouteCreateType>
    {
        private readonly string _value;

        private RouteCreateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteCreateType Redirect { get; } = new RouteCreateType("redirect");
        public static RouteCreateType Rewrite { get; } = new RouteCreateType("rewrite");

        public static bool operator ==(RouteCreateType left, RouteCreateType right) => left.Equals(right);
        public static bool operator !=(RouteCreateType left, RouteCreateType right) => !left.Equals(right);

        public static explicit operator string(RouteCreateType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteCreateType other && Equals(other);
        public bool Equals(RouteCreateType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RouteType : IEquatable<RouteType>
    {
        private readonly string _value;

        private RouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RouteType Redirect { get; } = new RouteType("redirect");
        public static RouteType Rewrite { get; } = new RouteType("rewrite");

        public static bool operator ==(RouteType left, RouteType right) => left.Equals(right);
        public static bool operator !=(RouteType left, RouteType right) => !left.Equals(right);

        public static explicit operator string(RouteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RouteType other && Equals(other);
        public bool Equals(RouteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerPortProtocol : IEquatable<ServerPortProtocol>
    {
        private readonly string _value;

        private ServerPortProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPortProtocol Tcp { get; } = new ServerPortProtocol("TCP");
        public static ServerPortProtocol Udp { get; } = new ServerPortProtocol("UDP");

        public static bool operator ==(ServerPortProtocol left, ServerPortProtocol right) => left.Equals(right);
        public static bool operator !=(ServerPortProtocol left, ServerPortProtocol right) => !left.Equals(right);

        public static explicit operator string(ServerPortProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPortProtocol other && Equals(other);
        public bool Equals(ServerPortProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceAutoDeploy : IEquatable<ServiceAutoDeploy>
    {
        private readonly string _value;

        private ServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceAutoDeploy Yes { get; } = new ServiceAutoDeploy("yes");
        public static ServiceAutoDeploy No { get; } = new ServiceAutoDeploy("no");

        public static bool operator ==(ServiceAutoDeploy left, ServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(ServiceAutoDeploy left, ServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(ServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceAutoDeploy other && Equals(other);
        public bool Equals(ServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceCreateAutoDeploy : IEquatable<ServiceCreateAutoDeploy>
    {
        private readonly string _value;

        private ServiceCreateAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCreateAutoDeploy Yes { get; } = new ServiceCreateAutoDeploy("yes");
        public static ServiceCreateAutoDeploy No { get; } = new ServiceCreateAutoDeploy("no");

        public static bool operator ==(ServiceCreateAutoDeploy left, ServiceCreateAutoDeploy right) => left.Equals(right);
        public static bool operator !=(ServiceCreateAutoDeploy left, ServiceCreateAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(ServiceCreateAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCreateAutoDeploy other && Equals(other);
        public bool Equals(ServiceCreateAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceNotifyOnFail : IEquatable<ServiceNotifyOnFail>
    {
        private readonly string _value;

        private ServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNotifyOnFail Default { get; } = new ServiceNotifyOnFail("default");
        public static ServiceNotifyOnFail Notify { get; } = new ServiceNotifyOnFail("notify");
        public static ServiceNotifyOnFail Ignore { get; } = new ServiceNotifyOnFail("ignore");

        public static bool operator ==(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(ServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNotifyOnFail other && Equals(other);
        public bool Equals(ServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspended : IEquatable<ServiceSuspended>
    {
        private readonly string _value;

        private ServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspended Suspended { get; } = new ServiceSuspended("suspended");
        public static ServiceSuspended NotSuspended { get; } = new ServiceSuspended("not_suspended");

        public static bool operator ==(ServiceSuspended left, ServiceSuspended right) => left.Equals(right);
        public static bool operator !=(ServiceSuspended left, ServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspended other && Equals(other);
        public bool Equals(ServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspendersItem : IEquatable<ServiceSuspendersItem>
    {
        private readonly string _value;

        private ServiceSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspendersItem Admin { get; } = new ServiceSuspendersItem("admin");
        public static ServiceSuspendersItem Billing { get; } = new ServiceSuspendersItem("billing");
        public static ServiceSuspendersItem User { get; } = new ServiceSuspendersItem("user");
        public static ServiceSuspendersItem ParentService { get; } = new ServiceSuspendersItem("parent_service");
        public static ServiceSuspendersItem Unknown { get; } = new ServiceSuspendersItem("unknown");

        public static bool operator ==(ServiceSuspendersItem left, ServiceSuspendersItem right) => left.Equals(right);
        public static bool operator !=(ServiceSuspendersItem left, ServiceSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspendersItem other && Equals(other);
        public bool Equals(ServiceSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct StaticSiteDetailsCreatePullRequestPreviewsEnabled : IEquatable<StaticSiteDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSiteDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new StaticSiteDetailsCreatePullRequestPreviewsEnabled("yes");
        public static StaticSiteDetailsCreatePullRequestPreviewsEnabled No { get; } = new StaticSiteDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSiteDetailsCreatePullRequestPreviewsEnabled left, StaticSiteDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSiteDetailsCreatePullRequestPreviewsEnabled left, StaticSiteDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSiteDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSiteDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteDetailsOutputBuildPlan : IEquatable<StaticSiteDetailsOutputBuildPlan>
    {
        private readonly string _value;

        private StaticSiteDetailsOutputBuildPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteDetailsOutputBuildPlan Starter { get; } = new StaticSiteDetailsOutputBuildPlan("starter");
        public static StaticSiteDetailsOutputBuildPlan Performance { get; } = new StaticSiteDetailsOutputBuildPlan("performance");

        public static bool operator ==(StaticSiteDetailsOutputBuildPlan left, StaticSiteDetailsOutputBuildPlan right) => left.Equals(right);
        public static bool operator !=(StaticSiteDetailsOutputBuildPlan left, StaticSiteDetailsOutputBuildPlan right) => !left.Equals(right);

        public static explicit operator string(StaticSiteDetailsOutputBuildPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteDetailsOutputBuildPlan other && Equals(other);
        public bool Equals(StaticSiteDetailsOutputBuildPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct StaticSiteDetailsOutputPullRequestPreviewsEnabled : IEquatable<StaticSiteDetailsOutputPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSiteDetailsOutputPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteDetailsOutputPullRequestPreviewsEnabled Yes { get; } = new StaticSiteDetailsOutputPullRequestPreviewsEnabled("yes");
        public static StaticSiteDetailsOutputPullRequestPreviewsEnabled No { get; } = new StaticSiteDetailsOutputPullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSiteDetailsOutputPullRequestPreviewsEnabled left, StaticSiteDetailsOutputPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSiteDetailsOutputPullRequestPreviewsEnabled left, StaticSiteDetailsOutputPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSiteDetailsOutputPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteDetailsOutputPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSiteDetailsOutputPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Created { get; } = new Status("created");
        public static Status BuildInProgress { get; } = new Status("build_in_progress");
        public static Status UpdateInProgress { get; } = new Status("update_in_progress");
        public static Status Live { get; } = new Status("live");
        public static Status Deactivated { get; } = new Status("deactivated");
        public static Status BuildFailed { get; } = new Status("build_failed");
        public static Status UpdateFailed { get; } = new Status("update_failed");
        public static Status Canceled { get; } = new Status("canceled");
        public static Status PreDeployInProgress { get; } = new Status("pre_deploy_in_progress");
        public static Status PreDeployFailed { get; } = new Status("pre_deploy_failed");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Trigger : IEquatable<Trigger>
    {
        private readonly string _value;

        private Trigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Trigger Api { get; } = new Trigger("api");
        public static Trigger BlueprintSync { get; } = new Trigger("blueprint_sync");
        public static Trigger DeployHook { get; } = new Trigger("deploy_hook");
        public static Trigger DeployedByRender { get; } = new Trigger("deployed_by_render");
        public static Trigger Manual { get; } = new Trigger("manual");
        public static Trigger Other { get; } = new Trigger("other");
        public static Trigger NewCommit { get; } = new Trigger("new_commit");
        public static Trigger Rollback { get; } = new Trigger("rollback");
        public static Trigger ServiceResumed { get; } = new Trigger("service_resumed");
        public static Trigger ServiceUpdated { get; } = new Trigger("service_updated");

        public static bool operator ==(Trigger left, Trigger right) => left.Equals(right);
        public static bool operator !=(Trigger left, Trigger right) => !left.Equals(right);

        public static explicit operator string(Trigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Trigger other && Equals(other);
        public bool Equals(Trigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Type : IEquatable<Type>
    {
        private readonly string _value;

        private Type(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Type Redirect { get; } = new Type("redirect");
        public static Type Rewrite { get; } = new Type("rewrite");

        public static bool operator ==(Type left, Type right) => left.Equals(right);
        public static bool operator !=(Type left, Type right) => !left.Equals(right);

        public static explicit operator string(Type value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Type other && Equals(other);
        public bool Equals(Type other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsCreateEnv : IEquatable<WebServiceDetailsCreateEnv>
    {
        private readonly string _value;

        private WebServiceDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsCreateEnv Docker { get; } = new WebServiceDetailsCreateEnv("docker");
        public static WebServiceDetailsCreateEnv Elixir { get; } = new WebServiceDetailsCreateEnv("elixir");
        public static WebServiceDetailsCreateEnv Go { get; } = new WebServiceDetailsCreateEnv("go");
        public static WebServiceDetailsCreateEnv Node { get; } = new WebServiceDetailsCreateEnv("node");
        public static WebServiceDetailsCreateEnv Python { get; } = new WebServiceDetailsCreateEnv("python");
        public static WebServiceDetailsCreateEnv Ruby { get; } = new WebServiceDetailsCreateEnv("ruby");
        public static WebServiceDetailsCreateEnv Rust { get; } = new WebServiceDetailsCreateEnv("rust");
        public static WebServiceDetailsCreateEnv Image { get; } = new WebServiceDetailsCreateEnv("image");

        public static bool operator ==(WebServiceDetailsCreateEnv left, WebServiceDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsCreateEnv left, WebServiceDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsCreateEnv other && Equals(other);
        public bool Equals(WebServiceDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "starter"
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsCreatePlan : IEquatable<WebServiceDetailsCreatePlan>
    {
        private readonly string _value;

        private WebServiceDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsCreatePlan Starter { get; } = new WebServiceDetailsCreatePlan("starter");
        public static WebServiceDetailsCreatePlan Standard { get; } = new WebServiceDetailsCreatePlan("standard");
        public static WebServiceDetailsCreatePlan Pro { get; } = new WebServiceDetailsCreatePlan("pro");
        public static WebServiceDetailsCreatePlan ProPlus { get; } = new WebServiceDetailsCreatePlan("pro_plus");
        public static WebServiceDetailsCreatePlan ProMax { get; } = new WebServiceDetailsCreatePlan("pro_max");
        public static WebServiceDetailsCreatePlan ProUltra { get; } = new WebServiceDetailsCreatePlan("pro_ultra");

        public static bool operator ==(WebServiceDetailsCreatePlan left, WebServiceDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsCreatePlan left, WebServiceDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsCreatePlan other && Equals(other);
        public bool Equals(WebServiceDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsCreatePullRequestPreviewsEnabled : IEquatable<WebServiceDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServiceDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new WebServiceDetailsCreatePullRequestPreviewsEnabled("yes");
        public static WebServiceDetailsCreatePullRequestPreviewsEnabled No { get; } = new WebServiceDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServiceDetailsCreatePullRequestPreviewsEnabled left, WebServiceDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsCreatePullRequestPreviewsEnabled left, WebServiceDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServiceDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsCreateRegion : IEquatable<WebServiceDetailsCreateRegion>
    {
        private readonly string _value;

        private WebServiceDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsCreateRegion Frankfurt { get; } = new WebServiceDetailsCreateRegion("frankfurt");
        public static WebServiceDetailsCreateRegion Oregon { get; } = new WebServiceDetailsCreateRegion("oregon");
        public static WebServiceDetailsCreateRegion Ohio { get; } = new WebServiceDetailsCreateRegion("ohio");
        public static WebServiceDetailsCreateRegion Singapore { get; } = new WebServiceDetailsCreateRegion("singapore");
        public static WebServiceDetailsCreateRegion Virginia { get; } = new WebServiceDetailsCreateRegion("virginia");

        public static bool operator ==(WebServiceDetailsCreateRegion left, WebServiceDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsCreateRegion left, WebServiceDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsCreateRegion other && Equals(other);
        public bool Equals(WebServiceDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsCreateRuntime : IEquatable<WebServiceDetailsCreateRuntime>
    {
        private readonly string _value;

        private WebServiceDetailsCreateRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsCreateRuntime Docker { get; } = new WebServiceDetailsCreateRuntime("docker");
        public static WebServiceDetailsCreateRuntime Elixir { get; } = new WebServiceDetailsCreateRuntime("elixir");
        public static WebServiceDetailsCreateRuntime Go { get; } = new WebServiceDetailsCreateRuntime("go");
        public static WebServiceDetailsCreateRuntime Node { get; } = new WebServiceDetailsCreateRuntime("node");
        public static WebServiceDetailsCreateRuntime Python { get; } = new WebServiceDetailsCreateRuntime("python");
        public static WebServiceDetailsCreateRuntime Ruby { get; } = new WebServiceDetailsCreateRuntime("ruby");
        public static WebServiceDetailsCreateRuntime Rust { get; } = new WebServiceDetailsCreateRuntime("rust");
        public static WebServiceDetailsCreateRuntime Image { get; } = new WebServiceDetailsCreateRuntime("image");

        public static bool operator ==(WebServiceDetailsCreateRuntime left, WebServiceDetailsCreateRuntime right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsCreateRuntime left, WebServiceDetailsCreateRuntime right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsCreateRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsCreateRuntime other && Equals(other);
        public bool Equals(WebServiceDetailsCreateRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceDetailsOutputBuildPlan : IEquatable<WebServiceDetailsOutputBuildPlan>
    {
        private readonly string _value;

        private WebServiceDetailsOutputBuildPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputBuildPlan Starter { get; } = new WebServiceDetailsOutputBuildPlan("starter");
        public static WebServiceDetailsOutputBuildPlan Performance { get; } = new WebServiceDetailsOutputBuildPlan("performance");

        public static bool operator ==(WebServiceDetailsOutputBuildPlan left, WebServiceDetailsOutputBuildPlan right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputBuildPlan left, WebServiceDetailsOutputBuildPlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputBuildPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputBuildPlan other && Equals(other);
        public bool Equals(WebServiceDetailsOutputBuildPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated, runtime should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsOutputEnv : IEquatable<WebServiceDetailsOutputEnv>
    {
        private readonly string _value;

        private WebServiceDetailsOutputEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputEnv Docker { get; } = new WebServiceDetailsOutputEnv("docker");
        public static WebServiceDetailsOutputEnv Elixir { get; } = new WebServiceDetailsOutputEnv("elixir");
        public static WebServiceDetailsOutputEnv Go { get; } = new WebServiceDetailsOutputEnv("go");
        public static WebServiceDetailsOutputEnv Node { get; } = new WebServiceDetailsOutputEnv("node");
        public static WebServiceDetailsOutputEnv Python { get; } = new WebServiceDetailsOutputEnv("python");
        public static WebServiceDetailsOutputEnv Ruby { get; } = new WebServiceDetailsOutputEnv("ruby");
        public static WebServiceDetailsOutputEnv Rust { get; } = new WebServiceDetailsOutputEnv("rust");
        public static WebServiceDetailsOutputEnv Image { get; } = new WebServiceDetailsOutputEnv("image");

        public static bool operator ==(WebServiceDetailsOutputEnv left, WebServiceDetailsOutputEnv right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputEnv left, WebServiceDetailsOutputEnv right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputEnv other && Equals(other);
        public bool Equals(WebServiceDetailsOutputEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsOutputPlan : IEquatable<WebServiceDetailsOutputPlan>
    {
        private readonly string _value;

        private WebServiceDetailsOutputPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputPlan Starter { get; } = new WebServiceDetailsOutputPlan("starter");
        public static WebServiceDetailsOutputPlan StarterPlus { get; } = new WebServiceDetailsOutputPlan("starter_plus");
        public static WebServiceDetailsOutputPlan Standard { get; } = new WebServiceDetailsOutputPlan("standard");
        public static WebServiceDetailsOutputPlan StandardPlus { get; } = new WebServiceDetailsOutputPlan("standard_plus");
        public static WebServiceDetailsOutputPlan Pro { get; } = new WebServiceDetailsOutputPlan("pro");
        public static WebServiceDetailsOutputPlan ProPlus { get; } = new WebServiceDetailsOutputPlan("pro_plus");
        public static WebServiceDetailsOutputPlan ProMax { get; } = new WebServiceDetailsOutputPlan("pro_max");
        public static WebServiceDetailsOutputPlan ProUltra { get; } = new WebServiceDetailsOutputPlan("pro_ultra");
        public static WebServiceDetailsOutputPlan Free { get; } = new WebServiceDetailsOutputPlan("free");
        public static WebServiceDetailsOutputPlan Custom { get; } = new WebServiceDetailsOutputPlan("custom");

        public static bool operator ==(WebServiceDetailsOutputPlan left, WebServiceDetailsOutputPlan right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputPlan left, WebServiceDetailsOutputPlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputPlan other && Equals(other);
        public bool Equals(WebServiceDetailsOutputPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// This field has been deprecated. previews.generation should be used in its place.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsOutputPullRequestPreviewsEnabled : IEquatable<WebServiceDetailsOutputPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServiceDetailsOutputPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputPullRequestPreviewsEnabled Yes { get; } = new WebServiceDetailsOutputPullRequestPreviewsEnabled("yes");
        public static WebServiceDetailsOutputPullRequestPreviewsEnabled No { get; } = new WebServiceDetailsOutputPullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServiceDetailsOutputPullRequestPreviewsEnabled left, WebServiceDetailsOutputPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputPullRequestPreviewsEnabled left, WebServiceDetailsOutputPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServiceDetailsOutputPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsOutputRegion : IEquatable<WebServiceDetailsOutputRegion>
    {
        private readonly string _value;

        private WebServiceDetailsOutputRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputRegion Frankfurt { get; } = new WebServiceDetailsOutputRegion("frankfurt");
        public static WebServiceDetailsOutputRegion Oregon { get; } = new WebServiceDetailsOutputRegion("oregon");
        public static WebServiceDetailsOutputRegion Ohio { get; } = new WebServiceDetailsOutputRegion("ohio");
        public static WebServiceDetailsOutputRegion Singapore { get; } = new WebServiceDetailsOutputRegion("singapore");
        public static WebServiceDetailsOutputRegion Virginia { get; } = new WebServiceDetailsOutputRegion("virginia");

        public static bool operator ==(WebServiceDetailsOutputRegion left, WebServiceDetailsOutputRegion right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputRegion left, WebServiceDetailsOutputRegion right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputRegion other && Equals(other);
        public bool Equals(WebServiceDetailsOutputRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Runtime
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsOutputRuntime : IEquatable<WebServiceDetailsOutputRuntime>
    {
        private readonly string _value;

        private WebServiceDetailsOutputRuntime(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsOutputRuntime Docker { get; } = new WebServiceDetailsOutputRuntime("docker");
        public static WebServiceDetailsOutputRuntime Elixir { get; } = new WebServiceDetailsOutputRuntime("elixir");
        public static WebServiceDetailsOutputRuntime Go { get; } = new WebServiceDetailsOutputRuntime("go");
        public static WebServiceDetailsOutputRuntime Node { get; } = new WebServiceDetailsOutputRuntime("node");
        public static WebServiceDetailsOutputRuntime Python { get; } = new WebServiceDetailsOutputRuntime("python");
        public static WebServiceDetailsOutputRuntime Ruby { get; } = new WebServiceDetailsOutputRuntime("ruby");
        public static WebServiceDetailsOutputRuntime Rust { get; } = new WebServiceDetailsOutputRuntime("rust");
        public static WebServiceDetailsOutputRuntime Image { get; } = new WebServiceDetailsOutputRuntime("image");

        public static bool operator ==(WebServiceDetailsOutputRuntime left, WebServiceDetailsOutputRuntime right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsOutputRuntime left, WebServiceDetailsOutputRuntime right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsOutputRuntime value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsOutputRuntime other && Equals(other);
        public bool Equals(WebServiceDetailsOutputRuntime other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
