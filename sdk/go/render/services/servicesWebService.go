// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A web service
type ServicesWebService struct {
	pulumi.CustomResourceState

	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrOutput `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrOutput    `pulumi:"branch"`
	CreatedAt pulumi.StringPtrOutput    `pulumi:"createdAt"`
	EnvVars   EnvVarKeyValueArrayOutput `pulumi:"envVars"`
	Name      pulumi.StringPtrOutput    `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrOutput `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId pulumi.StringPtrOutput `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringPtrOutput            `pulumi:"repo"`
	SecretFiles    SecretFileArrayOutput             `pulumi:"secretFiles"`
	ServiceDetails WebServiceServiceDetailsPtrOutput `pulumi:"serviceDetails"`
	Slug           pulumi.StringPtrOutput            `pulumi:"slug"`
	Suspended      ServiceSuspendedPtrOutput         `pulumi:"suspended"`
	Suspenders     pulumi.StringArrayOutput          `pulumi:"suspenders"`
	Type           pulumi.StringPtrOutput            `pulumi:"type"`
	UpdatedAt      pulumi.StringPtrOutput            `pulumi:"updatedAt"`
}

// NewServicesWebService registers a new resource with the given unique name, arguments, and options.
func NewServicesWebService(ctx *pulumi.Context,
	name string, args *ServicesWebServiceArgs, opts ...pulumi.ResourceOption) (*ServicesWebService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	if args.AutoDeploy == nil {
		args.AutoDeploy = ServiceAutoDeploy("no")
	}
	if args.ServiceDetails != nil {
		args.ServiceDetails = args.ServiceDetails.ToWebServiceServiceDetailsPtrOutput().ApplyT(func(v *WebServiceServiceDetails) *WebServiceServiceDetails { return v.Defaults() }).(WebServiceServiceDetailsPtrOutput)
	}
	if args.Type == nil {
		args.Type = pulumi.StringPtr("web_service")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicesWebService
	err := ctx.RegisterResource("render:services:ServicesWebService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicesWebService gets an existing ServicesWebService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicesWebService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicesWebServiceState, opts ...pulumi.ResourceOption) (*ServicesWebService, error) {
	var resource ServicesWebService
	err := ctx.ReadResource("render:services:ServicesWebService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicesWebService resources.
type servicesWebServiceState struct {
}

type ServicesWebServiceState struct {
}

func (ServicesWebServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicesWebServiceState)(nil)).Elem()
}

type servicesWebServiceArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string          `pulumi:"branch"`
	CreatedAt *string          `pulumi:"createdAt"`
	EnvVars   []EnvVarKeyValue `pulumi:"envVars"`
	Name      string           `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                    `pulumi:"repo"`
	SecretFiles    []SecretFile              `pulumi:"secretFiles"`
	ServiceDetails *WebServiceServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                   `pulumi:"slug"`
	Suspended      *ServiceSuspended         `pulumi:"suspended"`
	Suspenders     []string                  `pulumi:"suspenders"`
	Type           *string                   `pulumi:"type"`
	UpdatedAt      *string                   `pulumi:"updatedAt"`
}

// The set of arguments for constructing a ServicesWebService resource.
type ServicesWebServiceArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrInput
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	EnvVars   EnvVarKeyValueArrayInput
	Name      pulumi.StringInput
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrInput
	// The id of the owner (user/team).
	OwnerId pulumi.StringInput
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringInput
	SecretFiles    SecretFileArrayInput
	ServiceDetails WebServiceServiceDetailsPtrInput
	Slug           pulumi.StringPtrInput
	Suspended      ServiceSuspendedPtrInput
	Suspenders     pulumi.StringArrayInput
	Type           pulumi.StringPtrInput
	UpdatedAt      pulumi.StringPtrInput
}

func (ServicesWebServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicesWebServiceArgs)(nil)).Elem()
}

type ServicesWebServiceInput interface {
	pulumi.Input

	ToServicesWebServiceOutput() ServicesWebServiceOutput
	ToServicesWebServiceOutputWithContext(ctx context.Context) ServicesWebServiceOutput
}

func (*ServicesWebService) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicesWebService)(nil)).Elem()
}

func (i *ServicesWebService) ToServicesWebServiceOutput() ServicesWebServiceOutput {
	return i.ToServicesWebServiceOutputWithContext(context.Background())
}

func (i *ServicesWebService) ToServicesWebServiceOutputWithContext(ctx context.Context) ServicesWebServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicesWebServiceOutput)
}

type ServicesWebServiceOutput struct{ *pulumi.OutputState }

func (ServicesWebServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicesWebService)(nil)).Elem()
}

func (o ServicesWebServiceOutput) ToServicesWebServiceOutput() ServicesWebServiceOutput {
	return o
}

func (o ServicesWebServiceOutput) ToServicesWebServiceOutputWithContext(ctx context.Context) ServicesWebServiceOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o ServicesWebServiceOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) ServiceAutoDeployPtrOutput { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o ServicesWebServiceOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o ServicesWebServiceOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o ServicesWebServiceOutput) EnvVars() EnvVarKeyValueArrayOutput {
	return o.ApplyT(func(v *ServicesWebService) EnvVarKeyValueArrayOutput { return v.EnvVars }).(EnvVarKeyValueArrayOutput)
}

func (o ServicesWebServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The notification setting for this service upon deployment failure.
func (o ServicesWebServiceOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) ServiceNotifyOnFailPtrOutput { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o ServicesWebServiceOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o ServicesWebServiceOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.Repo }).(pulumi.StringPtrOutput)
}

func (o ServicesWebServiceOutput) SecretFiles() SecretFileArrayOutput {
	return o.ApplyT(func(v *ServicesWebService) SecretFileArrayOutput { return v.SecretFiles }).(SecretFileArrayOutput)
}

func (o ServicesWebServiceOutput) ServiceDetails() WebServiceServiceDetailsPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) WebServiceServiceDetailsPtrOutput { return v.ServiceDetails }).(WebServiceServiceDetailsPtrOutput)
}

func (o ServicesWebServiceOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o ServicesWebServiceOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) ServiceSuspendedPtrOutput { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o ServicesWebServiceOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringArrayOutput { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o ServicesWebServiceOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ServicesWebServiceOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesWebService) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicesWebServiceInput)(nil)).Elem(), &ServicesWebService{})
	pulumi.RegisterOutputType(ServicesWebServiceOutput{})
}
