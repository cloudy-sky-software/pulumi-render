// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as utilities from "../utilities";

export namespace owners {
}

export namespace registrycredentials {
}

export namespace services {
    export interface AutoscalingConfigArgs {
        criteria: pulumi.Input<inputs.services.AutoscalingCriteriaArgs>;
        enabled: pulumi.Input<boolean>;
        /**
         * The maximum number of instances for the service
         */
        max: pulumi.Input<number>;
        /**
         * The minimum number of instances for the service
         */
        min: pulumi.Input<number>;
    }
    /**
     * autoscalingConfigArgsProvideDefaults sets the appropriate defaults for AutoscalingConfigArgs
     */
    export function autoscalingConfigArgsProvideDefaults(val: AutoscalingConfigArgs): AutoscalingConfigArgs {
        return {
            ...val,
            criteria: pulumi.output(val.criteria).apply(inputs.services.autoscalingCriteriaArgsProvideDefaults),
            enabled: (val.enabled) ?? false,
        };
    }

    export interface AutoscalingCriteriaArgs {
        cpu: pulumi.Input<inputs.services.AutoscalingCriteriaPercentageArgs>;
        memory: pulumi.Input<inputs.services.AutoscalingCriteriaPercentageArgs>;
    }
    /**
     * autoscalingCriteriaArgsProvideDefaults sets the appropriate defaults for AutoscalingCriteriaArgs
     */
    export function autoscalingCriteriaArgsProvideDefaults(val: AutoscalingCriteriaArgs): AutoscalingCriteriaArgs {
        return {
            ...val,
            cpu: pulumi.output(val.cpu).apply(inputs.services.autoscalingCriteriaPercentageArgsProvideDefaults),
            memory: pulumi.output(val.memory).apply(inputs.services.autoscalingCriteriaPercentageArgsProvideDefaults),
        };
    }

    export interface AutoscalingCriteriaPercentageArgs {
        enabled: pulumi.Input<boolean>;
        /**
         * Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
         */
        percentage: pulumi.Input<number>;
    }
    /**
     * autoscalingCriteriaPercentageArgsProvideDefaults sets the appropriate defaults for AutoscalingCriteriaPercentageArgs
     */
    export function autoscalingCriteriaPercentageArgsProvideDefaults(val: AutoscalingCriteriaPercentageArgs): AutoscalingCriteriaPercentageArgs {
        return {
            ...val,
            enabled: (val.enabled) ?? false,
        };
    }

    export interface BackgroundWorkerDetailsArgs {
        autoscaling?: pulumi.Input<inputs.services.AutoscalingConfigArgs>;
        buildPlan: pulumi.Input<string>;
        disk?: pulumi.Input<inputs.services.DiskArgs>;
        /**
         * Environment (runtime)
         */
        env: pulumi.Input<enums.services.BackgroundWorkerDetailsEnv>;
        envSpecificDetails: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: pulumi.Input<number>;
        parentServer?: pulumi.Input<inputs.services.ResourceArgs>;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: pulumi.Input<enums.services.BackgroundWorkerDetailsPlan>;
        pullRequestPreviewsEnabled: pulumi.Input<enums.services.BackgroundWorkerDetailsPullRequestPreviewsEnabled>;
        region: pulumi.Input<enums.services.BackgroundWorkerDetailsRegion>;
    }
    /**
     * backgroundWorkerDetailsArgsProvideDefaults sets the appropriate defaults for BackgroundWorkerDetailsArgs
     */
    export function backgroundWorkerDetailsArgsProvideDefaults(val: BackgroundWorkerDetailsArgs): BackgroundWorkerDetailsArgs {
        return {
            ...val,
            autoscaling: (val.autoscaling ? pulumi.output(val.autoscaling).apply(inputs.services.autoscalingConfigArgsProvideDefaults) : undefined),
        };
    }

    export interface BuildFilterArgs {
        ignoredPaths: pulumi.Input<pulumi.Input<string>[]>;
        paths: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface CronJobDetailsArgs {
        buildPlan: pulumi.Input<string>;
        /**
         * Environment (runtime)
         */
        env: pulumi.Input<enums.services.CronJobDetailsEnv>;
        envSpecificDetails: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        lastSuccessfulRunAt?: pulumi.Input<string>;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: pulumi.Input<enums.services.CronJobDetailsPlan>;
        region: pulumi.Input<enums.services.CronJobDetailsRegion>;
        schedule: pulumi.Input<string>;
    }

    export interface DiskArgs {
        mountPath: pulumi.Input<string>;
        name: pulumi.Input<string>;
        sizeGB: pulumi.Input<number>;
    }

    export interface DockerDetailsArgs {
        dockerCommand: pulumi.Input<string>;
        dockerContext: pulumi.Input<string>;
        dockerfilePath: pulumi.Input<string>;
        preDeployCommand?: pulumi.Input<string>;
        registryCredential?: pulumi.Input<inputs.services.RegistryCredentialArgs>;
    }

    export interface EnvVarKeyGenerateValueArgs {
        generateValue: pulumi.Input<boolean>;
        key: pulumi.Input<string>;
    }

    export interface EnvVarKeyValueArgs {
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ImageArgs {
        /**
         * Path to the image used for this server (e.g docker.io/library/nginx:latest).
         */
        imagePath: pulumi.Input<string>;
        /**
         * The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
         */
        ownerId: pulumi.Input<string>;
        /**
         * Optional reference to the registry credential passed to the image repository to retrieve this image.
         */
        registryCredentialId?: pulumi.Input<string>;
    }

    export interface NativeEnvironmentDetailsArgs {
        buildCommand: pulumi.Input<string>;
        preDeployCommand?: pulumi.Input<string>;
        startCommand: pulumi.Input<string>;
    }

    export interface PrivateServiceDetailsArgs {
        autoscaling?: pulumi.Input<inputs.services.AutoscalingConfigArgs>;
        buildPlan: pulumi.Input<string>;
        disk?: pulumi.Input<inputs.services.DiskArgs>;
        /**
         * Environment (runtime)
         */
        env: pulumi.Input<enums.services.PrivateServiceDetailsEnv>;
        envSpecificDetails: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: pulumi.Input<number>;
        openPorts: pulumi.Input<pulumi.Input<inputs.services.ServerPortArgs>[]>;
        parentServer?: pulumi.Input<inputs.services.ResourceArgs>;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: pulumi.Input<enums.services.PrivateServiceDetailsPlan>;
        pullRequestPreviewsEnabled: pulumi.Input<enums.services.PrivateServiceDetailsPullRequestPreviewsEnabled>;
        region: pulumi.Input<enums.services.PrivateServiceDetailsRegion>;
        url: pulumi.Input<string>;
    }
    /**
     * privateServiceDetailsArgsProvideDefaults sets the appropriate defaults for PrivateServiceDetailsArgs
     */
    export function privateServiceDetailsArgsProvideDefaults(val: PrivateServiceDetailsArgs): PrivateServiceDetailsArgs {
        return {
            ...val,
            autoscaling: (val.autoscaling ? pulumi.output(val.autoscaling).apply(inputs.services.autoscalingConfigArgsProvideDefaults) : undefined),
        };
    }

    export interface RegistryCredentialArgs {
        /**
         * Descriptive name for this credential
         */
        name: pulumi.Input<string>;
        /**
         * The registry to use this credential with
         */
        registry: pulumi.Input<enums.services.RegistryCredentialRegistry>;
        /**
         * The username associated with the credential
         */
        username: pulumi.Input<string>;
    }

    export interface ResourceArgs {
        name: pulumi.Input<string>;
    }

    export interface SecretFileArgs {
        name: pulumi.Input<string>;
    }

    export interface ServerPortArgs {
        port: pulumi.Input<number>;
        protocol: pulumi.Input<enums.services.ServerPortProtocol>;
    }

    export interface StaticSiteDetailsArgs {
        buildCommand: pulumi.Input<string>;
        buildPlan: pulumi.Input<string>;
        parentServer?: pulumi.Input<inputs.services.ResourceArgs>;
        publishPath: pulumi.Input<string>;
        pullRequestPreviewsEnabled: pulumi.Input<enums.services.StaticSiteDetailsPullRequestPreviewsEnabled>;
        url: pulumi.Input<string>;
    }

    export interface WebServiceDetailsArgs {
        autoscaling?: pulumi.Input<inputs.services.AutoscalingConfigArgs>;
        buildPlan: pulumi.Input<string>;
        disk?: pulumi.Input<inputs.services.DiskArgs>;
        /**
         * Environment (runtime)
         */
        env: pulumi.Input<enums.services.WebServiceDetailsEnv>;
        envSpecificDetails: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        healthCheckPath: pulumi.Input<string>;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: pulumi.Input<number>;
        openPorts: pulumi.Input<pulumi.Input<inputs.services.ServerPortArgs>[]>;
        parentServer?: pulumi.Input<inputs.services.ResourceArgs>;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: pulumi.Input<enums.services.WebServiceDetailsPlan>;
        pullRequestPreviewsEnabled: pulumi.Input<enums.services.WebServiceDetailsPullRequestPreviewsEnabled>;
        region: pulumi.Input<enums.services.WebServiceDetailsRegion>;
        url: pulumi.Input<string>;
    }
    /**
     * webServiceDetailsArgsProvideDefaults sets the appropriate defaults for WebServiceDetailsArgs
     */
    export function webServiceDetailsArgsProvideDefaults(val: WebServiceDetailsArgs): WebServiceDetailsArgs {
        return {
            ...val,
            autoscaling: (val.autoscaling ? pulumi.output(val.autoscaling).apply(inputs.services.autoscalingConfigArgsProvideDefaults) : undefined),
        };
    }
}
