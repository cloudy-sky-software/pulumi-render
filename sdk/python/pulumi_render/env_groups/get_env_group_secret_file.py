# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEnvGroupSecretFileResult',
    'AwaitableGetEnvGroupSecretFileResult',
    'get_env_group_secret_file',
    'get_env_group_secret_file_output',
]

@pulumi.output_type
class GetEnvGroupSecretFileResult:
    def __init__(__self__, items=None):
        if items and not isinstance(items, dict):
            raise TypeError("Expected argument 'items' to be a dict")
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> 'outputs.SecretFile':
        return pulumi.get(self, "items")


class AwaitableGetEnvGroupSecretFileResult(GetEnvGroupSecretFileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvGroupSecretFileResult(
            items=self.items)


def get_env_group_secret_file(env_group_id: Optional[str] = None,
                              secret_file_name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvGroupSecretFileResult:
    """
    Use this data source to access information about an existing resource.

    :param str env_group_id: Filter for resources that belong to an environment group
    :param str secret_file_name: The name of the secret file
    """
    __args__ = dict()
    __args__['envGroupId'] = env_group_id
    __args__['secretFileName'] = secret_file_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('render:env-groups:getEnvGroupSecretFile', __args__, opts=opts, typ=GetEnvGroupSecretFileResult).value

    return AwaitableGetEnvGroupSecretFileResult(
        items=pulumi.get(__ret__, 'items'))


@_utilities.lift_output_func(get_env_group_secret_file)
def get_env_group_secret_file_output(env_group_id: Optional[pulumi.Input[str]] = None,
                                     secret_file_name: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvGroupSecretFileResult]:
    """
    Use this data source to access information about an existing resource.

    :param str env_group_id: Filter for resources that belong to an environment group
    :param str secret_file_name: The name of the secret file
    """
    ...
