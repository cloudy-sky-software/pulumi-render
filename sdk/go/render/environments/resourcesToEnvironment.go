// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package environments

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResourcesToEnvironment struct {
	pulumi.CustomResourceState

	DatabasesIds pulumi.StringArrayOutput `pulumi:"databasesIds"`
	EnvGroupIds  pulumi.StringArrayOutput `pulumi:"envGroupIds"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	ProjectId    pulumi.StringOutput      `pulumi:"projectId"`
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus ProtectedStatusOutput    `pulumi:"protectedStatus"`
	RedisIds        pulumi.StringArrayOutput `pulumi:"redisIds"`
	ResourceIds     pulumi.StringArrayOutput `pulumi:"resourceIds"`
	ServiceIds      pulumi.StringArrayOutput `pulumi:"serviceIds"`
}

// NewResourcesToEnvironment registers a new resource with the given unique name, arguments, and options.
func NewResourcesToEnvironment(ctx *pulumi.Context,
	name string, args *ResourcesToEnvironmentArgs, opts ...pulumi.ResourceOption) (*ResourcesToEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceIds == nil {
		return nil, errors.New("invalid value for required argument 'ResourceIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourcesToEnvironment
	err := ctx.RegisterResource("render:environments:ResourcesToEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcesToEnvironment gets an existing ResourcesToEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcesToEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcesToEnvironmentState, opts ...pulumi.ResourceOption) (*ResourcesToEnvironment, error) {
	var resource ResourcesToEnvironment
	err := ctx.ReadResource("render:environments:ResourcesToEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcesToEnvironment resources.
type resourcesToEnvironmentState struct {
}

type ResourcesToEnvironmentState struct {
}

func (ResourcesToEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcesToEnvironmentState)(nil)).Elem()
}

type resourcesToEnvironmentArgs struct {
	EnvironmentId *string  `pulumi:"environmentId"`
	ResourceIds   []string `pulumi:"resourceIds"`
}

// The set of arguments for constructing a ResourcesToEnvironment resource.
type ResourcesToEnvironmentArgs struct {
	EnvironmentId pulumi.StringPtrInput
	ResourceIds   pulumi.StringArrayInput
}

func (ResourcesToEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcesToEnvironmentArgs)(nil)).Elem()
}

type ResourcesToEnvironmentInput interface {
	pulumi.Input

	ToResourcesToEnvironmentOutput() ResourcesToEnvironmentOutput
	ToResourcesToEnvironmentOutputWithContext(ctx context.Context) ResourcesToEnvironmentOutput
}

func (*ResourcesToEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcesToEnvironment)(nil)).Elem()
}

func (i *ResourcesToEnvironment) ToResourcesToEnvironmentOutput() ResourcesToEnvironmentOutput {
	return i.ToResourcesToEnvironmentOutputWithContext(context.Background())
}

func (i *ResourcesToEnvironment) ToResourcesToEnvironmentOutputWithContext(ctx context.Context) ResourcesToEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcesToEnvironmentOutput)
}

type ResourcesToEnvironmentOutput struct{ *pulumi.OutputState }

func (ResourcesToEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcesToEnvironment)(nil)).Elem()
}

func (o ResourcesToEnvironmentOutput) ToResourcesToEnvironmentOutput() ResourcesToEnvironmentOutput {
	return o
}

func (o ResourcesToEnvironmentOutput) ToResourcesToEnvironmentOutputWithContext(ctx context.Context) ResourcesToEnvironmentOutput {
	return o
}

func (o ResourcesToEnvironmentOutput) DatabasesIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringArrayOutput { return v.DatabasesIds }).(pulumi.StringArrayOutput)
}

func (o ResourcesToEnvironmentOutput) EnvGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringArrayOutput { return v.EnvGroupIds }).(pulumi.StringArrayOutput)
}

func (o ResourcesToEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ResourcesToEnvironmentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
func (o ResourcesToEnvironmentOutput) ProtectedStatus() ProtectedStatusOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) ProtectedStatusOutput { return v.ProtectedStatus }).(ProtectedStatusOutput)
}

func (o ResourcesToEnvironmentOutput) RedisIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringArrayOutput { return v.RedisIds }).(pulumi.StringArrayOutput)
}

func (o ResourcesToEnvironmentOutput) ResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringArrayOutput { return v.ResourceIds }).(pulumi.StringArrayOutput)
}

func (o ResourcesToEnvironmentOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourcesToEnvironment) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcesToEnvironmentInput)(nil)).Elem(), &ResourcesToEnvironment{})
	pulumi.RegisterOutputType(ResourcesToEnvironmentOutput{})
}
