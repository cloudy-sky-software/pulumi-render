// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Projects
{
    public static class ListProjects
    {
        public static Task<ListProjectsResult> InvokeAsync(ListProjectsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListProjectsResult>("render:projects:listProjects", args ?? new ListProjectsArgs(), options.WithDefaults());

        public static Output<ListProjectsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListProjectsResult>("render:projects:listProjects", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListProjectsArgs : global::Pulumi.InvokeArgs
    {
        public ListProjectsArgs()
        {
        }
        public static new ListProjectsArgs Empty => new ListProjectsArgs();
    }


    [OutputType]
    public sealed class ListProjectsResult
    {
        public readonly ImmutableArray<Outputs.ProjectWithCursor> Items;

        [OutputConstructor]
        private ListProjectsResult(ImmutableArray<Outputs.ProjectWithCursor> items)
        {
            Items = items;
        }
    }
}
