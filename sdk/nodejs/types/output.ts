// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

import * as utilities from "../utilities";

export namespace owners {
    export interface ListOwnersItemProperties {
        cursor?: string;
        owner?: outputs.owners.Owner;
    }

    export interface Owner {
        email: string;
        id: string;
        name: string;
        type: enums.owners.OwnerType;
    }

}

export namespace registrycredentials {
    export interface RegistryCredential {
        /**
         * Unique identifier for this credential
         */
        id: string;
        /**
         * Descriptive name for this credential
         */
        name: string;
        /**
         * The registry to use this credential with
         */
        registry: enums.registrycredentials.RegistryCredentialRegistry;
        /**
         * The username associated with the credential
         */
        username: string;
    }

}

export namespace services {
    export interface AutoscalingConfig {
        criteria: outputs.services.AutoscalingCriteria;
        enabled: boolean;
        /**
         * The maximum number of instances for the service
         */
        max: number;
        /**
         * The minimum number of instances for the service
         */
        min: number;
    }
    /**
     * autoscalingConfigProvideDefaults sets the appropriate defaults for AutoscalingConfig
     */
    export function autoscalingConfigProvideDefaults(val: AutoscalingConfig): AutoscalingConfig {
        return {
            ...val,
            criteria: outputs.services.autoscalingCriteriaProvideDefaults(val.criteria),
            enabled: (val.enabled) ?? false,
        };
    }

    export interface AutoscalingCriteria {
        cpu: outputs.services.AutoscalingCriteriaPercentage;
        memory: outputs.services.AutoscalingCriteriaPercentage;
    }
    /**
     * autoscalingCriteriaProvideDefaults sets the appropriate defaults for AutoscalingCriteria
     */
    export function autoscalingCriteriaProvideDefaults(val: AutoscalingCriteria): AutoscalingCriteria {
        return {
            ...val,
            cpu: outputs.services.autoscalingCriteriaPercentageProvideDefaults(val.cpu),
            memory: outputs.services.autoscalingCriteriaPercentageProvideDefaults(val.memory),
        };
    }

    export interface AutoscalingCriteriaPercentage {
        enabled: boolean;
        /**
         * Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
         */
        percentage: number;
    }
    /**
     * autoscalingCriteriaPercentageProvideDefaults sets the appropriate defaults for AutoscalingCriteriaPercentage
     */
    export function autoscalingCriteriaPercentageProvideDefaults(val: AutoscalingCriteriaPercentage): AutoscalingCriteriaPercentage {
        return {
            ...val,
            enabled: (val.enabled) ?? false,
        };
    }

    export interface BackgroundWorkerDetailsOutput {
        autoscaling?: outputs.services.AutoscalingConfig;
        buildPlan: string;
        disk?: outputs.services.Disk;
        /**
         * Environment (runtime)
         */
        env: enums.services.BackgroundWorkerDetailsOutputEnv;
        envSpecificDetails: outputs.services.DockerDetails | outputs.services.NativeEnvironmentDetails;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: number;
        parentServer?: outputs.services.Resource;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: enums.services.BackgroundWorkerDetailsOutputPlan;
        pullRequestPreviewsEnabled: enums.services.BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled;
        region: enums.services.BackgroundWorkerDetailsOutputRegion;
    }
    /**
     * backgroundWorkerDetailsOutputProvideDefaults sets the appropriate defaults for BackgroundWorkerDetailsOutput
     */
    export function backgroundWorkerDetailsOutputProvideDefaults(val: BackgroundWorkerDetailsOutput): BackgroundWorkerDetailsOutput {
        return {
            ...val,
            autoscaling: (val.autoscaling ? outputs.services.autoscalingConfigProvideDefaults(val.autoscaling) : undefined),
        };
    }

    export interface BackgroundWorkerOutput {
        autoDeploy: enums.services.ServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.ServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.BackgroundWorkerDetailsOutput;
        slug: string;
        suspended: enums.services.ServiceSuspended;
        suspenders: enums.services.ServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * backgroundWorkerOutputProvideDefaults sets the appropriate defaults for BackgroundWorkerOutput
     */
    export function backgroundWorkerOutputProvideDefaults(val: BackgroundWorkerOutput): BackgroundWorkerOutput {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.backgroundWorkerDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "background_worker",
        };
    }

    export interface BuildFilter {
        ignoredPaths: string[];
        paths: string[];
    }

    export interface CommitProperties {
        createdAt?: string;
        id?: string;
        message?: string;
    }

    export interface CronJobDetailsOutput {
        buildPlan: string;
        /**
         * Environment (runtime)
         */
        env: enums.services.CronJobDetailsOutputEnv;
        envSpecificDetails: outputs.services.DockerDetails | outputs.services.NativeEnvironmentDetails;
        lastSuccessfulRunAt?: string;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: enums.services.CronJobDetailsOutputPlan;
        region: enums.services.CronJobDetailsOutputRegion;
        schedule: string;
    }

    export interface CronJobOutput {
        autoDeploy: enums.services.ServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.ServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.CronJobDetailsOutput;
        slug: string;
        suspended: enums.services.ServiceSuspended;
        suspenders: enums.services.ServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * cronJobOutputProvideDefaults sets the appropriate defaults for CronJobOutput
     */
    export function cronJobOutputProvideDefaults(val: CronJobOutput): CronJobOutput {
        return {
            ...val,
            type: (val.type) ?? "cron_job",
        };
    }

    export interface CustomDomain {
        createdAt: string;
        domainType: enums.services.CustomDomainDomainType;
        id: string;
        name: string;
        publicSuffix: string;
        redirectForName: string;
        server?: outputs.services.CustomDomainServerProperties;
        verificationStatus: enums.services.CustomDomainVerificationStatus;
    }

    export interface CustomDomainServerProperties {
        id?: string;
        name?: string;
    }

    export interface Deploy {
        commit?: outputs.services.DeployCommitProperties;
        createdAt?: string;
        finishedAt?: string;
        id: string;
        /**
         * Image information used when creating the deploy. Not present for Git-backed deploys
         */
        image?: outputs.services.DeployImageProperties;
        status?: enums.services.DeployStatus;
        trigger?: enums.services.DeployTrigger;
        updatedAt?: string;
    }

    export interface DeployCommitProperties {
        createdAt?: string;
        id?: string;
        message?: string;
    }

    /**
     * Image information used when creating the deploy. Not present for Git-backed deploys
     */
    export interface DeployImageProperties {
        /**
         * Image reference used when creating the deploy
         */
        ref?: string;
        /**
         * Name of credential used to pull the image, if provided
         */
        registryCredential?: string;
        /**
         * SHA that the image reference was resolved to when creating the deploy
         */
        sha?: string;
    }

    export interface Disk {
        id: string;
        mountPath: string;
        name: string;
        sizeGB: number;
    }

    export interface DockerDetails {
        dockerCommand: string;
        dockerContext: string;
        dockerfilePath: string;
        preDeployCommand?: string;
        registryCredential?: outputs.services.RegistryCredential;
    }

    export interface EnvVar {
        key: string;
        value: string;
    }

    export interface EnvVarKeyGenerateValue {
        generateValue: boolean;
        key: string;
    }

    export interface EnvVarKeyValue {
        key: string;
        value: string;
    }

    export interface EnvVarWithCursor {
        cursor: string;
        envVar: outputs.services.EnvVar;
    }

    export interface GetBackgroundWorker {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.BackgroundWorkerDetailsOutput;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * getBackgroundWorkerProvideDefaults sets the appropriate defaults for GetBackgroundWorker
     */
    export function getBackgroundWorkerProvideDefaults(val: GetBackgroundWorker): GetBackgroundWorker {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.backgroundWorkerDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "background_worker",
        };
    }

    export interface GetCronJob {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.CronJobDetailsOutput;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * getCronJobProvideDefaults sets the appropriate defaults for GetCronJob
     */
    export function getCronJobProvideDefaults(val: GetCronJob): GetCronJob {
        return {
            ...val,
            type: (val.type) ?? "cron_job",
        };
    }

    export interface GetPrivateService {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.PrivateServiceDetailsOutput;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * getPrivateServiceProvideDefaults sets the appropriate defaults for GetPrivateService
     */
    export function getPrivateServiceProvideDefaults(val: GetPrivateService): GetPrivateService {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.privateServiceDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "private_service",
        };
    }

    export interface GetStaticSite {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.StaticSiteDetailsOutput;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * getStaticSiteProvideDefaults sets the appropriate defaults for GetStaticSite
     */
    export function getStaticSiteProvideDefaults(val: GetStaticSite): GetStaticSite {
        return {
            ...val,
            type: (val.type) ?? "static_site",
        };
    }

    export interface GetWebService {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.WebServiceDetailsOutput;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * getWebServiceProvideDefaults sets the appropriate defaults for GetWebService
     */
    export function getWebServiceProvideDefaults(val: GetWebService): GetWebService {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.webServiceDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "web_service",
        };
    }

    export interface Header {
        id: string;
        name: string;
        path: string;
        value: string;
    }

    export interface Image {
        /**
         * Path to the image used for this server (e.g docker.io/library/nginx:latest).
         */
        imagePath: string;
        /**
         * The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
         */
        ownerId: string;
        /**
         * Optional reference to the registry credential passed to the image repository to retrieve this image.
         */
        registryCredentialId?: string;
    }

    /**
     * Image information used when creating the deploy. Not present for Git-backed deploys
     */
    export interface ImageProperties {
        /**
         * Image reference used when creating the deploy
         */
        ref?: string;
        /**
         * Name of credential used to pull the image, if provided
         */
        registryCredential?: string;
        /**
         * SHA that the image reference was resolved to when creating the deploy
         */
        sha?: string;
    }

    export interface Job {
        createdAt: string;
        finishedAt?: string;
        id: string;
        planId: string;
        serviceId: string;
        startCommand: string;
        startedAt?: string;
        status?: string;
    }

    export interface ListCustomDomainsItemProperties {
        cursor?: string;
        customDomain?: outputs.services.CustomDomain;
    }

    export interface ListDeploysItemProperties {
        cursor?: string;
        deploy?: outputs.services.Deploy;
    }

    export interface ListJobItemProperties {
        cursor?: string;
        job?: outputs.services.Job;
    }

    export interface ListRetrieveHeadersItemProperties {
        cursor?: string;
        headers?: outputs.services.Header;
    }

    export interface ListRetrieveRoutesItemProperties {
        cursor?: string;
        routes?: outputs.services.Route;
    }

    export interface ListServicesResponse {
        cursor?: string;
        service?: outputs.services.BackgroundWorkerOutput | outputs.services.CronJobOutput | outputs.services.PrivateServiceOutput | outputs.services.StaticSiteOutput | outputs.services.WebServiceOutput;
    }

    export interface NativeEnvironmentDetails {
        buildCommand: string;
        preDeployCommand?: string;
        startCommand: string;
    }

    export interface PrivateServiceDetailsOutput {
        autoscaling?: outputs.services.AutoscalingConfig;
        buildPlan: string;
        disk?: outputs.services.Disk;
        /**
         * Environment (runtime)
         */
        env: enums.services.PrivateServiceDetailsOutputEnv;
        envSpecificDetails: outputs.services.DockerDetails | outputs.services.NativeEnvironmentDetails;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: number;
        openPorts: outputs.services.ServerPort[];
        parentServer?: outputs.services.Resource;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: enums.services.PrivateServiceDetailsOutputPlan;
        pullRequestPreviewsEnabled: enums.services.PrivateServiceDetailsOutputPullRequestPreviewsEnabled;
        region: enums.services.PrivateServiceDetailsOutputRegion;
        url: string;
    }
    /**
     * privateServiceDetailsOutputProvideDefaults sets the appropriate defaults for PrivateServiceDetailsOutput
     */
    export function privateServiceDetailsOutputProvideDefaults(val: PrivateServiceDetailsOutput): PrivateServiceDetailsOutput {
        return {
            ...val,
            autoscaling: (val.autoscaling ? outputs.services.autoscalingConfigProvideDefaults(val.autoscaling) : undefined),
        };
    }

    export interface PrivateServiceOutput {
        autoDeploy: enums.services.ServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.ServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.PrivateServiceDetailsOutput;
        slug: string;
        suspended: enums.services.ServiceSuspended;
        suspenders: enums.services.ServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * privateServiceOutputProvideDefaults sets the appropriate defaults for PrivateServiceOutput
     */
    export function privateServiceOutputProvideDefaults(val: PrivateServiceOutput): PrivateServiceOutput {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.privateServiceDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "private_service",
        };
    }

    export interface RegistryCredential {
        /**
         * Unique identifier for this credential
         */
        id: string;
        /**
         * Descriptive name for this credential
         */
        name: string;
        /**
         * The registry to use this credential with
         */
        registry: enums.services.RegistryCredentialRegistry;
        /**
         * The username associated with the credential
         */
        username: string;
    }

    export interface Resource {
        id: string;
        name: string;
    }

    export interface Route {
        destination: string;
        id: string;
        /**
         * Redirect and Rewrite Rules are applied in priority order starting at 0
         */
        priority: number;
        source: string;
        type: enums.services.StaticSiteRouteType;
    }

    export interface SecretFile {
        id: string;
        name: string;
    }

    export interface ServerPort {
        port: number;
        protocol: enums.services.ServerPortProtocol;
    }

    export interface Service {
        autoDeploy: enums.services.PreviewServiceServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.PreviewServiceServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        slug: string;
        suspended: enums.services.PreviewServiceServiceSuspended;
        suspenders: enums.services.PreviewServiceServiceSuspendersItem[];
        updatedAt: string;
    }

    export interface StaticSiteDetailsOutput {
        buildCommand: string;
        buildPlan: string;
        parentServer?: outputs.services.Resource;
        publishPath: string;
        pullRequestPreviewsEnabled: enums.services.StaticSiteDetailsOutputPullRequestPreviewsEnabled;
        url: string;
    }

    export interface StaticSiteOutput {
        autoDeploy: enums.services.ServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.ServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.StaticSiteDetailsOutput;
        slug: string;
        suspended: enums.services.ServiceSuspended;
        suspenders: enums.services.ServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * staticSiteOutputProvideDefaults sets the appropriate defaults for StaticSiteOutput
     */
    export function staticSiteOutputProvideDefaults(val: StaticSiteOutput): StaticSiteOutput {
        return {
            ...val,
            type: (val.type) ?? "static_site",
        };
    }

    export interface WebServiceDetailsOutput {
        autoscaling?: outputs.services.AutoscalingConfig;
        buildPlan: string;
        disk?: outputs.services.Disk;
        /**
         * Environment (runtime)
         */
        env: enums.services.WebServiceDetailsOutputEnv;
        envSpecificDetails: outputs.services.DockerDetails | outputs.services.NativeEnvironmentDetails;
        healthCheckPath: string;
        /**
         * For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
         */
        numInstances: number;
        openPorts: outputs.services.ServerPort[];
        parentServer?: outputs.services.Resource;
        /**
         * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
         */
        plan: enums.services.WebServiceDetailsOutputPlan;
        pullRequestPreviewsEnabled: enums.services.WebServiceDetailsOutputPullRequestPreviewsEnabled;
        region: enums.services.WebServiceDetailsOutputRegion;
        url: string;
    }
    /**
     * webServiceDetailsOutputProvideDefaults sets the appropriate defaults for WebServiceDetailsOutput
     */
    export function webServiceDetailsOutputProvideDefaults(val: WebServiceDetailsOutput): WebServiceDetailsOutput {
        return {
            ...val,
            autoscaling: (val.autoscaling ? outputs.services.autoscalingConfigProvideDefaults(val.autoscaling) : undefined),
        };
    }

    export interface WebServiceOutput {
        autoDeploy: enums.services.ServiceAutoDeploy;
        branch?: string;
        buildFilter?: outputs.services.BuildFilter;
        createdAt: string;
        id: string;
        imagePath?: string;
        name: string;
        notifyOnFail: enums.services.ServiceNotifyOnFail;
        ownerId: string;
        repo?: string;
        rootDir: string;
        serviceDetails?: outputs.services.WebServiceDetailsOutput;
        slug: string;
        suspended: enums.services.ServiceSuspended;
        suspenders: enums.services.ServiceSuspendersItem[];
        type?: string;
        updatedAt: string;
    }
    /**
     * webServiceOutputProvideDefaults sets the appropriate defaults for WebServiceOutput
     */
    export function webServiceOutputProvideDefaults(val: WebServiceOutput): WebServiceOutput {
        return {
            ...val,
            serviceDetails: (val.serviceDetails ? outputs.services.webServiceDetailsOutputProvideDefaults(val.serviceDetails) : undefined),
            type: (val.type) ?? "web_service",
        };
    }

}
