// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A cron job
type CronJob struct {
	pulumi.CustomResourceState

	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrOutput `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrOutput `pulumi:"branch"`
	CreatedAt pulumi.StringPtrOutput `pulumi:"createdAt"`
	Name      pulumi.StringPtrOutput `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrOutput `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId pulumi.StringPtrOutput `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringPtrOutput         `pulumi:"repo"`
	ServiceDetails CronJobServiceDetailsPtrOutput `pulumi:"serviceDetails"`
	Slug           pulumi.StringPtrOutput         `pulumi:"slug"`
	Suspended      ServiceSuspendedPtrOutput      `pulumi:"suspended"`
	Suspenders     pulumi.StringArrayOutput       `pulumi:"suspenders"`
	Type           pulumi.StringPtrOutput         `pulumi:"type"`
	UpdatedAt      pulumi.StringPtrOutput         `pulumi:"updatedAt"`
}

// NewCronJob registers a new resource with the given unique name, arguments, and options.
func NewCronJob(ctx *pulumi.Context,
	name string, args *CronJobArgs, opts ...pulumi.ResourceOption) (*CronJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	if isZero(args.AutoDeploy) {
		args.AutoDeploy = ServiceAutoDeploy("no")
	}
	if args.ServiceDetails != nil {
		args.ServiceDetails = args.ServiceDetails.ToCronJobServiceDetailsPtrOutput().ApplyT(func(v *CronJobServiceDetails) *CronJobServiceDetails { return v.Defaults() }).(CronJobServiceDetailsPtrOutput)
	}
	if isZero(args.Type) {
		args.Type = pulumi.StringPtr("cron_job")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CronJob
	err := ctx.RegisterResource("render:services:CronJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCronJob gets an existing CronJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCronJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CronJobState, opts ...pulumi.ResourceOption) (*CronJob, error) {
	var resource CronJob
	err := ctx.ReadResource("render:services:CronJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CronJob resources.
type cronJobState struct {
}

type CronJobState struct {
}

func (CronJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobState)(nil)).Elem()
}

type cronJobArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                 `pulumi:"repo"`
	ServiceDetails *CronJobServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                `pulumi:"slug"`
	Suspended      *ServiceSuspended      `pulumi:"suspended"`
	Suspenders     []string               `pulumi:"suspenders"`
	Type           *string                `pulumi:"type"`
	UpdatedAt      *string                `pulumi:"updatedAt"`
}

// The set of arguments for constructing a CronJob resource.
type CronJobArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrInput
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	Name      pulumi.StringInput
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrInput
	// The id of the owner (user/team).
	OwnerId pulumi.StringInput
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringInput
	ServiceDetails CronJobServiceDetailsPtrInput
	Slug           pulumi.StringPtrInput
	Suspended      ServiceSuspendedPtrInput
	Suspenders     pulumi.StringArrayInput
	Type           pulumi.StringPtrInput
	UpdatedAt      pulumi.StringPtrInput
}

func (CronJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobArgs)(nil)).Elem()
}

type CronJobInput interface {
	pulumi.Input

	ToCronJobOutput() CronJobOutput
	ToCronJobOutputWithContext(ctx context.Context) CronJobOutput
}

func (*CronJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJob)(nil)).Elem()
}

func (i *CronJob) ToCronJobOutput() CronJobOutput {
	return i.ToCronJobOutputWithContext(context.Background())
}

func (i *CronJob) ToCronJobOutputWithContext(ctx context.Context) CronJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobOutput)
}

type CronJobOutput struct{ *pulumi.OutputState }

func (CronJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJob)(nil)).Elem()
}

func (o CronJobOutput) ToCronJobOutput() CronJobOutput {
	return o
}

func (o CronJobOutput) ToCronJobOutputWithContext(ctx context.Context) CronJobOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o CronJobOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v *CronJob) ServiceAutoDeployPtrOutput { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o CronJobOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o CronJobOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o CronJobOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The notification setting for this service upon deployment failure.
func (o CronJobOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v *CronJob) ServiceNotifyOnFailPtrOutput { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o CronJobOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o CronJobOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.Repo }).(pulumi.StringPtrOutput)
}

func (o CronJobOutput) ServiceDetails() CronJobServiceDetailsPtrOutput {
	return o.ApplyT(func(v *CronJob) CronJobServiceDetailsPtrOutput { return v.ServiceDetails }).(CronJobServiceDetailsPtrOutput)
}

func (o CronJobOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o CronJobOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v *CronJob) ServiceSuspendedPtrOutput { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o CronJobOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringArrayOutput { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o CronJobOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o CronJobOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJob) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobInput)(nil)).Elem(), &CronJob{})
	pulumi.RegisterOutputType(CronJobOutput{})
}
