// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Registrycredentials
{
    public static class ListRegistrycredentials
    {
        public static Task<ListRegistrycredentialsResult> InvokeAsync(ListRegistrycredentialsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListRegistrycredentialsResult>("render:registrycredentials:listRegistrycredentials", args ?? new ListRegistrycredentialsArgs(), options.WithDefaults());

        public static Output<ListRegistrycredentialsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListRegistrycredentialsResult>("render:registrycredentials:listRegistrycredentials", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListRegistrycredentialsArgs : global::Pulumi.InvokeArgs
    {
        public ListRegistrycredentialsArgs()
        {
        }
        public static new ListRegistrycredentialsArgs Empty => new ListRegistrycredentialsArgs();
    }


    [OutputType]
    public sealed class ListRegistrycredentialsResult
    {
        public readonly ImmutableArray<Outputs.ListRegistrycredentialsItemProperties> Items;

        [OutputConstructor]
        private ListRegistrycredentialsResult(ImmutableArray<Outputs.ListRegistrycredentialsItemProperties> items)
        {
            Items = items;
        }
    }
}
