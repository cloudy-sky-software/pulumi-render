// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Redis
{
    public static class ListRedis
    {
        public static Task<ListRedisResult> InvokeAsync(ListRedisArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListRedisResult>("render:redis:listRedis", args ?? new ListRedisArgs(), options.WithDefaults());

        public static Output<ListRedisResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListRedisResult>("render:redis:listRedis", InvokeArgs.Empty, options.WithDefaults());

        public static Output<ListRedisResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<ListRedisResult>("render:redis:listRedis", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListRedisArgs : global::Pulumi.InvokeArgs
    {
        public ListRedisArgs()
        {
        }
        public static new ListRedisArgs Empty => new ListRedisArgs();
    }


    [OutputType]
    public sealed class ListRedisResult
    {
        public readonly ImmutableArray<Outputs.RedisWithCursor> Items;

        [OutputConstructor]
        private ListRedisResult(ImmutableArray<Outputs.RedisWithCursor> items)
        {
            Items = items;
        }
    }
}
