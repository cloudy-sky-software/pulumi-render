// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getEnvironment(args: GetEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("render:environments:getEnvironment", {
        "environmentId": args.environmentId,
    }, opts);
}

export interface GetEnvironmentArgs {
    environmentId: string;
}

export interface GetEnvironmentResult {
    readonly databasesIds: string[];
    readonly envGroupIds: string[];
    readonly id: string;
    readonly name: string;
    /**
     * Indicates whether network connections across environments are allowed.
     */
    readonly networkIsolationEnabled: boolean;
    readonly projectId: string;
    /**
     * Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
     */
    readonly protectedStatus: enums.environments.EnvironmentProtectedStatus;
    readonly redisIds: string[];
    readonly serviceIds: string[];
}
export function getEnvironmentOutput(args: GetEnvironmentOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEnvironmentResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("render:environments:getEnvironment", {
        "environmentId": args.environmentId,
    }, opts);
}

export interface GetEnvironmentOutputArgs {
    environmentId: pulumi.Input<string>;
}
