// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvVars struct {
	pulumi.CustomResourceState

	EnvVars EnvVarKeyValueArrayOutput `pulumi:"envVars"`
}

// NewEnvVars registers a new resource with the given unique name, arguments, and options.
func NewEnvVars(ctx *pulumi.Context,
	name string, args *EnvVarsArgs, opts ...pulumi.ResourceOption) (*EnvVars, error) {
	if args == nil {
		args = &EnvVarsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvVars
	err := ctx.RegisterResource("render:services:EnvVars", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvVars gets an existing EnvVars resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvVars(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvVarsState, opts ...pulumi.ResourceOption) (*EnvVars, error) {
	var resource EnvVars
	err := ctx.ReadResource("render:services:EnvVars", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvVars resources.
type envVarsState struct {
}

type EnvVarsState struct {
}

func (EnvVarsState) ElementType() reflect.Type {
	return reflect.TypeOf((*envVarsState)(nil)).Elem()
}

type envVarsArgs struct {
	EnvVars []EnvVarKeyValue `pulumi:"envVars"`
	// (Required) The ID of the service
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a EnvVars resource.
type EnvVarsArgs struct {
	EnvVars EnvVarKeyValueArrayInput
	// (Required) The ID of the service
	ServiceId pulumi.StringPtrInput
}

func (EnvVarsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envVarsArgs)(nil)).Elem()
}

type EnvVarsInput interface {
	pulumi.Input

	ToEnvVarsOutput() EnvVarsOutput
	ToEnvVarsOutputWithContext(ctx context.Context) EnvVarsOutput
}

func (*EnvVars) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVars)(nil)).Elem()
}

func (i *EnvVars) ToEnvVarsOutput() EnvVarsOutput {
	return i.ToEnvVarsOutputWithContext(context.Background())
}

func (i *EnvVars) ToEnvVarsOutputWithContext(ctx context.Context) EnvVarsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarsOutput)
}

type EnvVarsOutput struct{ *pulumi.OutputState }

func (EnvVarsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVars)(nil)).Elem()
}

func (o EnvVarsOutput) ToEnvVarsOutput() EnvVarsOutput {
	return o
}

func (o EnvVarsOutput) ToEnvVarsOutputWithContext(ctx context.Context) EnvVarsOutput {
	return o
}

func (o EnvVarsOutput) EnvVars() EnvVarKeyValueArrayOutput {
	return o.ApplyT(func(v *EnvVars) EnvVarKeyValueArrayOutput { return v.EnvVars }).(EnvVarKeyValueArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarsInput)(nil)).Elem(), &EnvVars{})
	pulumi.RegisterOutputType(EnvVarsOutput{})
}
