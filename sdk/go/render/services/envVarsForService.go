// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvVarsForService struct {
	pulumi.CustomResourceState

	EnvVars EnvVarInputTypeArrayOutput `pulumi:"envVars"`
}

// NewEnvVarsForService registers a new resource with the given unique name, arguments, and options.
func NewEnvVarsForService(ctx *pulumi.Context,
	name string, args *EnvVarsForServiceArgs, opts ...pulumi.ResourceOption) (*EnvVarsForService, error) {
	if args == nil {
		args = &EnvVarsForServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvVarsForService
	err := ctx.RegisterResource("render:services:EnvVarsForService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvVarsForService gets an existing EnvVarsForService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvVarsForService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvVarsForServiceState, opts ...pulumi.ResourceOption) (*EnvVarsForService, error) {
	var resource EnvVarsForService
	err := ctx.ReadResource("render:services:EnvVarsForService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvVarsForService resources.
type envVarsForServiceState struct {
}

type EnvVarsForServiceState struct {
}

func (EnvVarsForServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*envVarsForServiceState)(nil)).Elem()
}

type envVarsForServiceArgs struct {
	EnvVars []EnvVarInputType `pulumi:"envVars"`
	// The ID of the service
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a EnvVarsForService resource.
type EnvVarsForServiceArgs struct {
	EnvVars EnvVarInputTypeArrayInput
	// The ID of the service
	ServiceId pulumi.StringPtrInput
}

func (EnvVarsForServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envVarsForServiceArgs)(nil)).Elem()
}

type EnvVarsForServiceInput interface {
	pulumi.Input

	ToEnvVarsForServiceOutput() EnvVarsForServiceOutput
	ToEnvVarsForServiceOutputWithContext(ctx context.Context) EnvVarsForServiceOutput
}

func (*EnvVarsForService) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarsForService)(nil)).Elem()
}

func (i *EnvVarsForService) ToEnvVarsForServiceOutput() EnvVarsForServiceOutput {
	return i.ToEnvVarsForServiceOutputWithContext(context.Background())
}

func (i *EnvVarsForService) ToEnvVarsForServiceOutputWithContext(ctx context.Context) EnvVarsForServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvVarsForServiceOutput)
}

type EnvVarsForServiceOutput struct{ *pulumi.OutputState }

func (EnvVarsForServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarsForService)(nil)).Elem()
}

func (o EnvVarsForServiceOutput) ToEnvVarsForServiceOutput() EnvVarsForServiceOutput {
	return o
}

func (o EnvVarsForServiceOutput) ToEnvVarsForServiceOutputWithContext(ctx context.Context) EnvVarsForServiceOutput {
	return o
}

func (o EnvVarsForServiceOutput) EnvVars() EnvVarInputTypeArrayOutput {
	return o.ApplyT(func(v *EnvVarsForService) EnvVarInputTypeArrayOutput { return v.EnvVars }).(EnvVarInputTypeArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvVarsForServiceInput)(nil)).Elem(), &EnvVarsForService{})
	pulumi.RegisterOutputType(EnvVarsForServiceOutput{})
}
