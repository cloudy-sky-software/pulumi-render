// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BackgroundWorkerAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type BackgroundWorkerAutoDeploy = (typeof BackgroundWorkerAutoDeploy)[keyof typeof BackgroundWorkerAutoDeploy];

export const BackgroundWorkerDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type BackgroundWorkerDetailsCreateEnv = (typeof BackgroundWorkerDetailsCreateEnv)[keyof typeof BackgroundWorkerDetailsCreateEnv];

export const BackgroundWorkerDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type BackgroundWorkerDetailsCreatePlan = (typeof BackgroundWorkerDetailsCreatePlan)[keyof typeof BackgroundWorkerDetailsCreatePlan];

export const BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = (typeof BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled)[keyof typeof BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled];

export const BackgroundWorkerDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type BackgroundWorkerDetailsCreateRegion = (typeof BackgroundWorkerDetailsCreateRegion)[keyof typeof BackgroundWorkerDetailsCreateRegion];

export const BackgroundWorkerDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type BackgroundWorkerDetailsEnv = (typeof BackgroundWorkerDetailsEnv)[keyof typeof BackgroundWorkerDetailsEnv];

export const BackgroundWorkerDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type BackgroundWorkerDetailsPlan = (typeof BackgroundWorkerDetailsPlan)[keyof typeof BackgroundWorkerDetailsPlan];

export const BackgroundWorkerDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type BackgroundWorkerDetailsPullRequestPreviewsEnabled = (typeof BackgroundWorkerDetailsPullRequestPreviewsEnabled)[keyof typeof BackgroundWorkerDetailsPullRequestPreviewsEnabled];

export const BackgroundWorkerDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type BackgroundWorkerDetailsRegion = (typeof BackgroundWorkerDetailsRegion)[keyof typeof BackgroundWorkerDetailsRegion];

export const BackgroundWorkerNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type BackgroundWorkerNotifyOnFail = (typeof BackgroundWorkerNotifyOnFail)[keyof typeof BackgroundWorkerNotifyOnFail];

export const BackgroundWorkerPropertiesAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "yes"
 */
export type BackgroundWorkerPropertiesAutoDeploy = (typeof BackgroundWorkerPropertiesAutoDeploy)[keyof typeof BackgroundWorkerPropertiesAutoDeploy];

export const BackgroundWorkerSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type BackgroundWorkerSuspended = (typeof BackgroundWorkerSuspended)[keyof typeof BackgroundWorkerSuspended];

export const BackgroundWorkerSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type BackgroundWorkerSuspendersItem = (typeof BackgroundWorkerSuspendersItem)[keyof typeof BackgroundWorkerSuspendersItem];

export const BackgroundWorkerType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type BackgroundWorkerType = (typeof BackgroundWorkerType)[keyof typeof BackgroundWorkerType];

export const CancelDeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type CancelDeployStatus = (typeof CancelDeployStatus)[keyof typeof CancelDeployStatus];

export const CancelDeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type CancelDeployTrigger = (typeof CancelDeployTrigger)[keyof typeof CancelDeployTrigger];

export const CronJobAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type CronJobAutoDeploy = (typeof CronJobAutoDeploy)[keyof typeof CronJobAutoDeploy];

export const CronJobDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type CronJobDetailsCreateEnv = (typeof CronJobDetailsCreateEnv)[keyof typeof CronJobDetailsCreateEnv];

export const CronJobDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type CronJobDetailsCreatePlan = (typeof CronJobDetailsCreatePlan)[keyof typeof CronJobDetailsCreatePlan];

export const CronJobDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type CronJobDetailsCreateRegion = (typeof CronJobDetailsCreateRegion)[keyof typeof CronJobDetailsCreateRegion];

export const CronJobDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type CronJobDetailsEnv = (typeof CronJobDetailsEnv)[keyof typeof CronJobDetailsEnv];

export const CronJobDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type CronJobDetailsPlan = (typeof CronJobDetailsPlan)[keyof typeof CronJobDetailsPlan];

export const CronJobDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type CronJobDetailsRegion = (typeof CronJobDetailsRegion)[keyof typeof CronJobDetailsRegion];

export const CronJobNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type CronJobNotifyOnFail = (typeof CronJobNotifyOnFail)[keyof typeof CronJobNotifyOnFail];

export const CronJobPropertiesAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "yes"
 */
export type CronJobPropertiesAutoDeploy = (typeof CronJobPropertiesAutoDeploy)[keyof typeof CronJobPropertiesAutoDeploy];

export const CronJobSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type CronJobSuspended = (typeof CronJobSuspended)[keyof typeof CronJobSuspended];

export const CronJobSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type CronJobSuspendersItem = (typeof CronJobSuspendersItem)[keyof typeof CronJobSuspendersItem];

export const CronJobType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type CronJobType = (typeof CronJobType)[keyof typeof CronJobType];

export const CustomDomainDomainType = {
    Apex: "apex",
    Subdomain: "subdomain",
} as const;

export type CustomDomainDomainType = (typeof CustomDomainDomainType)[keyof typeof CustomDomainDomainType];

export const CustomDomainVerificationStatus = {
    Verified: "verified",
    Unverified: "unverified",
} as const;

export type CustomDomainVerificationStatus = (typeof CustomDomainVerificationStatus)[keyof typeof CustomDomainVerificationStatus];

export const DeployClearCache = {
    Clear: "clear",
    DoNotClear: "do_not_clear",
} as const;

/**
 * Defaults to "do_not_clear"
 */
export type DeployClearCache = (typeof DeployClearCache)[keyof typeof DeployClearCache];

export const DeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type DeployStatus = (typeof DeployStatus)[keyof typeof DeployStatus];

export const DeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type DeployTrigger = (typeof DeployTrigger)[keyof typeof DeployTrigger];

export const PreviewServicePlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type PreviewServicePlan = (typeof PreviewServicePlan)[keyof typeof PreviewServicePlan];

export const PrivateServiceAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type PrivateServiceAutoDeploy = (typeof PrivateServiceAutoDeploy)[keyof typeof PrivateServiceAutoDeploy];

export const PrivateServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type PrivateServiceDetailsCreateEnv = (typeof PrivateServiceDetailsCreateEnv)[keyof typeof PrivateServiceDetailsCreateEnv];

export const PrivateServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type PrivateServiceDetailsCreatePlan = (typeof PrivateServiceDetailsCreatePlan)[keyof typeof PrivateServiceDetailsCreatePlan];

export const PrivateServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type PrivateServiceDetailsCreatePullRequestPreviewsEnabled = (typeof PrivateServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof PrivateServiceDetailsCreatePullRequestPreviewsEnabled];

export const PrivateServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type PrivateServiceDetailsCreateRegion = (typeof PrivateServiceDetailsCreateRegion)[keyof typeof PrivateServiceDetailsCreateRegion];

export const PrivateServiceDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type PrivateServiceDetailsEnv = (typeof PrivateServiceDetailsEnv)[keyof typeof PrivateServiceDetailsEnv];

export const PrivateServiceDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type PrivateServiceDetailsPlan = (typeof PrivateServiceDetailsPlan)[keyof typeof PrivateServiceDetailsPlan];

export const PrivateServiceDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type PrivateServiceDetailsPullRequestPreviewsEnabled = (typeof PrivateServiceDetailsPullRequestPreviewsEnabled)[keyof typeof PrivateServiceDetailsPullRequestPreviewsEnabled];

export const PrivateServiceDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type PrivateServiceDetailsRegion = (typeof PrivateServiceDetailsRegion)[keyof typeof PrivateServiceDetailsRegion];

export const PrivateServiceNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type PrivateServiceNotifyOnFail = (typeof PrivateServiceNotifyOnFail)[keyof typeof PrivateServiceNotifyOnFail];

export const PrivateServicePropertiesAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "yes"
 */
export type PrivateServicePropertiesAutoDeploy = (typeof PrivateServicePropertiesAutoDeploy)[keyof typeof PrivateServicePropertiesAutoDeploy];

export const PrivateServiceSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type PrivateServiceSuspended = (typeof PrivateServiceSuspended)[keyof typeof PrivateServiceSuspended];

export const PrivateServiceSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type PrivateServiceSuspendersItem = (typeof PrivateServiceSuspendersItem)[keyof typeof PrivateServiceSuspendersItem];

export const PrivateServiceType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type PrivateServiceType = (typeof PrivateServiceType)[keyof typeof PrivateServiceType];

export const RegistryCredentialRegistry = {
    Github: "GITHUB",
    Gitlab: "GITLAB",
    Docker: "DOCKER",
} as const;

/**
 * The registry to use this credential with
 */
export type RegistryCredentialRegistry = (typeof RegistryCredentialRegistry)[keyof typeof RegistryCredentialRegistry];

export const RollbackDeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type RollbackDeployStatus = (typeof RollbackDeployStatus)[keyof typeof RollbackDeployStatus];

export const RollbackDeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type RollbackDeployTrigger = (typeof RollbackDeployTrigger)[keyof typeof RollbackDeployTrigger];

export const ServerPortProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

export type ServerPortProtocol = (typeof ServerPortProtocol)[keyof typeof ServerPortProtocol];

export const ServiceAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type ServiceAutoDeploy = (typeof ServiceAutoDeploy)[keyof typeof ServiceAutoDeploy];

export const ServiceNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type ServiceNotifyOnFail = (typeof ServiceNotifyOnFail)[keyof typeof ServiceNotifyOnFail];

export const ServiceSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type ServiceSuspended = (typeof ServiceSuspended)[keyof typeof ServiceSuspended];

export const ServiceSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type ServiceSuspendersItem = (typeof ServiceSuspendersItem)[keyof typeof ServiceSuspendersItem];

export const ServiceType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];

export const StaticSiteAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type StaticSiteAutoDeploy = (typeof StaticSiteAutoDeploy)[keyof typeof StaticSiteAutoDeploy];

export const StaticSiteDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type StaticSiteDetailsCreatePullRequestPreviewsEnabled = (typeof StaticSiteDetailsCreatePullRequestPreviewsEnabled)[keyof typeof StaticSiteDetailsCreatePullRequestPreviewsEnabled];

export const StaticSiteDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type StaticSiteDetailsPullRequestPreviewsEnabled = (typeof StaticSiteDetailsPullRequestPreviewsEnabled)[keyof typeof StaticSiteDetailsPullRequestPreviewsEnabled];

export const StaticSiteNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type StaticSiteNotifyOnFail = (typeof StaticSiteNotifyOnFail)[keyof typeof StaticSiteNotifyOnFail];

export const StaticSitePropertiesAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "yes"
 */
export type StaticSitePropertiesAutoDeploy = (typeof StaticSitePropertiesAutoDeploy)[keyof typeof StaticSitePropertiesAutoDeploy];

export const StaticSiteRouteType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;

export type StaticSiteRouteType = (typeof StaticSiteRouteType)[keyof typeof StaticSiteRouteType];

export const StaticSiteSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type StaticSiteSuspended = (typeof StaticSiteSuspended)[keyof typeof StaticSiteSuspended];

export const StaticSiteSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type StaticSiteSuspendersItem = (typeof StaticSiteSuspendersItem)[keyof typeof StaticSiteSuspendersItem];

export const StaticSiteType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type StaticSiteType = (typeof StaticSiteType)[keyof typeof StaticSiteType];

export const WebServiceAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type WebServiceAutoDeploy = (typeof WebServiceAutoDeploy)[keyof typeof WebServiceAutoDeploy];

export const WebServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type WebServiceDetailsCreateEnv = (typeof WebServiceDetailsCreateEnv)[keyof typeof WebServiceDetailsCreateEnv];

export const WebServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

export type WebServiceDetailsCreatePlan = (typeof WebServiceDetailsCreatePlan)[keyof typeof WebServiceDetailsCreatePlan];

export const WebServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "no"
 */
export type WebServiceDetailsCreatePullRequestPreviewsEnabled = (typeof WebServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof WebServiceDetailsCreatePullRequestPreviewsEnabled];

export const WebServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type WebServiceDetailsCreateRegion = (typeof WebServiceDetailsCreateRegion)[keyof typeof WebServiceDetailsCreateRegion];

export const WebServiceDetailsEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Environment (runtime)
 */
export type WebServiceDetailsEnv = (typeof WebServiceDetailsEnv)[keyof typeof WebServiceDetailsEnv];

export const WebServiceDetailsPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type WebServiceDetailsPlan = (typeof WebServiceDetailsPlan)[keyof typeof WebServiceDetailsPlan];

export const WebServiceDetailsPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

export type WebServiceDetailsPullRequestPreviewsEnabled = (typeof WebServiceDetailsPullRequestPreviewsEnabled)[keyof typeof WebServiceDetailsPullRequestPreviewsEnabled];

export const WebServiceDetailsRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
} as const;

export type WebServiceDetailsRegion = (typeof WebServiceDetailsRegion)[keyof typeof WebServiceDetailsRegion];

export const WebServiceNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type WebServiceNotifyOnFail = (typeof WebServiceNotifyOnFail)[keyof typeof WebServiceNotifyOnFail];

export const WebServicePropertiesAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * Defaults to "yes"
 */
export type WebServicePropertiesAutoDeploy = (typeof WebServicePropertiesAutoDeploy)[keyof typeof WebServicePropertiesAutoDeploy];

export const WebServiceSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type WebServiceSuspended = (typeof WebServiceSuspended)[keyof typeof WebServiceSuspended];

export const WebServiceSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type WebServiceSuspendersItem = (typeof WebServiceSuspendersItem)[keyof typeof WebServiceSuspendersItem];

export const WebServiceType = {
    StaticSite: "static_site",
    WebService: "web_service",
    PrivateService: "private_service",
    BackgroundWorker: "background_worker",
    CronJob: "cron_job",
} as const;

export type WebServiceType = (typeof WebServiceType)[keyof typeof WebServiceType];
