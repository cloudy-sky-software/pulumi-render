// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PostgresBackup struct {
	pulumi.CustomResourceState
}

// NewPostgresBackup registers a new resource with the given unique name, arguments, and options.
func NewPostgresBackup(ctx *pulumi.Context,
	name string, args *PostgresBackupArgs, opts ...pulumi.ResourceOption) (*PostgresBackup, error) {
	if args == nil {
		args = &PostgresBackupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresBackup
	err := ctx.RegisterResource("render:postgres:PostgresBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresBackup gets an existing PostgresBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresBackupState, opts ...pulumi.ResourceOption) (*PostgresBackup, error) {
	var resource PostgresBackup
	err := ctx.ReadResource("render:postgres:PostgresBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresBackup resources.
type postgresBackupState struct {
}

type PostgresBackupState struct {
}

func (PostgresBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresBackupState)(nil)).Elem()
}

type postgresBackupArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a PostgresBackup resource.
type PostgresBackupArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (PostgresBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresBackupArgs)(nil)).Elem()
}

type PostgresBackupInput interface {
	pulumi.Input

	ToPostgresBackupOutput() PostgresBackupOutput
	ToPostgresBackupOutputWithContext(ctx context.Context) PostgresBackupOutput
}

func (*PostgresBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresBackup)(nil)).Elem()
}

func (i *PostgresBackup) ToPostgresBackupOutput() PostgresBackupOutput {
	return i.ToPostgresBackupOutputWithContext(context.Background())
}

func (i *PostgresBackup) ToPostgresBackupOutputWithContext(ctx context.Context) PostgresBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresBackupOutput)
}

type PostgresBackupOutput struct{ *pulumi.OutputState }

func (PostgresBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresBackup)(nil)).Elem()
}

func (o PostgresBackupOutput) ToPostgresBackupOutput() PostgresBackupOutput {
	return o
}

func (o PostgresBackupOutput) ToPostgresBackupOutputWithContext(ctx context.Context) PostgresBackupOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresBackupInput)(nil)).Elem(), &PostgresBackup{})
	pulumi.RegisterOutputType(PostgresBackupOutput{})
}
