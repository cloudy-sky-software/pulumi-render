// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Services
{
    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsEnv : IEquatable<BackgroundWorkerDetailsEnv>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsEnv Docker { get; } = new BackgroundWorkerDetailsEnv("docker");
        public static BackgroundWorkerDetailsEnv Elixir { get; } = new BackgroundWorkerDetailsEnv("elixir");
        public static BackgroundWorkerDetailsEnv Go { get; } = new BackgroundWorkerDetailsEnv("go");
        public static BackgroundWorkerDetailsEnv Node { get; } = new BackgroundWorkerDetailsEnv("node");
        public static BackgroundWorkerDetailsEnv Python { get; } = new BackgroundWorkerDetailsEnv("python");
        public static BackgroundWorkerDetailsEnv Ruby { get; } = new BackgroundWorkerDetailsEnv("ruby");
        public static BackgroundWorkerDetailsEnv Rust { get; } = new BackgroundWorkerDetailsEnv("rust");
        public static BackgroundWorkerDetailsEnv Image { get; } = new BackgroundWorkerDetailsEnv("image");

        public static bool operator ==(BackgroundWorkerDetailsEnv left, BackgroundWorkerDetailsEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsEnv left, BackgroundWorkerDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsEnv other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsPlan : IEquatable<BackgroundWorkerDetailsPlan>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsPlan Starter { get; } = new BackgroundWorkerDetailsPlan("starter");
        public static BackgroundWorkerDetailsPlan StarterPlus { get; } = new BackgroundWorkerDetailsPlan("starter_plus");
        public static BackgroundWorkerDetailsPlan Standard { get; } = new BackgroundWorkerDetailsPlan("standard");
        public static BackgroundWorkerDetailsPlan StandardPlus { get; } = new BackgroundWorkerDetailsPlan("standard_plus");
        public static BackgroundWorkerDetailsPlan Pro { get; } = new BackgroundWorkerDetailsPlan("pro");
        public static BackgroundWorkerDetailsPlan ProPlus { get; } = new BackgroundWorkerDetailsPlan("pro_plus");
        public static BackgroundWorkerDetailsPlan ProMax { get; } = new BackgroundWorkerDetailsPlan("pro_max");
        public static BackgroundWorkerDetailsPlan ProUltra { get; } = new BackgroundWorkerDetailsPlan("pro_ultra");
        public static BackgroundWorkerDetailsPlan Free { get; } = new BackgroundWorkerDetailsPlan("free");
        public static BackgroundWorkerDetailsPlan Custom { get; } = new BackgroundWorkerDetailsPlan("custom");

        public static bool operator ==(BackgroundWorkerDetailsPlan left, BackgroundWorkerDetailsPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsPlan left, BackgroundWorkerDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsPlan other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerDetailsPullRequestPreviewsEnabled : IEquatable<BackgroundWorkerDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsPullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerDetailsPullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerDetailsPullRequestPreviewsEnabled No { get; } = new BackgroundWorkerDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerDetailsPullRequestPreviewsEnabled left, BackgroundWorkerDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsPullRequestPreviewsEnabled left, BackgroundWorkerDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerDetailsRegion : IEquatable<BackgroundWorkerDetailsRegion>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsRegion Frankfurt { get; } = new BackgroundWorkerDetailsRegion("frankfurt");
        public static BackgroundWorkerDetailsRegion Oregon { get; } = new BackgroundWorkerDetailsRegion("oregon");
        public static BackgroundWorkerDetailsRegion Ohio { get; } = new BackgroundWorkerDetailsRegion("ohio");
        public static BackgroundWorkerDetailsRegion Singapore { get; } = new BackgroundWorkerDetailsRegion("singapore");

        public static bool operator ==(BackgroundWorkerDetailsRegion left, BackgroundWorkerDetailsRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsRegion left, BackgroundWorkerDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsRegion other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CancelDeployStatus : IEquatable<CancelDeployStatus>
    {
        private readonly string _value;

        private CancelDeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelDeployStatus Created { get; } = new CancelDeployStatus("created");
        public static CancelDeployStatus BuildInProgress { get; } = new CancelDeployStatus("build_in_progress");
        public static CancelDeployStatus UpdateInProgress { get; } = new CancelDeployStatus("update_in_progress");
        public static CancelDeployStatus Live { get; } = new CancelDeployStatus("live");
        public static CancelDeployStatus Deactivated { get; } = new CancelDeployStatus("deactivated");
        public static CancelDeployStatus BuildFailed { get; } = new CancelDeployStatus("build_failed");
        public static CancelDeployStatus UpdateFailed { get; } = new CancelDeployStatus("update_failed");
        public static CancelDeployStatus Canceled { get; } = new CancelDeployStatus("canceled");
        public static CancelDeployStatus PreDeployInProgress { get; } = new CancelDeployStatus("pre_deploy_in_progress");
        public static CancelDeployStatus PreDeployFailed { get; } = new CancelDeployStatus("pre_deploy_failed");

        public static bool operator ==(CancelDeployStatus left, CancelDeployStatus right) => left.Equals(right);
        public static bool operator !=(CancelDeployStatus left, CancelDeployStatus right) => !left.Equals(right);

        public static explicit operator string(CancelDeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelDeployStatus other && Equals(other);
        public bool Equals(CancelDeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CancelDeployTrigger : IEquatable<CancelDeployTrigger>
    {
        private readonly string _value;

        private CancelDeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelDeployTrigger Api { get; } = new CancelDeployTrigger("api");
        public static CancelDeployTrigger BlueprintSync { get; } = new CancelDeployTrigger("blueprint_sync");
        public static CancelDeployTrigger DeployHook { get; } = new CancelDeployTrigger("deploy_hook");
        public static CancelDeployTrigger DeployedByRender { get; } = new CancelDeployTrigger("deployed_by_render");
        public static CancelDeployTrigger Manual { get; } = new CancelDeployTrigger("manual");
        public static CancelDeployTrigger Other { get; } = new CancelDeployTrigger("other");
        public static CancelDeployTrigger NewCommit { get; } = new CancelDeployTrigger("new_commit");
        public static CancelDeployTrigger Rollback { get; } = new CancelDeployTrigger("rollback");
        public static CancelDeployTrigger ServiceResumed { get; } = new CancelDeployTrigger("service_resumed");
        public static CancelDeployTrigger ServiceUpdated { get; } = new CancelDeployTrigger("service_updated");

        public static bool operator ==(CancelDeployTrigger left, CancelDeployTrigger right) => left.Equals(right);
        public static bool operator !=(CancelDeployTrigger left, CancelDeployTrigger right) => !left.Equals(right);

        public static explicit operator string(CancelDeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelDeployTrigger other && Equals(other);
        public bool Equals(CancelDeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsEnv : IEquatable<CronJobDetailsEnv>
    {
        private readonly string _value;

        private CronJobDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsEnv Docker { get; } = new CronJobDetailsEnv("docker");
        public static CronJobDetailsEnv Elixir { get; } = new CronJobDetailsEnv("elixir");
        public static CronJobDetailsEnv Go { get; } = new CronJobDetailsEnv("go");
        public static CronJobDetailsEnv Node { get; } = new CronJobDetailsEnv("node");
        public static CronJobDetailsEnv Python { get; } = new CronJobDetailsEnv("python");
        public static CronJobDetailsEnv Ruby { get; } = new CronJobDetailsEnv("ruby");
        public static CronJobDetailsEnv Rust { get; } = new CronJobDetailsEnv("rust");
        public static CronJobDetailsEnv Image { get; } = new CronJobDetailsEnv("image");

        public static bool operator ==(CronJobDetailsEnv left, CronJobDetailsEnv right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsEnv left, CronJobDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsEnv other && Equals(other);
        public bool Equals(CronJobDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsPlan : IEquatable<CronJobDetailsPlan>
    {
        private readonly string _value;

        private CronJobDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsPlan Starter { get; } = new CronJobDetailsPlan("starter");
        public static CronJobDetailsPlan StarterPlus { get; } = new CronJobDetailsPlan("starter_plus");
        public static CronJobDetailsPlan Standard { get; } = new CronJobDetailsPlan("standard");
        public static CronJobDetailsPlan StandardPlus { get; } = new CronJobDetailsPlan("standard_plus");
        public static CronJobDetailsPlan Pro { get; } = new CronJobDetailsPlan("pro");
        public static CronJobDetailsPlan ProPlus { get; } = new CronJobDetailsPlan("pro_plus");
        public static CronJobDetailsPlan ProMax { get; } = new CronJobDetailsPlan("pro_max");
        public static CronJobDetailsPlan ProUltra { get; } = new CronJobDetailsPlan("pro_ultra");
        public static CronJobDetailsPlan Free { get; } = new CronJobDetailsPlan("free");
        public static CronJobDetailsPlan Custom { get; } = new CronJobDetailsPlan("custom");

        public static bool operator ==(CronJobDetailsPlan left, CronJobDetailsPlan right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsPlan left, CronJobDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsPlan other && Equals(other);
        public bool Equals(CronJobDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobDetailsRegion : IEquatable<CronJobDetailsRegion>
    {
        private readonly string _value;

        private CronJobDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsRegion Frankfurt { get; } = new CronJobDetailsRegion("frankfurt");
        public static CronJobDetailsRegion Oregon { get; } = new CronJobDetailsRegion("oregon");
        public static CronJobDetailsRegion Ohio { get; } = new CronJobDetailsRegion("ohio");
        public static CronJobDetailsRegion Singapore { get; } = new CronJobDetailsRegion("singapore");

        public static bool operator ==(CronJobDetailsRegion left, CronJobDetailsRegion right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsRegion left, CronJobDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsRegion other && Equals(other);
        public bool Equals(CronJobDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainDomainType : IEquatable<CustomDomainDomainType>
    {
        private readonly string _value;

        private CustomDomainDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainDomainType Apex { get; } = new CustomDomainDomainType("apex");
        public static CustomDomainDomainType Subdomain { get; } = new CustomDomainDomainType("subdomain");

        public static bool operator ==(CustomDomainDomainType left, CustomDomainDomainType right) => left.Equals(right);
        public static bool operator !=(CustomDomainDomainType left, CustomDomainDomainType right) => !left.Equals(right);

        public static explicit operator string(CustomDomainDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainDomainType other && Equals(other);
        public bool Equals(CustomDomainDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainVerificationStatus : IEquatable<CustomDomainVerificationStatus>
    {
        private readonly string _value;

        private CustomDomainVerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainVerificationStatus Verified { get; } = new CustomDomainVerificationStatus("verified");
        public static CustomDomainVerificationStatus Unverified { get; } = new CustomDomainVerificationStatus("unverified");

        public static bool operator ==(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => left.Equals(right);
        public static bool operator !=(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDomainVerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainVerificationStatus other && Equals(other);
        public bool Equals(CustomDomainVerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "do_not_clear"
    /// </summary>
    [EnumType]
    public readonly struct DeployClearCache : IEquatable<DeployClearCache>
    {
        private readonly string _value;

        private DeployClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployClearCache Clear { get; } = new DeployClearCache("clear");
        public static DeployClearCache DoNotClear { get; } = new DeployClearCache("do_not_clear");

        public static bool operator ==(DeployClearCache left, DeployClearCache right) => left.Equals(right);
        public static bool operator !=(DeployClearCache left, DeployClearCache right) => !left.Equals(right);

        public static explicit operator string(DeployClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployClearCache other && Equals(other);
        public bool Equals(DeployClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployStatus : IEquatable<DeployStatus>
    {
        private readonly string _value;

        private DeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployStatus Created { get; } = new DeployStatus("created");
        public static DeployStatus BuildInProgress { get; } = new DeployStatus("build_in_progress");
        public static DeployStatus UpdateInProgress { get; } = new DeployStatus("update_in_progress");
        public static DeployStatus Live { get; } = new DeployStatus("live");
        public static DeployStatus Deactivated { get; } = new DeployStatus("deactivated");
        public static DeployStatus BuildFailed { get; } = new DeployStatus("build_failed");
        public static DeployStatus UpdateFailed { get; } = new DeployStatus("update_failed");
        public static DeployStatus Canceled { get; } = new DeployStatus("canceled");
        public static DeployStatus PreDeployInProgress { get; } = new DeployStatus("pre_deploy_in_progress");
        public static DeployStatus PreDeployFailed { get; } = new DeployStatus("pre_deploy_failed");

        public static bool operator ==(DeployStatus left, DeployStatus right) => left.Equals(right);
        public static bool operator !=(DeployStatus left, DeployStatus right) => !left.Equals(right);

        public static explicit operator string(DeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployStatus other && Equals(other);
        public bool Equals(DeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployTrigger : IEquatable<DeployTrigger>
    {
        private readonly string _value;

        private DeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployTrigger Api { get; } = new DeployTrigger("api");
        public static DeployTrigger BlueprintSync { get; } = new DeployTrigger("blueprint_sync");
        public static DeployTrigger DeployHook { get; } = new DeployTrigger("deploy_hook");
        public static DeployTrigger DeployedByRender { get; } = new DeployTrigger("deployed_by_render");
        public static DeployTrigger Manual { get; } = new DeployTrigger("manual");
        public static DeployTrigger Other { get; } = new DeployTrigger("other");
        public static DeployTrigger NewCommit { get; } = new DeployTrigger("new_commit");
        public static DeployTrigger Rollback { get; } = new DeployTrigger("rollback");
        public static DeployTrigger ServiceResumed { get; } = new DeployTrigger("service_resumed");
        public static DeployTrigger ServiceUpdated { get; } = new DeployTrigger("service_updated");

        public static bool operator ==(DeployTrigger left, DeployTrigger right) => left.Equals(right);
        public static bool operator !=(DeployTrigger left, DeployTrigger right) => !left.Equals(right);

        public static explicit operator string(DeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployTrigger other && Equals(other);
        public bool Equals(DeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct PreviewServicePlan : IEquatable<PreviewServicePlan>
    {
        private readonly string _value;

        private PreviewServicePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreviewServicePlan Starter { get; } = new PreviewServicePlan("starter");
        public static PreviewServicePlan StarterPlus { get; } = new PreviewServicePlan("starter_plus");
        public static PreviewServicePlan Standard { get; } = new PreviewServicePlan("standard");
        public static PreviewServicePlan StandardPlus { get; } = new PreviewServicePlan("standard_plus");
        public static PreviewServicePlan Pro { get; } = new PreviewServicePlan("pro");
        public static PreviewServicePlan ProPlus { get; } = new PreviewServicePlan("pro_plus");
        public static PreviewServicePlan ProMax { get; } = new PreviewServicePlan("pro_max");
        public static PreviewServicePlan ProUltra { get; } = new PreviewServicePlan("pro_ultra");
        public static PreviewServicePlan Free { get; } = new PreviewServicePlan("free");
        public static PreviewServicePlan Custom { get; } = new PreviewServicePlan("custom");

        public static bool operator ==(PreviewServicePlan left, PreviewServicePlan right) => left.Equals(right);
        public static bool operator !=(PreviewServicePlan left, PreviewServicePlan right) => !left.Equals(right);

        public static explicit operator string(PreviewServicePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreviewServicePlan other && Equals(other);
        public bool Equals(PreviewServicePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsEnv : IEquatable<PrivateServiceDetailsEnv>
    {
        private readonly string _value;

        private PrivateServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsEnv Docker { get; } = new PrivateServiceDetailsEnv("docker");
        public static PrivateServiceDetailsEnv Elixir { get; } = new PrivateServiceDetailsEnv("elixir");
        public static PrivateServiceDetailsEnv Go { get; } = new PrivateServiceDetailsEnv("go");
        public static PrivateServiceDetailsEnv Node { get; } = new PrivateServiceDetailsEnv("node");
        public static PrivateServiceDetailsEnv Python { get; } = new PrivateServiceDetailsEnv("python");
        public static PrivateServiceDetailsEnv Ruby { get; } = new PrivateServiceDetailsEnv("ruby");
        public static PrivateServiceDetailsEnv Rust { get; } = new PrivateServiceDetailsEnv("rust");
        public static PrivateServiceDetailsEnv Image { get; } = new PrivateServiceDetailsEnv("image");

        public static bool operator ==(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsEnv other && Equals(other);
        public bool Equals(PrivateServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsPlan : IEquatable<PrivateServiceDetailsPlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPlan Starter { get; } = new PrivateServiceDetailsPlan("starter");
        public static PrivateServiceDetailsPlan StarterPlus { get; } = new PrivateServiceDetailsPlan("starter_plus");
        public static PrivateServiceDetailsPlan Standard { get; } = new PrivateServiceDetailsPlan("standard");
        public static PrivateServiceDetailsPlan StandardPlus { get; } = new PrivateServiceDetailsPlan("standard_plus");
        public static PrivateServiceDetailsPlan Pro { get; } = new PrivateServiceDetailsPlan("pro");
        public static PrivateServiceDetailsPlan ProPlus { get; } = new PrivateServiceDetailsPlan("pro_plus");
        public static PrivateServiceDetailsPlan ProMax { get; } = new PrivateServiceDetailsPlan("pro_max");
        public static PrivateServiceDetailsPlan ProUltra { get; } = new PrivateServiceDetailsPlan("pro_ultra");
        public static PrivateServiceDetailsPlan Free { get; } = new PrivateServiceDetailsPlan("free");
        public static PrivateServiceDetailsPlan Custom { get; } = new PrivateServiceDetailsPlan("custom");

        public static bool operator ==(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsPullRequestPreviewsEnabled : IEquatable<PrivateServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("yes");
        public static PrivateServiceDetailsPullRequestPreviewsEnabled No { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsRegion : IEquatable<PrivateServiceDetailsRegion>
    {
        private readonly string _value;

        private PrivateServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsRegion Frankfurt { get; } = new PrivateServiceDetailsRegion("frankfurt");
        public static PrivateServiceDetailsRegion Oregon { get; } = new PrivateServiceDetailsRegion("oregon");
        public static PrivateServiceDetailsRegion Ohio { get; } = new PrivateServiceDetailsRegion("ohio");
        public static PrivateServiceDetailsRegion Singapore { get; } = new PrivateServiceDetailsRegion("singapore");

        public static bool operator ==(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsRegion other && Equals(other);
        public bool Equals(PrivateServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The registry to use this credential with
    /// </summary>
    [EnumType]
    public readonly struct RegistryCredentialRegistry : IEquatable<RegistryCredentialRegistry>
    {
        private readonly string _value;

        private RegistryCredentialRegistry(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryCredentialRegistry Github { get; } = new RegistryCredentialRegistry("GITHUB");
        public static RegistryCredentialRegistry Gitlab { get; } = new RegistryCredentialRegistry("GITLAB");
        public static RegistryCredentialRegistry Docker { get; } = new RegistryCredentialRegistry("DOCKER");

        public static bool operator ==(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => left.Equals(right);
        public static bool operator !=(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => !left.Equals(right);

        public static explicit operator string(RegistryCredentialRegistry value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryCredentialRegistry other && Equals(other);
        public bool Equals(RegistryCredentialRegistry other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RollbackDeployStatus : IEquatable<RollbackDeployStatus>
    {
        private readonly string _value;

        private RollbackDeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RollbackDeployStatus Created { get; } = new RollbackDeployStatus("created");
        public static RollbackDeployStatus BuildInProgress { get; } = new RollbackDeployStatus("build_in_progress");
        public static RollbackDeployStatus UpdateInProgress { get; } = new RollbackDeployStatus("update_in_progress");
        public static RollbackDeployStatus Live { get; } = new RollbackDeployStatus("live");
        public static RollbackDeployStatus Deactivated { get; } = new RollbackDeployStatus("deactivated");
        public static RollbackDeployStatus BuildFailed { get; } = new RollbackDeployStatus("build_failed");
        public static RollbackDeployStatus UpdateFailed { get; } = new RollbackDeployStatus("update_failed");
        public static RollbackDeployStatus Canceled { get; } = new RollbackDeployStatus("canceled");
        public static RollbackDeployStatus PreDeployInProgress { get; } = new RollbackDeployStatus("pre_deploy_in_progress");
        public static RollbackDeployStatus PreDeployFailed { get; } = new RollbackDeployStatus("pre_deploy_failed");

        public static bool operator ==(RollbackDeployStatus left, RollbackDeployStatus right) => left.Equals(right);
        public static bool operator !=(RollbackDeployStatus left, RollbackDeployStatus right) => !left.Equals(right);

        public static explicit operator string(RollbackDeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RollbackDeployStatus other && Equals(other);
        public bool Equals(RollbackDeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RollbackDeployTrigger : IEquatable<RollbackDeployTrigger>
    {
        private readonly string _value;

        private RollbackDeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RollbackDeployTrigger Api { get; } = new RollbackDeployTrigger("api");
        public static RollbackDeployTrigger BlueprintSync { get; } = new RollbackDeployTrigger("blueprint_sync");
        public static RollbackDeployTrigger DeployHook { get; } = new RollbackDeployTrigger("deploy_hook");
        public static RollbackDeployTrigger DeployedByRender { get; } = new RollbackDeployTrigger("deployed_by_render");
        public static RollbackDeployTrigger Manual { get; } = new RollbackDeployTrigger("manual");
        public static RollbackDeployTrigger Other { get; } = new RollbackDeployTrigger("other");
        public static RollbackDeployTrigger NewCommit { get; } = new RollbackDeployTrigger("new_commit");
        public static RollbackDeployTrigger Rollback { get; } = new RollbackDeployTrigger("rollback");
        public static RollbackDeployTrigger ServiceResumed { get; } = new RollbackDeployTrigger("service_resumed");
        public static RollbackDeployTrigger ServiceUpdated { get; } = new RollbackDeployTrigger("service_updated");

        public static bool operator ==(RollbackDeployTrigger left, RollbackDeployTrigger right) => left.Equals(right);
        public static bool operator !=(RollbackDeployTrigger left, RollbackDeployTrigger right) => !left.Equals(right);

        public static explicit operator string(RollbackDeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RollbackDeployTrigger other && Equals(other);
        public bool Equals(RollbackDeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerPortProtocol : IEquatable<ServerPortProtocol>
    {
        private readonly string _value;

        private ServerPortProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPortProtocol Tcp { get; } = new ServerPortProtocol("TCP");
        public static ServerPortProtocol Udp { get; } = new ServerPortProtocol("UDP");

        public static bool operator ==(ServerPortProtocol left, ServerPortProtocol right) => left.Equals(right);
        public static bool operator !=(ServerPortProtocol left, ServerPortProtocol right) => !left.Equals(right);

        public static explicit operator string(ServerPortProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPortProtocol other && Equals(other);
        public bool Equals(ServerPortProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceAutoDeploy : IEquatable<ServiceAutoDeploy>
    {
        private readonly string _value;

        private ServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceAutoDeploy Yes { get; } = new ServiceAutoDeploy("yes");
        public static ServiceAutoDeploy No { get; } = new ServiceAutoDeploy("no");

        public static bool operator ==(ServiceAutoDeploy left, ServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(ServiceAutoDeploy left, ServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(ServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceAutoDeploy other && Equals(other);
        public bool Equals(ServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct ServiceBackgroundWorkerDetailsCreateEnv : IEquatable<ServiceBackgroundWorkerDetailsCreateEnv>
    {
        private readonly string _value;

        private ServiceBackgroundWorkerDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBackgroundWorkerDetailsCreateEnv Docker { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("docker");
        public static ServiceBackgroundWorkerDetailsCreateEnv Elixir { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("elixir");
        public static ServiceBackgroundWorkerDetailsCreateEnv Go { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("go");
        public static ServiceBackgroundWorkerDetailsCreateEnv Node { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("node");
        public static ServiceBackgroundWorkerDetailsCreateEnv Python { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("python");
        public static ServiceBackgroundWorkerDetailsCreateEnv Ruby { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("ruby");
        public static ServiceBackgroundWorkerDetailsCreateEnv Rust { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("rust");
        public static ServiceBackgroundWorkerDetailsCreateEnv Image { get; } = new ServiceBackgroundWorkerDetailsCreateEnv("image");

        public static bool operator ==(ServiceBackgroundWorkerDetailsCreateEnv left, ServiceBackgroundWorkerDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(ServiceBackgroundWorkerDetailsCreateEnv left, ServiceBackgroundWorkerDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(ServiceBackgroundWorkerDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBackgroundWorkerDetailsCreateEnv other && Equals(other);
        public bool Equals(ServiceBackgroundWorkerDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceBackgroundWorkerDetailsCreatePlan : IEquatable<ServiceBackgroundWorkerDetailsCreatePlan>
    {
        private readonly string _value;

        private ServiceBackgroundWorkerDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBackgroundWorkerDetailsCreatePlan Starter { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("starter");
        public static ServiceBackgroundWorkerDetailsCreatePlan Standard { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("standard");
        public static ServiceBackgroundWorkerDetailsCreatePlan Pro { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("pro");
        public static ServiceBackgroundWorkerDetailsCreatePlan ProPlus { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("pro_plus");
        public static ServiceBackgroundWorkerDetailsCreatePlan ProMax { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("pro_max");
        public static ServiceBackgroundWorkerDetailsCreatePlan ProUltra { get; } = new ServiceBackgroundWorkerDetailsCreatePlan("pro_ultra");

        public static bool operator ==(ServiceBackgroundWorkerDetailsCreatePlan left, ServiceBackgroundWorkerDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(ServiceBackgroundWorkerDetailsCreatePlan left, ServiceBackgroundWorkerDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(ServiceBackgroundWorkerDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBackgroundWorkerDetailsCreatePlan other && Equals(other);
        public bool Equals(ServiceBackgroundWorkerDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled : IEquatable<ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled("yes");
        public static ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled No { get; } = new ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled left, ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled left, ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServiceBackgroundWorkerDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceBackgroundWorkerDetailsCreateRegion : IEquatable<ServiceBackgroundWorkerDetailsCreateRegion>
    {
        private readonly string _value;

        private ServiceBackgroundWorkerDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceBackgroundWorkerDetailsCreateRegion Frankfurt { get; } = new ServiceBackgroundWorkerDetailsCreateRegion("frankfurt");
        public static ServiceBackgroundWorkerDetailsCreateRegion Oregon { get; } = new ServiceBackgroundWorkerDetailsCreateRegion("oregon");
        public static ServiceBackgroundWorkerDetailsCreateRegion Ohio { get; } = new ServiceBackgroundWorkerDetailsCreateRegion("ohio");
        public static ServiceBackgroundWorkerDetailsCreateRegion Singapore { get; } = new ServiceBackgroundWorkerDetailsCreateRegion("singapore");

        public static bool operator ==(ServiceBackgroundWorkerDetailsCreateRegion left, ServiceBackgroundWorkerDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(ServiceBackgroundWorkerDetailsCreateRegion left, ServiceBackgroundWorkerDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(ServiceBackgroundWorkerDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceBackgroundWorkerDetailsCreateRegion other && Equals(other);
        public bool Equals(ServiceBackgroundWorkerDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct ServiceCronJobDetailsCreateEnv : IEquatable<ServiceCronJobDetailsCreateEnv>
    {
        private readonly string _value;

        private ServiceCronJobDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCronJobDetailsCreateEnv Docker { get; } = new ServiceCronJobDetailsCreateEnv("docker");
        public static ServiceCronJobDetailsCreateEnv Elixir { get; } = new ServiceCronJobDetailsCreateEnv("elixir");
        public static ServiceCronJobDetailsCreateEnv Go { get; } = new ServiceCronJobDetailsCreateEnv("go");
        public static ServiceCronJobDetailsCreateEnv Node { get; } = new ServiceCronJobDetailsCreateEnv("node");
        public static ServiceCronJobDetailsCreateEnv Python { get; } = new ServiceCronJobDetailsCreateEnv("python");
        public static ServiceCronJobDetailsCreateEnv Ruby { get; } = new ServiceCronJobDetailsCreateEnv("ruby");
        public static ServiceCronJobDetailsCreateEnv Rust { get; } = new ServiceCronJobDetailsCreateEnv("rust");
        public static ServiceCronJobDetailsCreateEnv Image { get; } = new ServiceCronJobDetailsCreateEnv("image");

        public static bool operator ==(ServiceCronJobDetailsCreateEnv left, ServiceCronJobDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(ServiceCronJobDetailsCreateEnv left, ServiceCronJobDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(ServiceCronJobDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCronJobDetailsCreateEnv other && Equals(other);
        public bool Equals(ServiceCronJobDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceCronJobDetailsCreatePlan : IEquatable<ServiceCronJobDetailsCreatePlan>
    {
        private readonly string _value;

        private ServiceCronJobDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCronJobDetailsCreatePlan Starter { get; } = new ServiceCronJobDetailsCreatePlan("starter");
        public static ServiceCronJobDetailsCreatePlan Standard { get; } = new ServiceCronJobDetailsCreatePlan("standard");
        public static ServiceCronJobDetailsCreatePlan Pro { get; } = new ServiceCronJobDetailsCreatePlan("pro");
        public static ServiceCronJobDetailsCreatePlan ProPlus { get; } = new ServiceCronJobDetailsCreatePlan("pro_plus");
        public static ServiceCronJobDetailsCreatePlan ProMax { get; } = new ServiceCronJobDetailsCreatePlan("pro_max");
        public static ServiceCronJobDetailsCreatePlan ProUltra { get; } = new ServiceCronJobDetailsCreatePlan("pro_ultra");

        public static bool operator ==(ServiceCronJobDetailsCreatePlan left, ServiceCronJobDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(ServiceCronJobDetailsCreatePlan left, ServiceCronJobDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(ServiceCronJobDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCronJobDetailsCreatePlan other && Equals(other);
        public bool Equals(ServiceCronJobDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceCronJobDetailsCreateRegion : IEquatable<ServiceCronJobDetailsCreateRegion>
    {
        private readonly string _value;

        private ServiceCronJobDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceCronJobDetailsCreateRegion Frankfurt { get; } = new ServiceCronJobDetailsCreateRegion("frankfurt");
        public static ServiceCronJobDetailsCreateRegion Oregon { get; } = new ServiceCronJobDetailsCreateRegion("oregon");
        public static ServiceCronJobDetailsCreateRegion Ohio { get; } = new ServiceCronJobDetailsCreateRegion("ohio");
        public static ServiceCronJobDetailsCreateRegion Singapore { get; } = new ServiceCronJobDetailsCreateRegion("singapore");

        public static bool operator ==(ServiceCronJobDetailsCreateRegion left, ServiceCronJobDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(ServiceCronJobDetailsCreateRegion left, ServiceCronJobDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(ServiceCronJobDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceCronJobDetailsCreateRegion other && Equals(other);
        public bool Equals(ServiceCronJobDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceNotifyOnFail : IEquatable<ServiceNotifyOnFail>
    {
        private readonly string _value;

        private ServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNotifyOnFail Default { get; } = new ServiceNotifyOnFail("default");
        public static ServiceNotifyOnFail Notify { get; } = new ServiceNotifyOnFail("notify");
        public static ServiceNotifyOnFail Ignore { get; } = new ServiceNotifyOnFail("ignore");

        public static bool operator ==(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(ServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNotifyOnFail other && Equals(other);
        public bool Equals(ServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct ServicePrivateServiceDetailsCreateEnv : IEquatable<ServicePrivateServiceDetailsCreateEnv>
    {
        private readonly string _value;

        private ServicePrivateServiceDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServicePrivateServiceDetailsCreateEnv Docker { get; } = new ServicePrivateServiceDetailsCreateEnv("docker");
        public static ServicePrivateServiceDetailsCreateEnv Elixir { get; } = new ServicePrivateServiceDetailsCreateEnv("elixir");
        public static ServicePrivateServiceDetailsCreateEnv Go { get; } = new ServicePrivateServiceDetailsCreateEnv("go");
        public static ServicePrivateServiceDetailsCreateEnv Node { get; } = new ServicePrivateServiceDetailsCreateEnv("node");
        public static ServicePrivateServiceDetailsCreateEnv Python { get; } = new ServicePrivateServiceDetailsCreateEnv("python");
        public static ServicePrivateServiceDetailsCreateEnv Ruby { get; } = new ServicePrivateServiceDetailsCreateEnv("ruby");
        public static ServicePrivateServiceDetailsCreateEnv Rust { get; } = new ServicePrivateServiceDetailsCreateEnv("rust");
        public static ServicePrivateServiceDetailsCreateEnv Image { get; } = new ServicePrivateServiceDetailsCreateEnv("image");

        public static bool operator ==(ServicePrivateServiceDetailsCreateEnv left, ServicePrivateServiceDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(ServicePrivateServiceDetailsCreateEnv left, ServicePrivateServiceDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(ServicePrivateServiceDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServicePrivateServiceDetailsCreateEnv other && Equals(other);
        public bool Equals(ServicePrivateServiceDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServicePrivateServiceDetailsCreatePlan : IEquatable<ServicePrivateServiceDetailsCreatePlan>
    {
        private readonly string _value;

        private ServicePrivateServiceDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServicePrivateServiceDetailsCreatePlan Starter { get; } = new ServicePrivateServiceDetailsCreatePlan("starter");
        public static ServicePrivateServiceDetailsCreatePlan Standard { get; } = new ServicePrivateServiceDetailsCreatePlan("standard");
        public static ServicePrivateServiceDetailsCreatePlan Pro { get; } = new ServicePrivateServiceDetailsCreatePlan("pro");
        public static ServicePrivateServiceDetailsCreatePlan ProPlus { get; } = new ServicePrivateServiceDetailsCreatePlan("pro_plus");
        public static ServicePrivateServiceDetailsCreatePlan ProMax { get; } = new ServicePrivateServiceDetailsCreatePlan("pro_max");
        public static ServicePrivateServiceDetailsCreatePlan ProUltra { get; } = new ServicePrivateServiceDetailsCreatePlan("pro_ultra");

        public static bool operator ==(ServicePrivateServiceDetailsCreatePlan left, ServicePrivateServiceDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(ServicePrivateServiceDetailsCreatePlan left, ServicePrivateServiceDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(ServicePrivateServiceDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServicePrivateServiceDetailsCreatePlan other && Equals(other);
        public bool Equals(ServicePrivateServiceDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled : IEquatable<ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled("yes");
        public static ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled No { get; } = new ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled left, ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled left, ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServicePrivateServiceDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServicePrivateServiceDetailsCreateRegion : IEquatable<ServicePrivateServiceDetailsCreateRegion>
    {
        private readonly string _value;

        private ServicePrivateServiceDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServicePrivateServiceDetailsCreateRegion Frankfurt { get; } = new ServicePrivateServiceDetailsCreateRegion("frankfurt");
        public static ServicePrivateServiceDetailsCreateRegion Oregon { get; } = new ServicePrivateServiceDetailsCreateRegion("oregon");
        public static ServicePrivateServiceDetailsCreateRegion Ohio { get; } = new ServicePrivateServiceDetailsCreateRegion("ohio");
        public static ServicePrivateServiceDetailsCreateRegion Singapore { get; } = new ServicePrivateServiceDetailsCreateRegion("singapore");

        public static bool operator ==(ServicePrivateServiceDetailsCreateRegion left, ServicePrivateServiceDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(ServicePrivateServiceDetailsCreateRegion left, ServicePrivateServiceDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(ServicePrivateServiceDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServicePrivateServiceDetailsCreateRegion other && Equals(other);
        public bool Equals(ServicePrivateServiceDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceRouteType : IEquatable<ServiceRouteType>
    {
        private readonly string _value;

        private ServiceRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceRouteType Redirect { get; } = new ServiceRouteType("redirect");
        public static ServiceRouteType Rewrite { get; } = new ServiceRouteType("rewrite");

        public static bool operator ==(ServiceRouteType left, ServiceRouteType right) => left.Equals(right);
        public static bool operator !=(ServiceRouteType left, ServiceRouteType right) => !left.Equals(right);

        public static explicit operator string(ServiceRouteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceRouteType other && Equals(other);
        public bool Equals(ServiceRouteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled : IEquatable<ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled("yes");
        public static ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled No { get; } = new ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled left, ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled left, ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServiceStaticSiteDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspended : IEquatable<ServiceSuspended>
    {
        private readonly string _value;

        private ServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspended Suspended { get; } = new ServiceSuspended("suspended");
        public static ServiceSuspended NotSuspended { get; } = new ServiceSuspended("not_suspended");

        public static bool operator ==(ServiceSuspended left, ServiceSuspended right) => left.Equals(right);
        public static bool operator !=(ServiceSuspended left, ServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspended other && Equals(other);
        public bool Equals(ServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspendersItem : IEquatable<ServiceSuspendersItem>
    {
        private readonly string _value;

        private ServiceSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspendersItem Admin { get; } = new ServiceSuspendersItem("admin");
        public static ServiceSuspendersItem Billing { get; } = new ServiceSuspendersItem("billing");
        public static ServiceSuspendersItem User { get; } = new ServiceSuspendersItem("user");
        public static ServiceSuspendersItem ParentService { get; } = new ServiceSuspendersItem("parent_service");
        public static ServiceSuspendersItem Unknown { get; } = new ServiceSuspendersItem("unknown");

        public static bool operator ==(ServiceSuspendersItem left, ServiceSuspendersItem right) => left.Equals(right);
        public static bool operator !=(ServiceSuspendersItem left, ServiceSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspendersItem other && Equals(other);
        public bool Equals(ServiceSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType StaticSite { get; } = new ServiceType("static_site");
        public static ServiceType WebService { get; } = new ServiceType("web_service");
        public static ServiceType PrivateService { get; } = new ServiceType("private_service");
        public static ServiceType BackgroundWorker { get; } = new ServiceType("background_worker");
        public static ServiceType CronJob { get; } = new ServiceType("cron_job");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct ServiceWebServiceDetailsCreateEnv : IEquatable<ServiceWebServiceDetailsCreateEnv>
    {
        private readonly string _value;

        private ServiceWebServiceDetailsCreateEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceDetailsCreateEnv Docker { get; } = new ServiceWebServiceDetailsCreateEnv("docker");
        public static ServiceWebServiceDetailsCreateEnv Elixir { get; } = new ServiceWebServiceDetailsCreateEnv("elixir");
        public static ServiceWebServiceDetailsCreateEnv Go { get; } = new ServiceWebServiceDetailsCreateEnv("go");
        public static ServiceWebServiceDetailsCreateEnv Node { get; } = new ServiceWebServiceDetailsCreateEnv("node");
        public static ServiceWebServiceDetailsCreateEnv Python { get; } = new ServiceWebServiceDetailsCreateEnv("python");
        public static ServiceWebServiceDetailsCreateEnv Ruby { get; } = new ServiceWebServiceDetailsCreateEnv("ruby");
        public static ServiceWebServiceDetailsCreateEnv Rust { get; } = new ServiceWebServiceDetailsCreateEnv("rust");
        public static ServiceWebServiceDetailsCreateEnv Image { get; } = new ServiceWebServiceDetailsCreateEnv("image");

        public static bool operator ==(ServiceWebServiceDetailsCreateEnv left, ServiceWebServiceDetailsCreateEnv right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceDetailsCreateEnv left, ServiceWebServiceDetailsCreateEnv right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceDetailsCreateEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceDetailsCreateEnv other && Equals(other);
        public bool Equals(ServiceWebServiceDetailsCreateEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServiceDetailsCreatePlan : IEquatable<ServiceWebServiceDetailsCreatePlan>
    {
        private readonly string _value;

        private ServiceWebServiceDetailsCreatePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceDetailsCreatePlan Starter { get; } = new ServiceWebServiceDetailsCreatePlan("starter");
        public static ServiceWebServiceDetailsCreatePlan Standard { get; } = new ServiceWebServiceDetailsCreatePlan("standard");
        public static ServiceWebServiceDetailsCreatePlan Pro { get; } = new ServiceWebServiceDetailsCreatePlan("pro");
        public static ServiceWebServiceDetailsCreatePlan ProPlus { get; } = new ServiceWebServiceDetailsCreatePlan("pro_plus");
        public static ServiceWebServiceDetailsCreatePlan ProMax { get; } = new ServiceWebServiceDetailsCreatePlan("pro_max");
        public static ServiceWebServiceDetailsCreatePlan ProUltra { get; } = new ServiceWebServiceDetailsCreatePlan("pro_ultra");

        public static bool operator ==(ServiceWebServiceDetailsCreatePlan left, ServiceWebServiceDetailsCreatePlan right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceDetailsCreatePlan left, ServiceWebServiceDetailsCreatePlan right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceDetailsCreatePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceDetailsCreatePlan other && Equals(other);
        public bool Equals(ServiceWebServiceDetailsCreatePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled : IEquatable<ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled Yes { get; } = new ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled("yes");
        public static ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled No { get; } = new ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled left, ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled left, ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServiceWebServiceDetailsCreatePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServiceDetailsCreateRegion : IEquatable<ServiceWebServiceDetailsCreateRegion>
    {
        private readonly string _value;

        private ServiceWebServiceDetailsCreateRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceDetailsCreateRegion Frankfurt { get; } = new ServiceWebServiceDetailsCreateRegion("frankfurt");
        public static ServiceWebServiceDetailsCreateRegion Oregon { get; } = new ServiceWebServiceDetailsCreateRegion("oregon");
        public static ServiceWebServiceDetailsCreateRegion Ohio { get; } = new ServiceWebServiceDetailsCreateRegion("ohio");
        public static ServiceWebServiceDetailsCreateRegion Singapore { get; } = new ServiceWebServiceDetailsCreateRegion("singapore");

        public static bool operator ==(ServiceWebServiceDetailsCreateRegion left, ServiceWebServiceDetailsCreateRegion right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceDetailsCreateRegion left, ServiceWebServiceDetailsCreateRegion right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceDetailsCreateRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceDetailsCreateRegion other && Equals(other);
        public bool Equals(ServiceWebServiceDetailsCreateRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteDetailsPullRequestPreviewsEnabled : IEquatable<StaticSiteDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSiteDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteDetailsPullRequestPreviewsEnabled Yes { get; } = new StaticSiteDetailsPullRequestPreviewsEnabled("yes");
        public static StaticSiteDetailsPullRequestPreviewsEnabled No { get; } = new StaticSiteDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSiteDetailsPullRequestPreviewsEnabled left, StaticSiteDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSiteDetailsPullRequestPreviewsEnabled left, StaticSiteDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSiteDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSiteDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsEnv : IEquatable<WebServiceDetailsEnv>
    {
        private readonly string _value;

        private WebServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsEnv Docker { get; } = new WebServiceDetailsEnv("docker");
        public static WebServiceDetailsEnv Elixir { get; } = new WebServiceDetailsEnv("elixir");
        public static WebServiceDetailsEnv Go { get; } = new WebServiceDetailsEnv("go");
        public static WebServiceDetailsEnv Node { get; } = new WebServiceDetailsEnv("node");
        public static WebServiceDetailsEnv Python { get; } = new WebServiceDetailsEnv("python");
        public static WebServiceDetailsEnv Ruby { get; } = new WebServiceDetailsEnv("ruby");
        public static WebServiceDetailsEnv Rust { get; } = new WebServiceDetailsEnv("rust");
        public static WebServiceDetailsEnv Image { get; } = new WebServiceDetailsEnv("image");

        public static bool operator ==(WebServiceDetailsEnv left, WebServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsEnv left, WebServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsEnv other && Equals(other);
        public bool Equals(WebServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsPlan : IEquatable<WebServiceDetailsPlan>
    {
        private readonly string _value;

        private WebServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsPlan Starter { get; } = new WebServiceDetailsPlan("starter");
        public static WebServiceDetailsPlan StarterPlus { get; } = new WebServiceDetailsPlan("starter_plus");
        public static WebServiceDetailsPlan Standard { get; } = new WebServiceDetailsPlan("standard");
        public static WebServiceDetailsPlan StandardPlus { get; } = new WebServiceDetailsPlan("standard_plus");
        public static WebServiceDetailsPlan Pro { get; } = new WebServiceDetailsPlan("pro");
        public static WebServiceDetailsPlan ProPlus { get; } = new WebServiceDetailsPlan("pro_plus");
        public static WebServiceDetailsPlan ProMax { get; } = new WebServiceDetailsPlan("pro_max");
        public static WebServiceDetailsPlan ProUltra { get; } = new WebServiceDetailsPlan("pro_ultra");
        public static WebServiceDetailsPlan Free { get; } = new WebServiceDetailsPlan("free");
        public static WebServiceDetailsPlan Custom { get; } = new WebServiceDetailsPlan("custom");

        public static bool operator ==(WebServiceDetailsPlan left, WebServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsPlan left, WebServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsPlan other && Equals(other);
        public bool Equals(WebServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceDetailsPullRequestPreviewsEnabled : IEquatable<WebServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new WebServiceDetailsPullRequestPreviewsEnabled("yes");
        public static WebServiceDetailsPullRequestPreviewsEnabled No { get; } = new WebServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServiceDetailsPullRequestPreviewsEnabled left, WebServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsPullRequestPreviewsEnabled left, WebServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceDetailsRegion : IEquatable<WebServiceDetailsRegion>
    {
        private readonly string _value;

        private WebServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsRegion Frankfurt { get; } = new WebServiceDetailsRegion("frankfurt");
        public static WebServiceDetailsRegion Oregon { get; } = new WebServiceDetailsRegion("oregon");
        public static WebServiceDetailsRegion Ohio { get; } = new WebServiceDetailsRegion("ohio");
        public static WebServiceDetailsRegion Singapore { get; } = new WebServiceDetailsRegion("singapore");

        public static bool operator ==(WebServiceDetailsRegion left, WebServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsRegion left, WebServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsRegion other && Equals(other);
        public bool Equals(WebServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
