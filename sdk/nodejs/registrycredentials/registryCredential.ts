// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class RegistryCredential extends pulumi.CustomResource {
    /**
     * Get an existing RegistryCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RegistryCredential {
        return new RegistryCredential(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:registrycredentials:RegistryCredential';

    /**
     * Returns true if the given object is an instance of RegistryCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryCredential.__pulumiType;
    }

    declare public readonly authToken: pulumi.Output<string>;
    /**
     * Descriptive name for this credential
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly ownerId: pulumi.Output<string>;
    /**
     * The registry to use this credential with
     */
    declare public readonly registry: pulumi.Output<enums.registrycredentials.Registry>;
    /**
     * Last updated time for the credential
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The username associated with the credential
     */
    declare public readonly username: pulumi.Output<string>;

    /**
     * Create a RegistryCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryCredentialArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.authToken === undefined && !opts.urn) {
                throw new Error("Missing required property 'authToken'");
            }
            if (args?.ownerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            if (args?.registry === undefined && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if (args?.username === undefined && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authToken"] = args?.authToken;
            resourceInputs["name"] = args?.name;
            resourceInputs["ownerId"] = args?.ownerId;
            resourceInputs["registry"] = args?.registry;
            resourceInputs["username"] = args?.username;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["authToken"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["registry"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryCredential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RegistryCredential resource.
 */
export interface RegistryCredentialArgs {
    authToken: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    /**
     * The registry to use this credential with
     */
    registry: pulumi.Input<enums.registrycredentials.Registry>;
    username: pulumi.Input<string>;
}
