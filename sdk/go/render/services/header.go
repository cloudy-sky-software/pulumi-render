// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Header struct {
	pulumi.CustomResourceState

	Headers HeaderTypePtrOutput `pulumi:"headers"`
	// Header name
	Name pulumi.StringOutput `pulumi:"name"`
	// The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
	Path pulumi.StringOutput `pulumi:"path"`
	// Header value
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewHeader registers a new resource with the given unique name, arguments, and options.
func NewHeader(ctx *pulumi.Context,
	name string, args *HeaderArgs, opts ...pulumi.ResourceOption) (*Header, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Header
	err := ctx.RegisterResource("render:services:Header", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeader gets an existing Header resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeaderState, opts ...pulumi.ResourceOption) (*Header, error) {
	var resource Header
	err := ctx.ReadResource("render:services:Header", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Header resources.
type headerState struct {
}

type HeaderState struct {
}

func (HeaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*headerState)(nil)).Elem()
}

type headerArgs struct {
	// Header name
	Name *string `pulumi:"name"`
	// The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
	Path string `pulumi:"path"`
	// The ID of the service
	ServiceId *string `pulumi:"serviceId"`
	// Header value
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Header resource.
type HeaderArgs struct {
	// Header name
	Name pulumi.StringPtrInput
	// The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
	Path pulumi.StringInput
	// The ID of the service
	ServiceId pulumi.StringPtrInput
	// Header value
	Value pulumi.StringInput
}

func (HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*headerArgs)(nil)).Elem()
}

type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(ctx context.Context) HeaderOutput
}

func (*Header) ElementType() reflect.Type {
	return reflect.TypeOf((**Header)(nil)).Elem()
}

func (i *Header) ToHeaderOutput() HeaderOutput {
	return i.ToHeaderOutputWithContext(context.Background())
}

func (i *Header) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput)
}

type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

func (o HeaderOutput) Headers() HeaderTypePtrOutput {
	return o.ApplyT(func(v *Header) HeaderTypePtrOutput { return v.Headers }).(HeaderTypePtrOutput)
}

// Header name
func (o HeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Header) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
func (o HeaderOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Header) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Header value
func (o HeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Header) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeaderInput)(nil)).Elem(), &Header{})
	pulumi.RegisterOutputType(HeaderOutput{})
}
