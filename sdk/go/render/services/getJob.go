// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetJob(ctx *pulumi.Context, args *GetJobArgs, opts ...pulumi.InvokeOption) (*GetJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetJobResult
	err := ctx.Invoke("render:services:getJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetJobArgs struct {
	// (Required) The ID of the job
	Id string `pulumi:"id"`
	// (Required) The ID of the service
	ServiceId string `pulumi:"serviceId"`
}

type GetJobResult struct {
	Items Job `pulumi:"items"`
}

func GetJobOutput(ctx *pulumi.Context, args GetJobOutputArgs, opts ...pulumi.InvokeOption) GetJobResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetJobResult, error) {
			args := v.(GetJobArgs)
			r, err := GetJob(ctx, &args, opts...)
			var s GetJobResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetJobResultOutput)
}

type GetJobOutputArgs struct {
	// (Required) The ID of the job
	Id pulumi.StringInput `pulumi:"id"`
	// (Required) The ID of the service
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (GetJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobArgs)(nil)).Elem()
}

type GetJobResultOutput struct{ *pulumi.OutputState }

func (GetJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetJobResult)(nil)).Elem()
}

func (o GetJobResultOutput) ToGetJobResultOutput() GetJobResultOutput {
	return o
}

func (o GetJobResultOutput) ToGetJobResultOutputWithContext(ctx context.Context) GetJobResultOutput {
	return o
}

func (o GetJobResultOutput) Items() JobOutput {
	return o.ApplyT(func(v GetJobResult) Job { return v.Items }).(JobOutput)
}

func init() {
	pulumi.RegisterOutputType(GetJobResultOutput{})
}
