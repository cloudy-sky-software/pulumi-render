// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AutoscaleServiceArgs } from "./autoscaleService";
export type AutoscaleService = import("./autoscaleService").AutoscaleService;
export const AutoscaleService: typeof import("./autoscaleService").AutoscaleService = null as any;
utilities.lazyLoad(exports, ["AutoscaleService"], () => require("./autoscaleService"));

export { BackgroundWorkerArgs } from "./backgroundWorker";
export type BackgroundWorker = import("./backgroundWorker").BackgroundWorker;
export const BackgroundWorker: typeof import("./backgroundWorker").BackgroundWorker = null as any;
utilities.lazyLoad(exports, ["BackgroundWorker"], () => require("./backgroundWorker"));

export { CancelDeployArgs } from "./cancelDeploy";
export type CancelDeploy = import("./cancelDeploy").CancelDeploy;
export const CancelDeploy: typeof import("./cancelDeploy").CancelDeploy = null as any;
utilities.lazyLoad(exports, ["CancelDeploy"], () => require("./cancelDeploy"));

export { CancelJobArgs } from "./cancelJob";
export type CancelJob = import("./cancelJob").CancelJob;
export const CancelJob: typeof import("./cancelJob").CancelJob = null as any;
utilities.lazyLoad(exports, ["CancelJob"], () => require("./cancelJob"));

export { CronJobArgs } from "./cronJob";
export type CronJob = import("./cronJob").CronJob;
export const CronJob: typeof import("./cronJob").CronJob = null as any;
utilities.lazyLoad(exports, ["CronJob"], () => require("./cronJob"));

export { CustomDomainArgs } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { DeployArgs } from "./deploy";
export type Deploy = import("./deploy").Deploy;
export const Deploy: typeof import("./deploy").Deploy = null as any;
utilities.lazyLoad(exports, ["Deploy"], () => require("./deploy"));

export { EnvVarsForServiceArgs } from "./envVarsForService";
export type EnvVarsForService = import("./envVarsForService").EnvVarsForService;
export const EnvVarsForService: typeof import("./envVarsForService").EnvVarsForService = null as any;
utilities.lazyLoad(exports, ["EnvVarsForService"], () => require("./envVarsForService"));

export { GetBackgroundWorkerArgs, GetBackgroundWorkerOutputArgs } from "./getBackgroundWorker";
export const getBackgroundWorker: typeof import("./getBackgroundWorker").getBackgroundWorker = null as any;
export const getBackgroundWorkerOutput: typeof import("./getBackgroundWorker").getBackgroundWorkerOutput = null as any;
utilities.lazyLoad(exports, ["getBackgroundWorker","getBackgroundWorkerOutput"], () => require("./getBackgroundWorker"));

export { GetCronJobArgs, GetCronJobOutputArgs } from "./getCronJob";
export const getCronJob: typeof import("./getCronJob").getCronJob = null as any;
export const getCronJobOutput: typeof import("./getCronJob").getCronJobOutput = null as any;
utilities.lazyLoad(exports, ["getCronJob","getCronJobOutput"], () => require("./getCronJob"));

export { GetCustomDomainArgs, GetCustomDomainOutputArgs } from "./getCustomDomain";
export const getCustomDomain: typeof import("./getCustomDomain").getCustomDomain = null as any;
export const getCustomDomainOutput: typeof import("./getCustomDomain").getCustomDomainOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDomain","getCustomDomainOutput"], () => require("./getCustomDomain"));

export { GetDeployArgs, GetDeployOutputArgs } from "./getDeploy";
export const getDeploy: typeof import("./getDeploy").getDeploy = null as any;
export const getDeployOutput: typeof import("./getDeploy").getDeployOutput = null as any;
utilities.lazyLoad(exports, ["getDeploy","getDeployOutput"], () => require("./getDeploy"));

export { GetEnvVarArgs, GetEnvVarOutputArgs } from "./getEnvVar";
export const getEnvVar: typeof import("./getEnvVar").getEnvVar = null as any;
export const getEnvVarOutput: typeof import("./getEnvVar").getEnvVarOutput = null as any;
utilities.lazyLoad(exports, ["getEnvVar","getEnvVarOutput"], () => require("./getEnvVar"));

export { GetJobArgs, GetJobOutputArgs } from "./getJob";
export const getJob: typeof import("./getJob").getJob = null as any;
export const getJobOutput: typeof import("./getJob").getJobOutput = null as any;
utilities.lazyLoad(exports, ["getJob","getJobOutput"], () => require("./getJob"));

export { GetPrivateServiceArgs, GetPrivateServiceOutputArgs } from "./getPrivateService";
export const getPrivateService: typeof import("./getPrivateService").getPrivateService = null as any;
export const getPrivateServiceOutput: typeof import("./getPrivateService").getPrivateServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateService","getPrivateServiceOutput"], () => require("./getPrivateService"));

export { GetSecretFileArgs, GetSecretFileOutputArgs } from "./getSecretFile";
export const getSecretFile: typeof import("./getSecretFile").getSecretFile = null as any;
export const getSecretFileOutput: typeof import("./getSecretFile").getSecretFileOutput = null as any;
utilities.lazyLoad(exports, ["getSecretFile","getSecretFileOutput"], () => require("./getSecretFile"));

export { GetStaticSiteArgs, GetStaticSiteOutputArgs } from "./getStaticSite";
export const getStaticSite: typeof import("./getStaticSite").getStaticSite = null as any;
export const getStaticSiteOutput: typeof import("./getStaticSite").getStaticSiteOutput = null as any;
utilities.lazyLoad(exports, ["getStaticSite","getStaticSiteOutput"], () => require("./getStaticSite"));

export { GetWebServiceArgs, GetWebServiceOutputArgs } from "./getWebService";
export const getWebService: typeof import("./getWebService").getWebService = null as any;
export const getWebServiceOutput: typeof import("./getWebService").getWebServiceOutput = null as any;
utilities.lazyLoad(exports, ["getWebService","getWebServiceOutput"], () => require("./getWebService"));

export { HeaderArgs } from "./header";
export type Header = import("./header").Header;
export const Header: typeof import("./header").Header = null as any;
utilities.lazyLoad(exports, ["Header"], () => require("./header"));

export { JobArgs } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { ListCustomDomainsArgs, ListCustomDomainsResult, ListCustomDomainsOutputArgs } from "./listCustomDomains";
export const listCustomDomains: typeof import("./listCustomDomains").listCustomDomains = null as any;
export const listCustomDomainsOutput: typeof import("./listCustomDomains").listCustomDomainsOutput = null as any;
utilities.lazyLoad(exports, ["listCustomDomains","listCustomDomainsOutput"], () => require("./listCustomDomains"));

export { ListDeploysArgs, ListDeploysResult, ListDeploysOutputArgs } from "./listDeploys";
export const listDeploys: typeof import("./listDeploys").listDeploys = null as any;
export const listDeploysOutput: typeof import("./listDeploys").listDeploysOutput = null as any;
utilities.lazyLoad(exports, ["listDeploys","listDeploysOutput"], () => require("./listDeploys"));

export { ListEnvVarsForServiceArgs, ListEnvVarsForServiceResult, ListEnvVarsForServiceOutputArgs } from "./listEnvVarsForService";
export const listEnvVarsForService: typeof import("./listEnvVarsForService").listEnvVarsForService = null as any;
export const listEnvVarsForServiceOutput: typeof import("./listEnvVarsForService").listEnvVarsForServiceOutput = null as any;
utilities.lazyLoad(exports, ["listEnvVarsForService","listEnvVarsForServiceOutput"], () => require("./listEnvVarsForService"));

export { ListHeadersArgs, ListHeadersResult, ListHeadersOutputArgs } from "./listHeaders";
export const listHeaders: typeof import("./listHeaders").listHeaders = null as any;
export const listHeadersOutput: typeof import("./listHeaders").listHeadersOutput = null as any;
utilities.lazyLoad(exports, ["listHeaders","listHeadersOutput"], () => require("./listHeaders"));

export { ListJobArgs, ListJobResult, ListJobOutputArgs } from "./listJob";
export const listJob: typeof import("./listJob").listJob = null as any;
export const listJobOutput: typeof import("./listJob").listJobOutput = null as any;
utilities.lazyLoad(exports, ["listJob","listJobOutput"], () => require("./listJob"));

export { ListRoutesArgs, ListRoutesResult, ListRoutesOutputArgs } from "./listRoutes";
export const listRoutes: typeof import("./listRoutes").listRoutes = null as any;
export const listRoutesOutput: typeof import("./listRoutes").listRoutesOutput = null as any;
utilities.lazyLoad(exports, ["listRoutes","listRoutesOutput"], () => require("./listRoutes"));

export { ListSecretFilesForServiceArgs, ListSecretFilesForServiceResult, ListSecretFilesForServiceOutputArgs } from "./listSecretFilesForService";
export const listSecretFilesForService: typeof import("./listSecretFilesForService").listSecretFilesForService = null as any;
export const listSecretFilesForServiceOutput: typeof import("./listSecretFilesForService").listSecretFilesForServiceOutput = null as any;
utilities.lazyLoad(exports, ["listSecretFilesForService","listSecretFilesForServiceOutput"], () => require("./listSecretFilesForService"));

export { ListServicesArgs, ListServicesResult } from "./listServices";
export const listServices: typeof import("./listServices").listServices = null as any;
export const listServicesOutput: typeof import("./listServices").listServicesOutput = null as any;
utilities.lazyLoad(exports, ["listServices","listServicesOutput"], () => require("./listServices"));

export { PreviewServiceArgs } from "./previewService";
export type PreviewService = import("./previewService").PreviewService;
export const PreviewService: typeof import("./previewService").PreviewService = null as any;
utilities.lazyLoad(exports, ["PreviewService"], () => require("./previewService"));

export { PrivateServiceArgs } from "./privateService";
export type PrivateService = import("./privateService").PrivateService;
export const PrivateService: typeof import("./privateService").PrivateService = null as any;
utilities.lazyLoad(exports, ["PrivateService"], () => require("./privateService"));

export { RefreshCustomDomainArgs } from "./refreshCustomDomain";
export type RefreshCustomDomain = import("./refreshCustomDomain").RefreshCustomDomain;
export const RefreshCustomDomain: typeof import("./refreshCustomDomain").RefreshCustomDomain = null as any;
utilities.lazyLoad(exports, ["RefreshCustomDomain"], () => require("./refreshCustomDomain"));

export { RestartServiceArgs } from "./restartService";
export type RestartService = import("./restartService").RestartService;
export const RestartService: typeof import("./restartService").RestartService = null as any;
utilities.lazyLoad(exports, ["RestartService"], () => require("./restartService"));

export { RollbackDeployArgs } from "./rollbackDeploy";
export type RollbackDeploy = import("./rollbackDeploy").RollbackDeploy;
export const RollbackDeploy: typeof import("./rollbackDeploy").RollbackDeploy = null as any;
utilities.lazyLoad(exports, ["RollbackDeploy"], () => require("./rollbackDeploy"));

export { RouteArgs } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ScaleServiceArgs } from "./scaleService";
export type ScaleService = import("./scaleService").ScaleService;
export const ScaleService: typeof import("./scaleService").ScaleService = null as any;
utilities.lazyLoad(exports, ["ScaleService"], () => require("./scaleService"));

export { SecretFilesForServiceArgs } from "./secretFilesForService";
export type SecretFilesForService = import("./secretFilesForService").SecretFilesForService;
export const SecretFilesForService: typeof import("./secretFilesForService").SecretFilesForService = null as any;
utilities.lazyLoad(exports, ["SecretFilesForService"], () => require("./secretFilesForService"));

export { StaticSiteArgs } from "./staticSite";
export type StaticSite = import("./staticSite").StaticSite;
export const StaticSite: typeof import("./staticSite").StaticSite = null as any;
utilities.lazyLoad(exports, ["StaticSite"], () => require("./staticSite"));

export { SuspendServiceArgs } from "./suspendService";
export type SuspendService = import("./suspendService").SuspendService;
export const SuspendService: typeof import("./suspendService").SuspendService = null as any;
utilities.lazyLoad(exports, ["SuspendService"], () => require("./suspendService"));

export { WebServiceArgs } from "./webService";
export type WebService = import("./webService").WebService;
export const WebService: typeof import("./webService").WebService = null as any;
utilities.lazyLoad(exports, ["WebService"], () => require("./webService"));


// Export enums:
export * from "../types/enums/services";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "render:services:AutoscaleService":
                return new AutoscaleService(name, <any>undefined, { urn })
            case "render:services:BackgroundWorker":
                return new BackgroundWorker(name, <any>undefined, { urn })
            case "render:services:CancelDeploy":
                return new CancelDeploy(name, <any>undefined, { urn })
            case "render:services:CancelJob":
                return new CancelJob(name, <any>undefined, { urn })
            case "render:services:CronJob":
                return new CronJob(name, <any>undefined, { urn })
            case "render:services:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "render:services:Deploy":
                return new Deploy(name, <any>undefined, { urn })
            case "render:services:EnvVarsForService":
                return new EnvVarsForService(name, <any>undefined, { urn })
            case "render:services:Header":
                return new Header(name, <any>undefined, { urn })
            case "render:services:Job":
                return new Job(name, <any>undefined, { urn })
            case "render:services:PreviewService":
                return new PreviewService(name, <any>undefined, { urn })
            case "render:services:PrivateService":
                return new PrivateService(name, <any>undefined, { urn })
            case "render:services:RefreshCustomDomain":
                return new RefreshCustomDomain(name, <any>undefined, { urn })
            case "render:services:RestartService":
                return new RestartService(name, <any>undefined, { urn })
            case "render:services:RollbackDeploy":
                return new RollbackDeploy(name, <any>undefined, { urn })
            case "render:services:Route":
                return new Route(name, <any>undefined, { urn })
            case "render:services:ScaleService":
                return new ScaleService(name, <any>undefined, { urn })
            case "render:services:SecretFilesForService":
                return new SecretFilesForService(name, <any>undefined, { urn })
            case "render:services:StaticSite":
                return new StaticSite(name, <any>undefined, { urn })
            case "render:services:SuspendService":
                return new SuspendService(name, <any>undefined, { urn })
            case "render:services:WebService":
                return new WebService(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("render", "services", _module)
