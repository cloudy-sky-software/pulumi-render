# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ScaleArgs', 'Scale']

@pulumi.input_type
class ScaleArgs:
    def __init__(__self__, *,
                 num_instances: pulumi.Input[float],
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Scale resource.
        :param pulumi.Input[str] service_id: (Required) The ID of the service
        """
        pulumi.set(__self__, "num_instances", num_instances)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[float]:
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[float]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The ID of the service
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


class Scale(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 num_instances: Optional[pulumi.Input[float]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Scale resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] service_id: (Required) The ID of the service
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScaleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Scale resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ScaleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScaleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 num_instances: Optional[pulumi.Input[float]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScaleArgs.__new__(ScaleArgs)

            if num_instances is None and not opts.urn:
                raise TypeError("Missing required property 'num_instances'")
            __props__.__dict__["num_instances"] = num_instances
            __props__.__dict__["service_id"] = service_id
        super(Scale, __self__).__init__(
            'render:services:Scale',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Scale':
        """
        Get an existing Scale resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ScaleArgs.__new__(ScaleArgs)

        __props__.__dict__["num_instances"] = None
        return Scale(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Output[float]:
        return pulumi.get(self, "num_instances")

