// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package registrycredentials

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RegistryCredentialType struct {
	// Unique identifier for this credential
	Id string `pulumi:"id"`
	// Descriptive name for this credential
	Name string `pulumi:"name"`
	// The registry to use this credential with
	Registry RegistryCredentialRegistry `pulumi:"registry"`
	// The username associated with the credential
	Username string `pulumi:"username"`
}

type RegistryCredentialTypeOutput struct{ *pulumi.OutputState }

func (RegistryCredentialTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialType)(nil)).Elem()
}

func (o RegistryCredentialTypeOutput) ToRegistryCredentialTypeOutput() RegistryCredentialTypeOutput {
	return o
}

func (o RegistryCredentialTypeOutput) ToRegistryCredentialTypeOutputWithContext(ctx context.Context) RegistryCredentialTypeOutput {
	return o
}

// Unique identifier for this credential
func (o RegistryCredentialTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialType) string { return v.Id }).(pulumi.StringOutput)
}

// Descriptive name for this credential
func (o RegistryCredentialTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialType) string { return v.Name }).(pulumi.StringOutput)
}

// The registry to use this credential with
func (o RegistryCredentialTypeOutput) Registry() RegistryCredentialRegistryOutput {
	return o.ApplyT(func(v RegistryCredentialType) RegistryCredentialRegistry { return v.Registry }).(RegistryCredentialRegistryOutput)
}

// The username associated with the credential
func (o RegistryCredentialTypeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryCredentialType) string { return v.Username }).(pulumi.StringOutput)
}

type RegistryCredentialTypeArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialType)(nil)).Elem()
}

func (o RegistryCredentialTypeArrayOutput) ToRegistryCredentialTypeArrayOutput() RegistryCredentialTypeArrayOutput {
	return o
}

func (o RegistryCredentialTypeArrayOutput) ToRegistryCredentialTypeArrayOutputWithContext(ctx context.Context) RegistryCredentialTypeArrayOutput {
	return o
}

func (o RegistryCredentialTypeArrayOutput) Index(i pulumi.IntInput) RegistryCredentialTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentialType {
		return vs[0].([]RegistryCredentialType)[vs[1].(int)]
	}).(RegistryCredentialTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(RegistryCredentialTypeOutput{})
	pulumi.RegisterOutputType(RegistryCredentialTypeArrayOutput{})
}
