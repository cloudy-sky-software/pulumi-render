// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.KeyValue
{
    [EnumType]
    public readonly struct KeyValueDetailPlan : IEquatable<KeyValueDetailPlan>
    {
        private readonly string _value;

        private KeyValueDetailPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValueDetailPlan Free { get; } = new KeyValueDetailPlan("free");
        public static KeyValueDetailPlan Starter { get; } = new KeyValueDetailPlan("starter");
        public static KeyValueDetailPlan Standard { get; } = new KeyValueDetailPlan("standard");
        public static KeyValueDetailPlan Pro { get; } = new KeyValueDetailPlan("pro");
        public static KeyValueDetailPlan ProPlus { get; } = new KeyValueDetailPlan("pro_plus");
        public static KeyValueDetailPlan Custom { get; } = new KeyValueDetailPlan("custom");

        public static bool operator ==(KeyValueDetailPlan left, KeyValueDetailPlan right) => left.Equals(right);
        public static bool operator !=(KeyValueDetailPlan left, KeyValueDetailPlan right) => !left.Equals(right);

        public static explicit operator string(KeyValueDetailPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValueDetailPlan other && Equals(other);
        public bool Equals(KeyValueDetailPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct KeyValueDetailRegion : IEquatable<KeyValueDetailRegion>
    {
        private readonly string _value;

        private KeyValueDetailRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValueDetailRegion Frankfurt { get; } = new KeyValueDetailRegion("frankfurt");
        public static KeyValueDetailRegion Oregon { get; } = new KeyValueDetailRegion("oregon");
        public static KeyValueDetailRegion Ohio { get; } = new KeyValueDetailRegion("ohio");
        public static KeyValueDetailRegion Singapore { get; } = new KeyValueDetailRegion("singapore");
        public static KeyValueDetailRegion Virginia { get; } = new KeyValueDetailRegion("virginia");

        public static bool operator ==(KeyValueDetailRegion left, KeyValueDetailRegion right) => left.Equals(right);
        public static bool operator !=(KeyValueDetailRegion left, KeyValueDetailRegion right) => !left.Equals(right);

        public static explicit operator string(KeyValueDetailRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValueDetailRegion other && Equals(other);
        public bool Equals(KeyValueDetailRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KeyValueDetailStatus : IEquatable<KeyValueDetailStatus>
    {
        private readonly string _value;

        private KeyValueDetailStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValueDetailStatus Creating { get; } = new KeyValueDetailStatus("creating");
        public static KeyValueDetailStatus Available { get; } = new KeyValueDetailStatus("available");
        public static KeyValueDetailStatus Unavailable { get; } = new KeyValueDetailStatus("unavailable");
        public static KeyValueDetailStatus ConfigRestart { get; } = new KeyValueDetailStatus("config_restart");
        public static KeyValueDetailStatus Suspended { get; } = new KeyValueDetailStatus("suspended");
        public static KeyValueDetailStatus MaintenanceScheduled { get; } = new KeyValueDetailStatus("maintenance_scheduled");
        public static KeyValueDetailStatus MaintenanceInProgress { get; } = new KeyValueDetailStatus("maintenance_in_progress");
        public static KeyValueDetailStatus RecoveryFailed { get; } = new KeyValueDetailStatus("recovery_failed");
        public static KeyValueDetailStatus RecoveryInProgress { get; } = new KeyValueDetailStatus("recovery_in_progress");
        public static KeyValueDetailStatus Unknown { get; } = new KeyValueDetailStatus("unknown");
        public static KeyValueDetailStatus UpdatingInstance { get; } = new KeyValueDetailStatus("updating_instance");

        public static bool operator ==(KeyValueDetailStatus left, KeyValueDetailStatus right) => left.Equals(right);
        public static bool operator !=(KeyValueDetailStatus left, KeyValueDetailStatus right) => !left.Equals(right);

        public static explicit operator string(KeyValueDetailStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValueDetailStatus other && Equals(other);
        public bool Equals(KeyValueDetailStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KeyValuePlan : IEquatable<KeyValuePlan>
    {
        private readonly string _value;

        private KeyValuePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValuePlan Free { get; } = new KeyValuePlan("free");
        public static KeyValuePlan Starter { get; } = new KeyValuePlan("starter");
        public static KeyValuePlan Standard { get; } = new KeyValuePlan("standard");
        public static KeyValuePlan Pro { get; } = new KeyValuePlan("pro");
        public static KeyValuePlan ProPlus { get; } = new KeyValuePlan("pro_plus");
        public static KeyValuePlan Custom { get; } = new KeyValuePlan("custom");

        public static bool operator ==(KeyValuePlan left, KeyValuePlan right) => left.Equals(right);
        public static bool operator !=(KeyValuePlan left, KeyValuePlan right) => !left.Equals(right);

        public static explicit operator string(KeyValuePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValuePlan other && Equals(other);
        public bool Equals(KeyValuePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct KeyValueRegion : IEquatable<KeyValueRegion>
    {
        private readonly string _value;

        private KeyValueRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValueRegion Frankfurt { get; } = new KeyValueRegion("frankfurt");
        public static KeyValueRegion Oregon { get; } = new KeyValueRegion("oregon");
        public static KeyValueRegion Ohio { get; } = new KeyValueRegion("ohio");
        public static KeyValueRegion Singapore { get; } = new KeyValueRegion("singapore");
        public static KeyValueRegion Virginia { get; } = new KeyValueRegion("virginia");

        public static bool operator ==(KeyValueRegion left, KeyValueRegion right) => left.Equals(right);
        public static bool operator !=(KeyValueRegion left, KeyValueRegion right) => !left.Equals(right);

        public static explicit operator string(KeyValueRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValueRegion other && Equals(other);
        public bool Equals(KeyValueRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct KeyValueStatus : IEquatable<KeyValueStatus>
    {
        private readonly string _value;

        private KeyValueStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static KeyValueStatus Creating { get; } = new KeyValueStatus("creating");
        public static KeyValueStatus Available { get; } = new KeyValueStatus("available");
        public static KeyValueStatus Unavailable { get; } = new KeyValueStatus("unavailable");
        public static KeyValueStatus ConfigRestart { get; } = new KeyValueStatus("config_restart");
        public static KeyValueStatus Suspended { get; } = new KeyValueStatus("suspended");
        public static KeyValueStatus MaintenanceScheduled { get; } = new KeyValueStatus("maintenance_scheduled");
        public static KeyValueStatus MaintenanceInProgress { get; } = new KeyValueStatus("maintenance_in_progress");
        public static KeyValueStatus RecoveryFailed { get; } = new KeyValueStatus("recovery_failed");
        public static KeyValueStatus RecoveryInProgress { get; } = new KeyValueStatus("recovery_in_progress");
        public static KeyValueStatus Unknown { get; } = new KeyValueStatus("unknown");
        public static KeyValueStatus UpdatingInstance { get; } = new KeyValueStatus("updating_instance");

        public static bool operator ==(KeyValueStatus left, KeyValueStatus right) => left.Equals(right);
        public static bool operator !=(KeyValueStatus left, KeyValueStatus right) => !left.Equals(right);

        public static explicit operator string(KeyValueStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is KeyValueStatus other && Equals(other);
        public bool Equals(KeyValueStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The eviction policy for the Key Value instance
    /// </summary>
    [EnumType]
    public readonly struct MaxmemoryPolicy : IEquatable<MaxmemoryPolicy>
    {
        private readonly string _value;

        private MaxmemoryPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MaxmemoryPolicy Noeviction { get; } = new MaxmemoryPolicy("noeviction");
        public static MaxmemoryPolicy AllkeysLfu { get; } = new MaxmemoryPolicy("allkeys_lfu");
        public static MaxmemoryPolicy AllkeysLru { get; } = new MaxmemoryPolicy("allkeys_lru");
        public static MaxmemoryPolicy AllkeysRandom { get; } = new MaxmemoryPolicy("allkeys_random");
        public static MaxmemoryPolicy VolatileLfu { get; } = new MaxmemoryPolicy("volatile_lfu");
        public static MaxmemoryPolicy VolatileLru { get; } = new MaxmemoryPolicy("volatile_lru");
        public static MaxmemoryPolicy VolatileRandom { get; } = new MaxmemoryPolicy("volatile_random");
        public static MaxmemoryPolicy VolatileTtl { get; } = new MaxmemoryPolicy("volatile_ttl");

        public static bool operator ==(MaxmemoryPolicy left, MaxmemoryPolicy right) => left.Equals(right);
        public static bool operator !=(MaxmemoryPolicy left, MaxmemoryPolicy right) => !left.Equals(right);

        public static explicit operator string(MaxmemoryPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MaxmemoryPolicy other && Equals(other);
        public bool Equals(MaxmemoryPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        private OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OwnerType User { get; } = new OwnerType("user");
        public static OwnerType Team { get; } = new OwnerType("team");

        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);

        public static explicit operator string(OwnerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwnerType other && Equals(other);
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan Free { get; } = new Plan("free");
        public static Plan Starter { get; } = new Plan("starter");
        public static Plan Standard { get; } = new Plan("standard");
        public static Plan Pro { get; } = new Plan("pro");
        public static Plan ProPlus { get; } = new Plan("pro_plus");
        public static Plan Custom { get; } = new Plan("custom");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisDetailpropertiesmaintenanceState : IEquatable<RedisDetailpropertiesmaintenanceState>
    {
        private readonly string _value;

        private RedisDetailpropertiesmaintenanceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailpropertiesmaintenanceState Scheduled { get; } = new RedisDetailpropertiesmaintenanceState("scheduled");
        public static RedisDetailpropertiesmaintenanceState InProgress { get; } = new RedisDetailpropertiesmaintenanceState("in_progress");
        public static RedisDetailpropertiesmaintenanceState UserFixRequired { get; } = new RedisDetailpropertiesmaintenanceState("user_fix_required");
        public static RedisDetailpropertiesmaintenanceState Cancelled { get; } = new RedisDetailpropertiesmaintenanceState("cancelled");
        public static RedisDetailpropertiesmaintenanceState Succeeded { get; } = new RedisDetailpropertiesmaintenanceState("succeeded");
        public static RedisDetailpropertiesmaintenanceState Failed { get; } = new RedisDetailpropertiesmaintenanceState("failed");

        public static bool operator ==(RedisDetailpropertiesmaintenanceState left, RedisDetailpropertiesmaintenanceState right) => left.Equals(right);
        public static bool operator !=(RedisDetailpropertiesmaintenanceState left, RedisDetailpropertiesmaintenanceState right) => !left.Equals(right);

        public static explicit operator string(RedisDetailpropertiesmaintenanceState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailpropertiesmaintenanceState other && Equals(other);
        public bool Equals(RedisDetailpropertiesmaintenanceState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Region Frankfurt { get; } = new Region("frankfurt");
        public static Region Oregon { get; } = new Region("oregon");
        public static Region Ohio { get; } = new Region("ohio");
        public static Region Singapore { get; } = new Region("singapore");
        public static Region Virginia { get; } = new Region("virginia");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Creating { get; } = new Status("creating");
        public static Status Available { get; } = new Status("available");
        public static Status Unavailable { get; } = new Status("unavailable");
        public static Status ConfigRestart { get; } = new Status("config_restart");
        public static Status Suspended { get; } = new Status("suspended");
        public static Status MaintenanceScheduled { get; } = new Status("maintenance_scheduled");
        public static Status MaintenanceInProgress { get; } = new Status("maintenance_in_progress");
        public static Status RecoveryFailed { get; } = new Status("recovery_failed");
        public static Status RecoveryInProgress { get; } = new Status("recovery_in_progress");
        public static Status Unknown { get; } = new Status("unknown");
        public static Status UpdatingInstance { get; } = new Status("updating_instance");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
