// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FailoverPostgresArgs } from "./failoverPostgres";
export type FailoverPostgres = import("./failoverPostgres").FailoverPostgres;
export const FailoverPostgres: typeof import("./failoverPostgres").FailoverPostgres = null as any;
utilities.lazyLoad(exports, ["FailoverPostgres"], () => require("./failoverPostgres"));

export { GetPostgresArgs, GetPostgresResult, GetPostgresOutputArgs } from "./getPostgres";
export const getPostgres: typeof import("./getPostgres").getPostgres = null as any;
export const getPostgresOutput: typeof import("./getPostgres").getPostgresOutput = null as any;
utilities.lazyLoad(exports, ["getPostgres","getPostgresOutput"], () => require("./getPostgres"));

export { GetPostgresConnectionInfoArgs, GetPostgresConnectionInfoResult, GetPostgresConnectionInfoOutputArgs } from "./getPostgresConnectionInfo";
export const getPostgresConnectionInfo: typeof import("./getPostgresConnectionInfo").getPostgresConnectionInfo = null as any;
export const getPostgresConnectionInfoOutput: typeof import("./getPostgresConnectionInfo").getPostgresConnectionInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresConnectionInfo","getPostgresConnectionInfoOutput"], () => require("./getPostgresConnectionInfo"));

export { GetPostgresRecoveryInfoArgs, GetPostgresRecoveryInfoResult, GetPostgresRecoveryInfoOutputArgs } from "./getPostgresRecoveryInfo";
export const getPostgresRecoveryInfo: typeof import("./getPostgresRecoveryInfo").getPostgresRecoveryInfo = null as any;
export const getPostgresRecoveryInfoOutput: typeof import("./getPostgresRecoveryInfo").getPostgresRecoveryInfoOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresRecoveryInfo","getPostgresRecoveryInfoOutput"], () => require("./getPostgresRecoveryInfo"));

export { ListPostgresArgs, ListPostgresResult } from "./listPostgres";
export const listPostgres: typeof import("./listPostgres").listPostgres = null as any;
export const listPostgresOutput: typeof import("./listPostgres").listPostgresOutput = null as any;
utilities.lazyLoad(exports, ["listPostgres","listPostgresOutput"], () => require("./listPostgres"));

export { ListPostgresExportArgs, ListPostgresExportResult, ListPostgresExportOutputArgs } from "./listPostgresExport";
export const listPostgresExport: typeof import("./listPostgresExport").listPostgresExport = null as any;
export const listPostgresExportOutput: typeof import("./listPostgresExport").listPostgresExportOutput = null as any;
utilities.lazyLoad(exports, ["listPostgresExport","listPostgresExportOutput"], () => require("./listPostgresExport"));

export { PostgresArgs } from "./postgres";
export type Postgres = import("./postgres").Postgres;
export const Postgres: typeof import("./postgres").Postgres = null as any;
utilities.lazyLoad(exports, ["Postgres"], () => require("./postgres"));

export { PostgresExportArgs } from "./postgresExport";
export type PostgresExport = import("./postgresExport").PostgresExport;
export const PostgresExport: typeof import("./postgresExport").PostgresExport = null as any;
utilities.lazyLoad(exports, ["PostgresExport"], () => require("./postgresExport"));

export { RecoverPostgresArgs } from "./recoverPostgres";
export type RecoverPostgres = import("./recoverPostgres").RecoverPostgres;
export const RecoverPostgres: typeof import("./recoverPostgres").RecoverPostgres = null as any;
utilities.lazyLoad(exports, ["RecoverPostgres"], () => require("./recoverPostgres"));

export { RestartPostgresArgs } from "./restartPostgres";
export type RestartPostgres = import("./restartPostgres").RestartPostgres;
export const RestartPostgres: typeof import("./restartPostgres").RestartPostgres = null as any;
utilities.lazyLoad(exports, ["RestartPostgres"], () => require("./restartPostgres"));

export { ResumePostgresArgs } from "./resumePostgres";
export type ResumePostgres = import("./resumePostgres").ResumePostgres;
export const ResumePostgres: typeof import("./resumePostgres").ResumePostgres = null as any;
utilities.lazyLoad(exports, ["ResumePostgres"], () => require("./resumePostgres"));

export { SuspendPostgresArgs } from "./suspendPostgres";
export type SuspendPostgres = import("./suspendPostgres").SuspendPostgres;
export const SuspendPostgres: typeof import("./suspendPostgres").SuspendPostgres = null as any;
utilities.lazyLoad(exports, ["SuspendPostgres"], () => require("./suspendPostgres"));


// Export enums:
export * from "../types/enums/postgres";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "render:postgres:FailoverPostgres":
                return new FailoverPostgres(name, <any>undefined, { urn })
            case "render:postgres:Postgres":
                return new Postgres(name, <any>undefined, { urn })
            case "render:postgres:PostgresExport":
                return new PostgresExport(name, <any>undefined, { urn })
            case "render:postgres:RecoverPostgres":
                return new RecoverPostgres(name, <any>undefined, { urn })
            case "render:postgres:RestartPostgres":
                return new RestartPostgres(name, <any>undefined, { urn })
            case "render:postgres:ResumePostgres":
                return new ResumePostgres(name, <any>undefined, { urn })
            case "render:postgres:SuspendPostgres":
                return new SuspendPostgres(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("render", "postgres", _module)
