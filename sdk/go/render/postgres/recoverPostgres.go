// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecoverPostgres struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL to view the Postgres instance in the Render Dashboard
	DashboardUrl pulumi.StringOutput `pulumi:"dashboardUrl"`
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	DatabaseUser pulumi.StringOutput `pulumi:"databaseUser"`
	// Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
	DatadogApiKey pulumi.StringPtrOutput `pulumi:"datadogApiKey"`
	// Datadog region code to use for monitoring the new database. Defaults to the region code of the original database. Use an empty string to prevent copying of the region code to the new database.
	DatadogSite   pulumi.StringPtrOutput `pulumi:"datadogSite"`
	DiskSizeGB    pulumi.IntPtrOutput    `pulumi:"diskSizeGB"`
	EnvironmentId pulumi.StringPtrOutput `pulumi:"environmentId"`
	// The time at which the database will be expire. Applies to free tier databases only.
	ExpiresAt               pulumi.StringPtrOutput                    `pulumi:"expiresAt"`
	HighAvailabilityEnabled pulumi.BoolOutput                         `pulumi:"highAvailabilityEnabled"`
	IpAllowList             CidrBlockAndDescriptionArrayOutput        `pulumi:"ipAllowList"`
	Maintenance             RedisDetailpropertiesmaintenancePtrOutput `pulumi:"maintenance"`
	Name                    pulumi.StringOutput                       `pulumi:"name"`
	Owner                   OwnerOutput                               `pulumi:"owner"`
	Plan                    PlanOutput                                `pulumi:"plan"`
	PrimaryPostgresID       pulumi.StringPtrOutput                    `pulumi:"primaryPostgresID"`
	ReadReplicas            ReadReplicaArrayOutput                    `pulumi:"readReplicas"`
	// Defaults to "oregon"
	Region RegionOutput `pulumi:"region"`
	// Name of the new database.
	RestoreName pulumi.StringPtrOutput `pulumi:"restoreName"`
	// The point in time to restore the database to. See `/recovery-info` for restore availability
	RestoreTime pulumi.StringOutput            `pulumi:"restoreTime"`
	Role        RoleOutput                     `pulumi:"role"`
	Status      StatusOutput                   `pulumi:"status"`
	Suspended   RecoverPostgresSuspendedOutput `pulumi:"suspended"`
	Suspenders  SuspendersItemArrayOutput      `pulumi:"suspenders"`
	UpdatedAt   pulumi.StringOutput            `pulumi:"updatedAt"`
	// The PostgreSQL version
	Version VersionOutput `pulumi:"version"`
}

// NewRecoverPostgres registers a new resource with the given unique name, arguments, and options.
func NewRecoverPostgres(ctx *pulumi.Context,
	name string, args *RecoverPostgresArgs, opts ...pulumi.ResourceOption) (*RecoverPostgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RestoreTime == nil {
		return nil, errors.New("invalid value for required argument 'RestoreTime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecoverPostgres
	err := ctx.RegisterResource("render:postgres:RecoverPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecoverPostgres gets an existing RecoverPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecoverPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecoverPostgresState, opts ...pulumi.ResourceOption) (*RecoverPostgres, error) {
	var resource RecoverPostgres
	err := ctx.ReadResource("render:postgres:RecoverPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecoverPostgres resources.
type recoverPostgresState struct {
}

type RecoverPostgresState struct {
}

func (RecoverPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*recoverPostgresState)(nil)).Elem()
}

type recoverPostgresArgs struct {
	// Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
	DatadogApiKey *string `pulumi:"datadogApiKey"`
	// Datadog region code to use for monitoring the new database. Defaults to the region code of the original database. Use an empty string to prevent copying of the region code to the new database.
	DatadogSite *string `pulumi:"datadogSite"`
	// The environment to create the new database in. Defaults to the environment of the original database.
	EnvironmentId *string `pulumi:"environmentId"`
	// The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database.
	Plan       *string `pulumi:"plan"`
	PostgresId *string `pulumi:"postgresId"`
	// Name of the new database.
	RestoreName *string `pulumi:"restoreName"`
	// The point in time to restore the database to. See `/recovery-info` for restore availability
	RestoreTime string `pulumi:"restoreTime"`
}

// The set of arguments for constructing a RecoverPostgres resource.
type RecoverPostgresArgs struct {
	// Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
	DatadogApiKey pulumi.StringPtrInput
	// Datadog region code to use for monitoring the new database. Defaults to the region code of the original database. Use an empty string to prevent copying of the region code to the new database.
	DatadogSite pulumi.StringPtrInput
	// The environment to create the new database in. Defaults to the environment of the original database.
	EnvironmentId pulumi.StringPtrInput
	// The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database.
	Plan       pulumi.StringPtrInput
	PostgresId pulumi.StringPtrInput
	// Name of the new database.
	RestoreName pulumi.StringPtrInput
	// The point in time to restore the database to. See `/recovery-info` for restore availability
	RestoreTime pulumi.StringInput
}

func (RecoverPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recoverPostgresArgs)(nil)).Elem()
}

type RecoverPostgresInput interface {
	pulumi.Input

	ToRecoverPostgresOutput() RecoverPostgresOutput
	ToRecoverPostgresOutputWithContext(ctx context.Context) RecoverPostgresOutput
}

func (*RecoverPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoverPostgres)(nil)).Elem()
}

func (i *RecoverPostgres) ToRecoverPostgresOutput() RecoverPostgresOutput {
	return i.ToRecoverPostgresOutputWithContext(context.Background())
}

func (i *RecoverPostgres) ToRecoverPostgresOutputWithContext(ctx context.Context) RecoverPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecoverPostgresOutput)
}

type RecoverPostgresOutput struct{ *pulumi.OutputState }

func (RecoverPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoverPostgres)(nil)).Elem()
}

func (o RecoverPostgresOutput) ToRecoverPostgresOutput() RecoverPostgresOutput {
	return o
}

func (o RecoverPostgresOutput) ToRecoverPostgresOutputWithContext(ctx context.Context) RecoverPostgresOutput {
	return o
}

func (o RecoverPostgresOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view the Postgres instance in the Render Dashboard
func (o RecoverPostgresOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o RecoverPostgresOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o RecoverPostgresOutput) DatabaseUser() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.DatabaseUser }).(pulumi.StringOutput)
}

// Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
func (o RecoverPostgresOutput) DatadogApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.DatadogApiKey }).(pulumi.StringPtrOutput)
}

// Datadog region code to use for monitoring the new database. Defaults to the region code of the original database. Use an empty string to prevent copying of the region code to the new database.
func (o RecoverPostgresOutput) DatadogSite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.DatadogSite }).(pulumi.StringPtrOutput)
}

func (o RecoverPostgresOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.IntPtrOutput { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

func (o RecoverPostgresOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// The time at which the database will be expire. Applies to free tier databases only.
func (o RecoverPostgresOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

func (o RecoverPostgresOutput) HighAvailabilityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.BoolOutput { return v.HighAvailabilityEnabled }).(pulumi.BoolOutput)
}

func (o RecoverPostgresOutput) IpAllowList() CidrBlockAndDescriptionArrayOutput {
	return o.ApplyT(func(v *RecoverPostgres) CidrBlockAndDescriptionArrayOutput { return v.IpAllowList }).(CidrBlockAndDescriptionArrayOutput)
}

func (o RecoverPostgresOutput) Maintenance() RedisDetailpropertiesmaintenancePtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) RedisDetailpropertiesmaintenancePtrOutput { return v.Maintenance }).(RedisDetailpropertiesmaintenancePtrOutput)
}

func (o RecoverPostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RecoverPostgresOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v *RecoverPostgres) OwnerOutput { return v.Owner }).(OwnerOutput)
}

func (o RecoverPostgresOutput) Plan() PlanOutput {
	return o.ApplyT(func(v *RecoverPostgres) PlanOutput { return v.Plan }).(PlanOutput)
}

func (o RecoverPostgresOutput) PrimaryPostgresID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.PrimaryPostgresID }).(pulumi.StringPtrOutput)
}

func (o RecoverPostgresOutput) ReadReplicas() ReadReplicaArrayOutput {
	return o.ApplyT(func(v *RecoverPostgres) ReadReplicaArrayOutput { return v.ReadReplicas }).(ReadReplicaArrayOutput)
}

// Defaults to "oregon"
func (o RecoverPostgresOutput) Region() RegionOutput {
	return o.ApplyT(func(v *RecoverPostgres) RegionOutput { return v.Region }).(RegionOutput)
}

// Name of the new database.
func (o RecoverPostgresOutput) RestoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringPtrOutput { return v.RestoreName }).(pulumi.StringPtrOutput)
}

// The point in time to restore the database to. See `/recovery-info` for restore availability
func (o RecoverPostgresOutput) RestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.RestoreTime }).(pulumi.StringOutput)
}

func (o RecoverPostgresOutput) Role() RoleOutput {
	return o.ApplyT(func(v *RecoverPostgres) RoleOutput { return v.Role }).(RoleOutput)
}

func (o RecoverPostgresOutput) Status() StatusOutput {
	return o.ApplyT(func(v *RecoverPostgres) StatusOutput { return v.Status }).(StatusOutput)
}

func (o RecoverPostgresOutput) Suspended() RecoverPostgresSuspendedOutput {
	return o.ApplyT(func(v *RecoverPostgres) RecoverPostgresSuspendedOutput { return v.Suspended }).(RecoverPostgresSuspendedOutput)
}

func (o RecoverPostgresOutput) Suspenders() SuspendersItemArrayOutput {
	return o.ApplyT(func(v *RecoverPostgres) SuspendersItemArrayOutput { return v.Suspenders }).(SuspendersItemArrayOutput)
}

func (o RecoverPostgresOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RecoverPostgres) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The PostgreSQL version
func (o RecoverPostgresOutput) Version() VersionOutput {
	return o.ApplyT(func(v *RecoverPostgres) VersionOutput { return v.Version }).(VersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecoverPostgresInput)(nil)).Elem(), &RecoverPostgres{})
	pulumi.RegisterOutputType(RecoverPostgresOutput{})
}
