// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Suspend struct {
	pulumi.CustomResourceState
}

// NewSuspend registers a new resource with the given unique name, arguments, and options.
func NewSuspend(ctx *pulumi.Context,
	name string, args *SuspendArgs, opts ...pulumi.ResourceOption) (*Suspend, error) {
	if args == nil {
		args = &SuspendArgs{}
	}

	var resource Suspend
	err := ctx.RegisterResource("render:services:Suspend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuspend gets an existing Suspend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuspend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuspendState, opts ...pulumi.ResourceOption) (*Suspend, error) {
	var resource Suspend
	err := ctx.ReadResource("render:services:Suspend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Suspend resources.
type suspendState struct {
}

type SuspendState struct {
}

func (SuspendState) ElementType() reflect.Type {
	return reflect.TypeOf((*suspendState)(nil)).Elem()
}

type suspendArgs struct {
}

// The set of arguments for constructing a Suspend resource.
type SuspendArgs struct {
}

func (SuspendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*suspendArgs)(nil)).Elem()
}

type SuspendInput interface {
	pulumi.Input

	ToSuspendOutput() SuspendOutput
	ToSuspendOutputWithContext(ctx context.Context) SuspendOutput
}

func (*Suspend) ElementType() reflect.Type {
	return reflect.TypeOf((**Suspend)(nil)).Elem()
}

func (i *Suspend) ToSuspendOutput() SuspendOutput {
	return i.ToSuspendOutputWithContext(context.Background())
}

func (i *Suspend) ToSuspendOutputWithContext(ctx context.Context) SuspendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuspendOutput)
}

type SuspendOutput struct{ *pulumi.OutputState }

func (SuspendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Suspend)(nil)).Elem()
}

func (o SuspendOutput) ToSuspendOutput() SuspendOutput {
	return o
}

func (o SuspendOutput) ToSuspendOutputWithContext(ctx context.Context) SuspendOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuspendInput)(nil)).Elem(), &Suspend{})
	pulumi.RegisterOutputType(SuspendOutput{})
}
