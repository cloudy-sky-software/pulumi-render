// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Deploys struct {
	pulumi.CustomResourceState

	ClearCache ClearCachePtrOutput `pulumi:"clearCache"`
	Commit     CommitPtrOutput     `pulumi:"commit"`
}

// NewDeploys registers a new resource with the given unique name, arguments, and options.
func NewDeploys(ctx *pulumi.Context,
	name string, args *DeploysArgs, opts ...pulumi.ResourceOption) (*Deploys, error) {
	if args == nil {
		args = &DeploysArgs{}
	}

	if args.ClearCache == nil {
		args.ClearCache = ClearCache("do_not_clear")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Deploys
	err := ctx.RegisterResource("render:services:Deploys", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploys gets an existing Deploys resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploys(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploysState, opts ...pulumi.ResourceOption) (*Deploys, error) {
	var resource Deploys
	err := ctx.ReadResource("render:services:Deploys", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Deploys resources.
type deploysState struct {
}

type DeploysState struct {
}

func (DeploysState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploysState)(nil)).Elem()
}

type deploysArgs struct {
	ClearCache *ClearCache `pulumi:"clearCache"`
	// (Required) The ID of the service
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a Deploys resource.
type DeploysArgs struct {
	ClearCache ClearCachePtrInput
	// (Required) The ID of the service
	ServiceId pulumi.StringPtrInput
}

func (DeploysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploysArgs)(nil)).Elem()
}

type DeploysInput interface {
	pulumi.Input

	ToDeploysOutput() DeploysOutput
	ToDeploysOutputWithContext(ctx context.Context) DeploysOutput
}

func (*Deploys) ElementType() reflect.Type {
	return reflect.TypeOf((**Deploys)(nil)).Elem()
}

func (i *Deploys) ToDeploysOutput() DeploysOutput {
	return i.ToDeploysOutputWithContext(context.Background())
}

func (i *Deploys) ToDeploysOutputWithContext(ctx context.Context) DeploysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploysOutput)
}

type DeploysOutput struct{ *pulumi.OutputState }

func (DeploysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deploys)(nil)).Elem()
}

func (o DeploysOutput) ToDeploysOutput() DeploysOutput {
	return o
}

func (o DeploysOutput) ToDeploysOutputWithContext(ctx context.Context) DeploysOutput {
	return o
}

func (o DeploysOutput) ClearCache() ClearCachePtrOutput {
	return o.ApplyT(func(v *Deploys) ClearCachePtrOutput { return v.ClearCache }).(ClearCachePtrOutput)
}

func (o DeploysOutput) Commit() CommitPtrOutput {
	return o.ApplyT(func(v *Deploys) CommitPtrOutput { return v.Commit }).(CommitPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploysInput)(nil)).Elem(), &Deploys{})
	pulumi.RegisterOutputType(DeploysOutput{})
}
