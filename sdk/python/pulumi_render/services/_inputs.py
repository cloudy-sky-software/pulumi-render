# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AutoscalingCriteriaPercentageArgs',
    'AutoscalingCriteriaArgs',
    'EnvVarKeyGenerateValueArgs',
    'EnvVarKeyValueArgs',
]

@pulumi.input_type
class AutoscalingCriteriaPercentageArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 percentage: pulumi.Input[int]):
        """
        :param pulumi.Input[int] percentage: Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
        """
        if enabled is None:
            enabled = False
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[int]:
        """
        Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class AutoscalingCriteriaArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input['AutoscalingCriteriaPercentageArgs'],
                 memory: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input['AutoscalingCriteriaPercentageArgs']:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input['AutoscalingCriteriaPercentageArgs']:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class EnvVarKeyGenerateValueArgs:
    def __init__(__self__, *,
                 generate_value: pulumi.Input[bool],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "generate_value", generate_value)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="generateValue")
    def generate_value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "generate_value")

    @generate_value.setter
    def generate_value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "generate_value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class EnvVarKeyValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


