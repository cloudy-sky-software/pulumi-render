# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'EnvVarInputArgs',
    'EnvVarInputArgsDict',
    'SecretFileInputArgs',
    'SecretFileInputArgsDict',
]

MYPY = False

if not MYPY:
    class EnvVarInputArgsDict(TypedDict):
        generate_value: NotRequired[pulumi.Input[bool]]
        key: NotRequired[pulumi.Input[str]]
        value: NotRequired[pulumi.Input[str]]
elif False:
    EnvVarInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvVarInputArgs:
    def __init__(__self__, *,
                 generate_value: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if generate_value is not None:
            pulumi.set(__self__, "generate_value", generate_value)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="generateValue")
    def generate_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "generate_value")

    @generate_value.setter
    def generate_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SecretFileInputArgsDict(TypedDict):
        content: pulumi.Input[str]
        name: pulumi.Input[str]
elif False:
    SecretFileInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecretFileInputArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


