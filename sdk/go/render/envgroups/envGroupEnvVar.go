// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package envgroups

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnvGroupEnvVar struct {
	pulumi.CustomResourceState

	CreatedAt     pulumi.StringPtrOutput `pulumi:"createdAt"`
	EnvVars       EnvVarArrayOutput      `pulumi:"envVars"`
	EnvironmentId pulumi.StringPtrOutput `pulumi:"environmentId"`
	GenerateValue pulumi.BoolPtrOutput   `pulumi:"generateValue"`
	Name          pulumi.StringPtrOutput `pulumi:"name"`
	OwnerId       pulumi.StringPtrOutput `pulumi:"ownerId"`
	SecretFiles   SecretFileArrayOutput  `pulumi:"secretFiles"`
	// List of serviceIds linked to the envGroup
	ServiceLinks EnvGroupLinkArrayOutput `pulumi:"serviceLinks"`
	UpdatedAt    pulumi.StringPtrOutput  `pulumi:"updatedAt"`
	Value        pulumi.StringPtrOutput  `pulumi:"value"`
}

// NewEnvGroupEnvVar registers a new resource with the given unique name, arguments, and options.
func NewEnvGroupEnvVar(ctx *pulumi.Context,
	name string, args *EnvGroupEnvVarArgs, opts ...pulumi.ResourceOption) (*EnvGroupEnvVar, error) {
	if args == nil {
		args = &EnvGroupEnvVarArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnvGroupEnvVar
	err := ctx.RegisterResource("render:env-groups:EnvGroupEnvVar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvGroupEnvVar gets an existing EnvGroupEnvVar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvGroupEnvVar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvGroupEnvVarState, opts ...pulumi.ResourceOption) (*EnvGroupEnvVar, error) {
	var resource EnvGroupEnvVar
	err := ctx.ReadResource("render:env-groups:EnvGroupEnvVar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnvGroupEnvVar resources.
type envGroupEnvVarState struct {
}

type EnvGroupEnvVarState struct {
}

func (EnvGroupEnvVarState) ElementType() reflect.Type {
	return reflect.TypeOf((*envGroupEnvVarState)(nil)).Elem()
}

type envGroupEnvVarArgs struct {
	// Filter for resources that belong to an environment group
	EnvGroupId *string `pulumi:"envGroupId"`
	// The name of the environment variable
	EnvVarKey     *string `pulumi:"envVarKey"`
	GenerateValue *bool   `pulumi:"generateValue"`
	Value         *string `pulumi:"value"`
}

// The set of arguments for constructing a EnvGroupEnvVar resource.
type EnvGroupEnvVarArgs struct {
	// Filter for resources that belong to an environment group
	EnvGroupId pulumi.StringPtrInput
	// The name of the environment variable
	EnvVarKey     pulumi.StringPtrInput
	GenerateValue pulumi.BoolPtrInput
	Value         pulumi.StringPtrInput
}

func (EnvGroupEnvVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*envGroupEnvVarArgs)(nil)).Elem()
}

type EnvGroupEnvVarInput interface {
	pulumi.Input

	ToEnvGroupEnvVarOutput() EnvGroupEnvVarOutput
	ToEnvGroupEnvVarOutputWithContext(ctx context.Context) EnvGroupEnvVarOutput
}

func (*EnvGroupEnvVar) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvGroupEnvVar)(nil)).Elem()
}

func (i *EnvGroupEnvVar) ToEnvGroupEnvVarOutput() EnvGroupEnvVarOutput {
	return i.ToEnvGroupEnvVarOutputWithContext(context.Background())
}

func (i *EnvGroupEnvVar) ToEnvGroupEnvVarOutputWithContext(ctx context.Context) EnvGroupEnvVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvGroupEnvVarOutput)
}

type EnvGroupEnvVarOutput struct{ *pulumi.OutputState }

func (EnvGroupEnvVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvGroupEnvVar)(nil)).Elem()
}

func (o EnvGroupEnvVarOutput) ToEnvGroupEnvVarOutput() EnvGroupEnvVarOutput {
	return o
}

func (o EnvGroupEnvVarOutput) ToEnvGroupEnvVarOutputWithContext(ctx context.Context) EnvGroupEnvVarOutput {
	return o
}

func (o EnvGroupEnvVarOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o EnvGroupEnvVarOutput) EnvVars() EnvVarArrayOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) EnvVarArrayOutput { return v.EnvVars }).(EnvVarArrayOutput)
}

func (o EnvGroupEnvVarOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

func (o EnvGroupEnvVarOutput) GenerateValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.BoolPtrOutput { return v.GenerateValue }).(pulumi.BoolPtrOutput)
}

func (o EnvGroupEnvVarOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o EnvGroupEnvVarOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

func (o EnvGroupEnvVarOutput) SecretFiles() SecretFileArrayOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) SecretFileArrayOutput { return v.SecretFiles }).(SecretFileArrayOutput)
}

// List of serviceIds linked to the envGroup
func (o EnvGroupEnvVarOutput) ServiceLinks() EnvGroupLinkArrayOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) EnvGroupLinkArrayOutput { return v.ServiceLinks }).(EnvGroupLinkArrayOutput)
}

func (o EnvGroupEnvVarOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func (o EnvGroupEnvVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvGroupEnvVar) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvGroupEnvVarInput)(nil)).Elem(), &EnvGroupEnvVar{})
	pulumi.RegisterOutputType(EnvGroupEnvVarOutput{})
}
