// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Owner struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
	// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
	TwoFactorAuthEnabled *bool     `pulumi:"twoFactorAuthEnabled"`
	Type                 OwnerType `pulumi:"type"`
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

func (o OwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Email }).(pulumi.StringOutput)
}

func (o OwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Id }).(pulumi.StringOutput)
}

func (o OwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Name }).(pulumi.StringOutput)
}

// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
func (o OwnerOutput) TwoFactorAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Owner) *bool { return v.TwoFactorAuthEnabled }).(pulumi.BoolPtrOutput)
}

func (o OwnerOutput) Type() OwnerTypeOutput {
	return o.ApplyT(func(v Owner) OwnerType { return v.Type }).(OwnerTypeOutput)
}

// A project is a collection of environments
type ProjectType struct {
	CreatedAt string `pulumi:"createdAt"`
	// The environments associated with the project
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The ID of the project
	Id string `pulumi:"id"`
	// The name of the project
	Name      string `pulumi:"name"`
	Owner     Owner  `pulumi:"owner"`
	UpdatedAt string `pulumi:"updatedAt"`
}

// A project is a collection of environments
type ProjectTypeOutput struct{ *pulumi.OutputState }

func (ProjectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectType)(nil)).Elem()
}

func (o ProjectTypeOutput) ToProjectTypeOutput() ProjectTypeOutput {
	return o
}

func (o ProjectTypeOutput) ToProjectTypeOutputWithContext(ctx context.Context) ProjectTypeOutput {
	return o
}

func (o ProjectTypeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectType) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The environments associated with the project
func (o ProjectTypeOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectType) []string { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The ID of the project
func (o ProjectTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectType) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the project
func (o ProjectTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectType) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectTypeOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v ProjectType) Owner { return v.Owner }).(OwnerOutput)
}

func (o ProjectTypeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectType) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ProjectCreateEnvironmentInput struct {
	Name string `pulumi:"name"`
	// Indicates whether network connections across environments are allowed.
	NetworkIsolationEnabled *bool `pulumi:"networkIsolationEnabled"`
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus *ProjectCreateEnvironmentInputProtectedStatus `pulumi:"protectedStatus"`
}

// ProjectCreateEnvironmentInputInput is an input type that accepts ProjectCreateEnvironmentInputArgs and ProjectCreateEnvironmentInputOutput values.
// You can construct a concrete instance of `ProjectCreateEnvironmentInputInput` via:
//
//	ProjectCreateEnvironmentInputArgs{...}
type ProjectCreateEnvironmentInputInput interface {
	pulumi.Input

	ToProjectCreateEnvironmentInputOutput() ProjectCreateEnvironmentInputOutput
	ToProjectCreateEnvironmentInputOutputWithContext(context.Context) ProjectCreateEnvironmentInputOutput
}

type ProjectCreateEnvironmentInputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether network connections across environments are allowed.
	NetworkIsolationEnabled pulumi.BoolPtrInput `pulumi:"networkIsolationEnabled"`
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus ProjectCreateEnvironmentInputProtectedStatusPtrInput `pulumi:"protectedStatus"`
}

func (ProjectCreateEnvironmentInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCreateEnvironmentInput)(nil)).Elem()
}

func (i ProjectCreateEnvironmentInputArgs) ToProjectCreateEnvironmentInputOutput() ProjectCreateEnvironmentInputOutput {
	return i.ToProjectCreateEnvironmentInputOutputWithContext(context.Background())
}

func (i ProjectCreateEnvironmentInputArgs) ToProjectCreateEnvironmentInputOutputWithContext(ctx context.Context) ProjectCreateEnvironmentInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCreateEnvironmentInputOutput)
}

// ProjectCreateEnvironmentInputArrayInput is an input type that accepts ProjectCreateEnvironmentInputArray and ProjectCreateEnvironmentInputArrayOutput values.
// You can construct a concrete instance of `ProjectCreateEnvironmentInputArrayInput` via:
//
//	ProjectCreateEnvironmentInputArray{ ProjectCreateEnvironmentInputArgs{...} }
type ProjectCreateEnvironmentInputArrayInput interface {
	pulumi.Input

	ToProjectCreateEnvironmentInputArrayOutput() ProjectCreateEnvironmentInputArrayOutput
	ToProjectCreateEnvironmentInputArrayOutputWithContext(context.Context) ProjectCreateEnvironmentInputArrayOutput
}

type ProjectCreateEnvironmentInputArray []ProjectCreateEnvironmentInputInput

func (ProjectCreateEnvironmentInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectCreateEnvironmentInput)(nil)).Elem()
}

func (i ProjectCreateEnvironmentInputArray) ToProjectCreateEnvironmentInputArrayOutput() ProjectCreateEnvironmentInputArrayOutput {
	return i.ToProjectCreateEnvironmentInputArrayOutputWithContext(context.Background())
}

func (i ProjectCreateEnvironmentInputArray) ToProjectCreateEnvironmentInputArrayOutputWithContext(ctx context.Context) ProjectCreateEnvironmentInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectCreateEnvironmentInputArrayOutput)
}

type ProjectCreateEnvironmentInputOutput struct{ *pulumi.OutputState }

func (ProjectCreateEnvironmentInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectCreateEnvironmentInput)(nil)).Elem()
}

func (o ProjectCreateEnvironmentInputOutput) ToProjectCreateEnvironmentInputOutput() ProjectCreateEnvironmentInputOutput {
	return o
}

func (o ProjectCreateEnvironmentInputOutput) ToProjectCreateEnvironmentInputOutputWithContext(ctx context.Context) ProjectCreateEnvironmentInputOutput {
	return o
}

func (o ProjectCreateEnvironmentInputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectCreateEnvironmentInput) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether network connections across environments are allowed.
func (o ProjectCreateEnvironmentInputOutput) NetworkIsolationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectCreateEnvironmentInput) *bool { return v.NetworkIsolationEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
func (o ProjectCreateEnvironmentInputOutput) ProtectedStatus() ProjectCreateEnvironmentInputProtectedStatusPtrOutput {
	return o.ApplyT(func(v ProjectCreateEnvironmentInput) *ProjectCreateEnvironmentInputProtectedStatus {
		return v.ProtectedStatus
	}).(ProjectCreateEnvironmentInputProtectedStatusPtrOutput)
}

type ProjectCreateEnvironmentInputArrayOutput struct{ *pulumi.OutputState }

func (ProjectCreateEnvironmentInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectCreateEnvironmentInput)(nil)).Elem()
}

func (o ProjectCreateEnvironmentInputArrayOutput) ToProjectCreateEnvironmentInputArrayOutput() ProjectCreateEnvironmentInputArrayOutput {
	return o
}

func (o ProjectCreateEnvironmentInputArrayOutput) ToProjectCreateEnvironmentInputArrayOutputWithContext(ctx context.Context) ProjectCreateEnvironmentInputArrayOutput {
	return o
}

func (o ProjectCreateEnvironmentInputArrayOutput) Index(i pulumi.IntInput) ProjectCreateEnvironmentInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectCreateEnvironmentInput {
		return vs[0].([]ProjectCreateEnvironmentInput)[vs[1].(int)]
	}).(ProjectCreateEnvironmentInputOutput)
}

type ProjectWithCursor struct {
	Cursor string `pulumi:"cursor"`
	// A project is a collection of environments
	Project ProjectType `pulumi:"project"`
}

type ProjectWithCursorOutput struct{ *pulumi.OutputState }

func (ProjectWithCursorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectWithCursor)(nil)).Elem()
}

func (o ProjectWithCursorOutput) ToProjectWithCursorOutput() ProjectWithCursorOutput {
	return o
}

func (o ProjectWithCursorOutput) ToProjectWithCursorOutputWithContext(ctx context.Context) ProjectWithCursorOutput {
	return o
}

func (o ProjectWithCursorOutput) Cursor() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectWithCursor) string { return v.Cursor }).(pulumi.StringOutput)
}

// A project is a collection of environments
func (o ProjectWithCursorOutput) Project() ProjectTypeOutput {
	return o.ApplyT(func(v ProjectWithCursor) ProjectType { return v.Project }).(ProjectTypeOutput)
}

type ProjectWithCursorArrayOutput struct{ *pulumi.OutputState }

func (ProjectWithCursorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectWithCursor)(nil)).Elem()
}

func (o ProjectWithCursorArrayOutput) ToProjectWithCursorArrayOutput() ProjectWithCursorArrayOutput {
	return o
}

func (o ProjectWithCursorArrayOutput) ToProjectWithCursorArrayOutputWithContext(ctx context.Context) ProjectWithCursorArrayOutput {
	return o
}

func (o ProjectWithCursorArrayOutput) Index(i pulumi.IntInput) ProjectWithCursorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectWithCursor {
		return vs[0].([]ProjectWithCursor)[vs[1].(int)]
	}).(ProjectWithCursorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectCreateEnvironmentInputInput)(nil)).Elem(), ProjectCreateEnvironmentInputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectCreateEnvironmentInputArrayInput)(nil)).Elem(), ProjectCreateEnvironmentInputArray{})
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(ProjectTypeOutput{})
	pulumi.RegisterOutputType(ProjectCreateEnvironmentInputOutput{})
	pulumi.RegisterOutputType(ProjectCreateEnvironmentInputArrayOutput{})
	pulumi.RegisterOutputType(ProjectWithCursorOutput{})
	pulumi.RegisterOutputType(ProjectWithCursorArrayOutput{})
}
