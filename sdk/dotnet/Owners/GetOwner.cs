// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Owners
{
    public static class GetOwner
    {
        public static Task<GetOwnerResult> InvokeAsync(GetOwnerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOwnerResult>("render:owners:getOwner", args ?? new GetOwnerArgs(), options.WithDefaults());

        public static Output<GetOwnerResult> Invoke(GetOwnerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOwnerResult>("render:owners:getOwner", args ?? new GetOwnerInvokeArgs(), options.WithDefaults());

        public static Output<GetOwnerResult> Invoke(GetOwnerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOwnerResult>("render:owners:getOwner", args ?? new GetOwnerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOwnerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the user or team
        /// </summary>
        [Input("ownerId", required: true)]
        public string OwnerId { get; set; } = null!;

        public GetOwnerArgs()
        {
        }
        public static new GetOwnerArgs Empty => new GetOwnerArgs();
    }

    public sealed class GetOwnerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the user or team
        /// </summary>
        [Input("ownerId", required: true)]
        public Input<string> OwnerId { get; set; } = null!;

        public GetOwnerInvokeArgs()
        {
        }
        public static new GetOwnerInvokeArgs Empty => new GetOwnerInvokeArgs();
    }


    [OutputType]
    public sealed class GetOwnerResult
    {
        public readonly string Email;
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// Whether two-factor authentication is enabled for the owner. Only present for user owners.
        /// </summary>
        public readonly bool? TwoFactorAuthEnabled;
        public readonly Pulumi.Render.Owners.OwnerType Type;

        [OutputConstructor]
        private GetOwnerResult(
            string email,

            string id,

            string name,

            bool? twoFactorAuthEnabled,

            Pulumi.Render.Owners.OwnerType type)
        {
            Email = email;
            Id = id;
            Name = name;
            TwoFactorAuthEnabled = twoFactorAuthEnabled;
            Type = type;
        }
    }
}
