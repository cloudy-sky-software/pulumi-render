// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Disks
{
    [RenderResourceType("render:disks:RestoreSnapshot")]
    public partial class RestoreSnapshot : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
        /// </summary>
        [Output("instanceId")]
        public Output<string?> InstanceId { get; private set; } = null!;

        [Output("mountPath")]
        public Output<string> MountPath { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("serviceId")]
        public Output<string?> ServiceId { get; private set; } = null!;

        [Output("sizeGB")]
        public Output<int> SizeGB { get; private set; } = null!;

        [Output("snapshotKey")]
        public Output<string> SnapshotKey { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a RestoreSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RestoreSnapshot(string name, RestoreSnapshotArgs args, CustomResourceOptions? options = null)
            : base("render:disks:RestoreSnapshot", name, args ?? new RestoreSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RestoreSnapshot(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("render:disks:RestoreSnapshot", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/cloudy-sky-software/pulumi-render",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RestoreSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RestoreSnapshot Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RestoreSnapshot(name, id, options);
        }
    }

    public sealed class RestoreSnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the disk
        /// </summary>
        [Input("diskId")]
        public Input<string>? DiskId { get; set; }

        /// <summary>
        /// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("snapshotKey", required: true)]
        public Input<string> SnapshotKey { get; set; } = null!;

        public RestoreSnapshotArgs()
        {
        }
        public static new RestoreSnapshotArgs Empty => new RestoreSnapshotArgs();
    }
}
