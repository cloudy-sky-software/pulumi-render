// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvalue

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CidrBlockAndDescription struct {
	CidrBlock string `pulumi:"cidrBlock"`
	// User-provided description of the CIDR block
	Description string `pulumi:"description"`
}

// CidrBlockAndDescriptionInput is an input type that accepts CidrBlockAndDescriptionArgs and CidrBlockAndDescriptionOutput values.
// You can construct a concrete instance of `CidrBlockAndDescriptionInput` via:
//
//	CidrBlockAndDescriptionArgs{...}
type CidrBlockAndDescriptionInput interface {
	pulumi.Input

	ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput
	ToCidrBlockAndDescriptionOutputWithContext(context.Context) CidrBlockAndDescriptionOutput
}

type CidrBlockAndDescriptionArgs struct {
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// User-provided description of the CIDR block
	Description pulumi.StringInput `pulumi:"description"`
}

func (CidrBlockAndDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockAndDescription)(nil)).Elem()
}

func (i CidrBlockAndDescriptionArgs) ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput {
	return i.ToCidrBlockAndDescriptionOutputWithContext(context.Background())
}

func (i CidrBlockAndDescriptionArgs) ToCidrBlockAndDescriptionOutputWithContext(ctx context.Context) CidrBlockAndDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAndDescriptionOutput)
}

// CidrBlockAndDescriptionArrayInput is an input type that accepts CidrBlockAndDescriptionArray and CidrBlockAndDescriptionArrayOutput values.
// You can construct a concrete instance of `CidrBlockAndDescriptionArrayInput` via:
//
//	CidrBlockAndDescriptionArray{ CidrBlockAndDescriptionArgs{...} }
type CidrBlockAndDescriptionArrayInput interface {
	pulumi.Input

	ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput
	ToCidrBlockAndDescriptionArrayOutputWithContext(context.Context) CidrBlockAndDescriptionArrayOutput
}

type CidrBlockAndDescriptionArray []CidrBlockAndDescriptionInput

func (CidrBlockAndDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockAndDescription)(nil)).Elem()
}

func (i CidrBlockAndDescriptionArray) ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput {
	return i.ToCidrBlockAndDescriptionArrayOutputWithContext(context.Background())
}

func (i CidrBlockAndDescriptionArray) ToCidrBlockAndDescriptionArrayOutputWithContext(ctx context.Context) CidrBlockAndDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAndDescriptionArrayOutput)
}

type CidrBlockAndDescriptionOutput struct{ *pulumi.OutputState }

func (CidrBlockAndDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockAndDescription)(nil)).Elem()
}

func (o CidrBlockAndDescriptionOutput) ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput {
	return o
}

func (o CidrBlockAndDescriptionOutput) ToCidrBlockAndDescriptionOutputWithContext(ctx context.Context) CidrBlockAndDescriptionOutput {
	return o
}

func (o CidrBlockAndDescriptionOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockAndDescription) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// User-provided description of the CIDR block
func (o CidrBlockAndDescriptionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockAndDescription) string { return v.Description }).(pulumi.StringOutput)
}

type CidrBlockAndDescriptionArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockAndDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockAndDescription)(nil)).Elem()
}

func (o CidrBlockAndDescriptionArrayOutput) ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput {
	return o
}

func (o CidrBlockAndDescriptionArrayOutput) ToCidrBlockAndDescriptionArrayOutputWithContext(ctx context.Context) CidrBlockAndDescriptionArrayOutput {
	return o
}

func (o CidrBlockAndDescriptionArrayOutput) Index(i pulumi.IntInput) CidrBlockAndDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlockAndDescription {
		return vs[0].([]CidrBlockAndDescription)[vs[1].(int)]
	}).(CidrBlockAndDescriptionOutput)
}

// A Key Value instance
type KeyValueType struct {
	// The creation time of the Key Value instance
	CreatedAt string `pulumi:"createdAt"`
	// The URL to view the Key Value instance in the Render Dashboard
	DashboardUrl string `pulumi:"dashboardUrl"`
	// The ID of the environment the Key Value instance is associated with
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the Key Value instance
	Id string `pulumi:"id"`
	// The IP allow list for the Key Value instance
	IpAllowList []CidrBlockAndDescription `pulumi:"ipAllowList"`
	// The name of the Key Value instance
	Name string `pulumi:"name"`
	// Options for a Key Value instance
	Options KeyValueOptions `pulumi:"options"`
	Owner   Owner           `pulumi:"owner"`
	Plan    KeyValuePlan    `pulumi:"plan"`
	// Defaults to "oregon"
	Region KeyValueRegion `pulumi:"region"`
	Status KeyValueStatus `pulumi:"status"`
	// The last updated time of the Key Value instance
	UpdatedAt string `pulumi:"updatedAt"`
	// The version of Key Value
	Version string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for KeyValueType
func (val *KeyValueType) Defaults() *KeyValueType {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Region) {
		tmp.Region = KeyValueRegion("oregon")
	}
	return &tmp
}

// A Key Value instance
type KeyValueTypeOutput struct{ *pulumi.OutputState }

func (KeyValueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValueType)(nil)).Elem()
}

func (o KeyValueTypeOutput) ToKeyValueTypeOutput() KeyValueTypeOutput {
	return o
}

func (o KeyValueTypeOutput) ToKeyValueTypeOutputWithContext(ctx context.Context) KeyValueTypeOutput {
	return o
}

// The creation time of the Key Value instance
func (o KeyValueTypeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view the Key Value instance in the Render Dashboard
func (o KeyValueTypeOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.DashboardUrl }).(pulumi.StringOutput)
}

// The ID of the environment the Key Value instance is associated with
func (o KeyValueTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyValueType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// The ID of the Key Value instance
func (o KeyValueTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.Id }).(pulumi.StringOutput)
}

// The IP allow list for the Key Value instance
func (o KeyValueTypeOutput) IpAllowList() CidrBlockAndDescriptionArrayOutput {
	return o.ApplyT(func(v KeyValueType) []CidrBlockAndDescription { return v.IpAllowList }).(CidrBlockAndDescriptionArrayOutput)
}

// The name of the Key Value instance
func (o KeyValueTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.Name }).(pulumi.StringOutput)
}

// Options for a Key Value instance
func (o KeyValueTypeOutput) Options() KeyValueOptionsOutput {
	return o.ApplyT(func(v KeyValueType) KeyValueOptions { return v.Options }).(KeyValueOptionsOutput)
}

func (o KeyValueTypeOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v KeyValueType) Owner { return v.Owner }).(OwnerOutput)
}

func (o KeyValueTypeOutput) Plan() KeyValuePlanOutput {
	return o.ApplyT(func(v KeyValueType) KeyValuePlan { return v.Plan }).(KeyValuePlanOutput)
}

// Defaults to "oregon"
func (o KeyValueTypeOutput) Region() KeyValueRegionOutput {
	return o.ApplyT(func(v KeyValueType) KeyValueRegion { return v.Region }).(KeyValueRegionOutput)
}

func (o KeyValueTypeOutput) Status() KeyValueStatusOutput {
	return o.ApplyT(func(v KeyValueType) KeyValueStatus { return v.Status }).(KeyValueStatusOutput)
}

// The last updated time of the Key Value instance
func (o KeyValueTypeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The version of Key Value
func (o KeyValueTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueType) string { return v.Version }).(pulumi.StringOutput)
}

// A Key Value instance
type KeyValueConnectionInfo struct {
	// The CLI (redis-cli or valkey-cli) command to connect to the Key Value instance
	CliCommand string `pulumi:"cliCommand"`
	// The connection string to use from outside Render
	ExternalConnectionString string `pulumi:"externalConnectionString"`
	// The connection string to use from within Render
	InternalConnectionString string `pulumi:"internalConnectionString"`
}

// A Key Value instance
type KeyValueDetail struct {
	// The creation time of the Key Value instance
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the environment the Key Value instance is associated with
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the Key Value instance
	Id string `pulumi:"id"`
	// The IP allow list for the Key Value instance
	IpAllowList []CidrBlockAndDescription         `pulumi:"ipAllowList"`
	Maintenance *RedisDetailpropertiesmaintenance `pulumi:"maintenance"`
	// The name of the Key Value instance
	Name string `pulumi:"name"`
	// Options for a Key Value instance
	Options KeyValueOptions    `pulumi:"options"`
	Owner   Owner              `pulumi:"owner"`
	Plan    KeyValueDetailPlan `pulumi:"plan"`
	// Defaults to "oregon"
	Region KeyValueDetailRegion `pulumi:"region"`
	Status KeyValueDetailStatus `pulumi:"status"`
	// The last updated time of the Key Value instance
	UpdatedAt string `pulumi:"updatedAt"`
	// The version of Key Value
	Version string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for KeyValueDetail
func (val *KeyValueDetail) Defaults() *KeyValueDetail {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Region) {
		tmp.Region = KeyValueDetailRegion("oregon")
	}
	return &tmp
}

// Options for a Key Value instance
type KeyValueOptions struct {
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
}

// Options for a Key Value instance
type KeyValueOptionsOutput struct{ *pulumi.OutputState }

func (KeyValueOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValueOptions)(nil)).Elem()
}

func (o KeyValueOptionsOutput) ToKeyValueOptionsOutput() KeyValueOptionsOutput {
	return o
}

func (o KeyValueOptionsOutput) ToKeyValueOptionsOutputWithContext(ctx context.Context) KeyValueOptionsOutput {
	return o
}

func (o KeyValueOptionsOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyValueOptions) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

type KeyValueWithCursor struct {
	Cursor string `pulumi:"cursor"`
	// A Key Value instance
	KeyValue KeyValueType `pulumi:"keyValue"`
}

// Defaults sets the appropriate defaults for KeyValueWithCursor
func (val *KeyValueWithCursor) Defaults() *KeyValueWithCursor {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.KeyValue = *tmp.KeyValue.Defaults()

	return &tmp
}

type KeyValueWithCursorOutput struct{ *pulumi.OutputState }

func (KeyValueWithCursorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValueWithCursor)(nil)).Elem()
}

func (o KeyValueWithCursorOutput) ToKeyValueWithCursorOutput() KeyValueWithCursorOutput {
	return o
}

func (o KeyValueWithCursorOutput) ToKeyValueWithCursorOutputWithContext(ctx context.Context) KeyValueWithCursorOutput {
	return o
}

func (o KeyValueWithCursorOutput) Cursor() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValueWithCursor) string { return v.Cursor }).(pulumi.StringOutput)
}

// A Key Value instance
func (o KeyValueWithCursorOutput) KeyValue() KeyValueTypeOutput {
	return o.ApplyT(func(v KeyValueWithCursor) KeyValueType { return v.KeyValue }).(KeyValueTypeOutput)
}

type KeyValueWithCursorArrayOutput struct{ *pulumi.OutputState }

func (KeyValueWithCursorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyValueWithCursor)(nil)).Elem()
}

func (o KeyValueWithCursorArrayOutput) ToKeyValueWithCursorArrayOutput() KeyValueWithCursorArrayOutput {
	return o
}

func (o KeyValueWithCursorArrayOutput) ToKeyValueWithCursorArrayOutputWithContext(ctx context.Context) KeyValueWithCursorArrayOutput {
	return o
}

func (o KeyValueWithCursorArrayOutput) Index(i pulumi.IntInput) KeyValueWithCursorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyValueWithCursor {
		return vs[0].([]KeyValueWithCursor)[vs[1].(int)]
	}).(KeyValueWithCursorOutput)
}

type Owner struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
	// Whether two-factor authentication is enabled for the owner. Only present for user owners.
	TwoFactorAuthEnabled *bool     `pulumi:"twoFactorAuthEnabled"`
	Type                 OwnerType `pulumi:"type"`
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

func (o OwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Email }).(pulumi.StringOutput)
}

func (o OwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Id }).(pulumi.StringOutput)
}

func (o OwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Name }).(pulumi.StringOutput)
}

// Whether two-factor authentication is enabled for the owner. Only present for user owners.
func (o OwnerOutput) TwoFactorAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Owner) *bool { return v.TwoFactorAuthEnabled }).(pulumi.BoolPtrOutput)
}

func (o OwnerOutput) Type() OwnerTypeOutput {
	return o.ApplyT(func(v Owner) OwnerType { return v.Type }).(OwnerTypeOutput)
}

type RedisDetailpropertiesmaintenance struct {
	Id string `pulumi:"id"`
	// If present, the maintenance run cannot be scheduled for later than this date-time.
	PendingMaintenanceBy *string                               `pulumi:"pendingMaintenanceBy"`
	ScheduledAt          string                                `pulumi:"scheduledAt"`
	State                RedisDetailpropertiesmaintenanceState `pulumi:"state"`
	Type                 string                                `pulumi:"type"`
}

type RedisDetailpropertiesmaintenanceOutput struct{ *pulumi.OutputState }

func (RedisDetailpropertiesmaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisDetailpropertiesmaintenance)(nil)).Elem()
}

func (o RedisDetailpropertiesmaintenanceOutput) ToRedisDetailpropertiesmaintenanceOutput() RedisDetailpropertiesmaintenanceOutput {
	return o
}

func (o RedisDetailpropertiesmaintenanceOutput) ToRedisDetailpropertiesmaintenanceOutputWithContext(ctx context.Context) RedisDetailpropertiesmaintenanceOutput {
	return o
}

func (o RedisDetailpropertiesmaintenanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailpropertiesmaintenance) string { return v.Id }).(pulumi.StringOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o RedisDetailpropertiesmaintenanceOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisDetailpropertiesmaintenance) *string { return v.PendingMaintenanceBy }).(pulumi.StringPtrOutput)
}

func (o RedisDetailpropertiesmaintenanceOutput) ScheduledAt() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailpropertiesmaintenance) string { return v.ScheduledAt }).(pulumi.StringOutput)
}

func (o RedisDetailpropertiesmaintenanceOutput) State() RedisDetailpropertiesmaintenanceStateOutput {
	return o.ApplyT(func(v RedisDetailpropertiesmaintenance) RedisDetailpropertiesmaintenanceState { return v.State }).(RedisDetailpropertiesmaintenanceStateOutput)
}

func (o RedisDetailpropertiesmaintenanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailpropertiesmaintenance) string { return v.Type }).(pulumi.StringOutput)
}

type RedisDetailpropertiesmaintenancePtrOutput struct{ *pulumi.OutputState }

func (RedisDetailpropertiesmaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisDetailpropertiesmaintenance)(nil)).Elem()
}

func (o RedisDetailpropertiesmaintenancePtrOutput) ToRedisDetailpropertiesmaintenancePtrOutput() RedisDetailpropertiesmaintenancePtrOutput {
	return o
}

func (o RedisDetailpropertiesmaintenancePtrOutput) ToRedisDetailpropertiesmaintenancePtrOutputWithContext(ctx context.Context) RedisDetailpropertiesmaintenancePtrOutput {
	return o
}

func (o RedisDetailpropertiesmaintenancePtrOutput) Elem() RedisDetailpropertiesmaintenanceOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) RedisDetailpropertiesmaintenance {
		if v != nil {
			return *v
		}
		var ret RedisDetailpropertiesmaintenance
		return ret
	}).(RedisDetailpropertiesmaintenanceOutput)
}

func (o RedisDetailpropertiesmaintenancePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o RedisDetailpropertiesmaintenancePtrOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) *string {
		if v == nil {
			return nil
		}
		return v.PendingMaintenanceBy
	}).(pulumi.StringPtrOutput)
}

func (o RedisDetailpropertiesmaintenancePtrOutput) ScheduledAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduledAt
	}).(pulumi.StringPtrOutput)
}

func (o RedisDetailpropertiesmaintenancePtrOutput) State() RedisDetailpropertiesmaintenanceStatePtrOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) *RedisDetailpropertiesmaintenanceState {
		if v == nil {
			return nil
		}
		return &v.State
	}).(RedisDetailpropertiesmaintenanceStatePtrOutput)
}

func (o RedisDetailpropertiesmaintenancePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailpropertiesmaintenance) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAndDescriptionInput)(nil)).Elem(), CidrBlockAndDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAndDescriptionArrayInput)(nil)).Elem(), CidrBlockAndDescriptionArray{})
	pulumi.RegisterOutputType(CidrBlockAndDescriptionOutput{})
	pulumi.RegisterOutputType(CidrBlockAndDescriptionArrayOutput{})
	pulumi.RegisterOutputType(KeyValueTypeOutput{})
	pulumi.RegisterOutputType(KeyValueOptionsOutput{})
	pulumi.RegisterOutputType(KeyValueWithCursorOutput{})
	pulumi.RegisterOutputType(KeyValueWithCursorArrayOutput{})
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(RedisDetailpropertiesmaintenanceOutput{})
	pulumi.RegisterOutputType(RedisDetailpropertiesmaintenancePtrOutput{})
}
