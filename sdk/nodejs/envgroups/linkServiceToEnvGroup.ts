// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class LinkServiceToEnvGroup extends pulumi.CustomResource {
    /**
     * Get an existing LinkServiceToEnvGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): LinkServiceToEnvGroup {
        return new LinkServiceToEnvGroup(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:env-groups:LinkServiceToEnvGroup';

    /**
     * Returns true if the given object is an instance of LinkServiceToEnvGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LinkServiceToEnvGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkServiceToEnvGroup.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly envVars: pulumi.Output<outputs.envgroups.EnvVar[] | undefined>;
    declare public /*out*/ readonly environmentId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly name: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly ownerId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly secretFiles: pulumi.Output<outputs.envgroups.SecretFile[] | undefined>;
    /**
     * List of serviceIds linked to the envGroup
     */
    declare public /*out*/ readonly serviceLinks: pulumi.Output<outputs.envgroups.EnvGroupLink[] | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string | undefined>;

    /**
     * Create a LinkServiceToEnvGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LinkServiceToEnvGroupArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["envGroupId"] = args?.envGroupId;
            resourceInputs["serviceId"] = args?.serviceId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["envVars"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["secretFiles"] = undefined /*out*/;
            resourceInputs["serviceLinks"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["envVars"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["secretFiles"] = undefined /*out*/;
            resourceInputs["serviceLinks"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkServiceToEnvGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a LinkServiceToEnvGroup resource.
 */
export interface LinkServiceToEnvGroupArgs {
    /**
     * Filter for resources that belong to an environment group
     */
    envGroupId?: pulumi.Input<string>;
    /**
     * The ID of the service
     */
    serviceId?: pulumi.Input<string>;
}
