// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SuspendPostgres struct {
	pulumi.CustomResourceState
}

// NewSuspendPostgres registers a new resource with the given unique name, arguments, and options.
func NewSuspendPostgres(ctx *pulumi.Context,
	name string, args *SuspendPostgresArgs, opts ...pulumi.ResourceOption) (*SuspendPostgres, error) {
	if args == nil {
		args = &SuspendPostgresArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SuspendPostgres
	err := ctx.RegisterResource("render:postgres:SuspendPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuspendPostgres gets an existing SuspendPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuspendPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuspendPostgresState, opts ...pulumi.ResourceOption) (*SuspendPostgres, error) {
	var resource SuspendPostgres
	err := ctx.ReadResource("render:postgres:SuspendPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SuspendPostgres resources.
type suspendPostgresState struct {
}

type SuspendPostgresState struct {
}

func (SuspendPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*suspendPostgresState)(nil)).Elem()
}

type suspendPostgresArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a SuspendPostgres resource.
type SuspendPostgresArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (SuspendPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*suspendPostgresArgs)(nil)).Elem()
}

type SuspendPostgresInput interface {
	pulumi.Input

	ToSuspendPostgresOutput() SuspendPostgresOutput
	ToSuspendPostgresOutputWithContext(ctx context.Context) SuspendPostgresOutput
}

func (*SuspendPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**SuspendPostgres)(nil)).Elem()
}

func (i *SuspendPostgres) ToSuspendPostgresOutput() SuspendPostgresOutput {
	return i.ToSuspendPostgresOutputWithContext(context.Background())
}

func (i *SuspendPostgres) ToSuspendPostgresOutputWithContext(ctx context.Context) SuspendPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuspendPostgresOutput)
}

type SuspendPostgresOutput struct{ *pulumi.OutputState }

func (SuspendPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuspendPostgres)(nil)).Elem()
}

func (o SuspendPostgresOutput) ToSuspendPostgresOutput() SuspendPostgresOutput {
	return o
}

func (o SuspendPostgresOutput) ToSuspendPostgresOutputWithContext(ctx context.Context) SuspendPostgresOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuspendPostgresInput)(nil)).Elem(), &SuspendPostgres{})
	pulumi.RegisterOutputType(SuspendPostgresOutput{})
}
