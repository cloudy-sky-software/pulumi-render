// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Metrics
{
    public static class ListActiveConnections
    {
        public static Task<ListActiveConnectionsResult> InvokeAsync(ListActiveConnectionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListActiveConnectionsResult>("render:metrics:listActiveConnections", args ?? new ListActiveConnectionsArgs(), options.WithDefaults());

        public static Output<ListActiveConnectionsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListActiveConnectionsResult>("render:metrics:listActiveConnections", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListActiveConnectionsArgs : global::Pulumi.InvokeArgs
    {
        public ListActiveConnectionsArgs()
        {
        }
        public static new ListActiveConnectionsArgs Empty => new ListActiveConnectionsArgs();
    }


    [OutputType]
    public sealed class ListActiveConnectionsResult
    {
        public readonly ImmutableArray<Outputs.ListActiveConnectionsItemProperties> Items;

        [OutputConstructor]
        private ListActiveConnectionsResult(ImmutableArray<Outputs.ListActiveConnectionsItemProperties> items)
        {
            Items = items;
        }
    }
}
