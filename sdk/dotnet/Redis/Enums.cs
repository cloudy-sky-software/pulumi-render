// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Redis
{
    [EnumType]
    public readonly struct MaintenancePropertiesState : IEquatable<MaintenancePropertiesState>
    {
        private readonly string _value;

        private MaintenancePropertiesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MaintenancePropertiesState Scheduled { get; } = new MaintenancePropertiesState("scheduled");
        public static MaintenancePropertiesState InProgress { get; } = new MaintenancePropertiesState("in_progress");
        public static MaintenancePropertiesState UserFixRequired { get; } = new MaintenancePropertiesState("user_fix_required");
        public static MaintenancePropertiesState Cancelled { get; } = new MaintenancePropertiesState("cancelled");
        public static MaintenancePropertiesState Succeeded { get; } = new MaintenancePropertiesState("succeeded");
        public static MaintenancePropertiesState Failed { get; } = new MaintenancePropertiesState("failed");

        public static bool operator ==(MaintenancePropertiesState left, MaintenancePropertiesState right) => left.Equals(right);
        public static bool operator !=(MaintenancePropertiesState left, MaintenancePropertiesState right) => !left.Equals(right);

        public static explicit operator string(MaintenancePropertiesState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MaintenancePropertiesState other && Equals(other);
        public bool Equals(MaintenancePropertiesState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The eviction policy for the Redis instance
    /// </summary>
    [EnumType]
    public readonly struct MaxmemoryPolicy : IEquatable<MaxmemoryPolicy>
    {
        private readonly string _value;

        private MaxmemoryPolicy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static MaxmemoryPolicy Noeviction { get; } = new MaxmemoryPolicy("noeviction");
        public static MaxmemoryPolicy AllkeysLfu { get; } = new MaxmemoryPolicy("allkeys_lfu");
        public static MaxmemoryPolicy AllkeysLru { get; } = new MaxmemoryPolicy("allkeys_lru");
        public static MaxmemoryPolicy AllkeysRandom { get; } = new MaxmemoryPolicy("allkeys_random");
        public static MaxmemoryPolicy VolatileLfu { get; } = new MaxmemoryPolicy("volatile_lfu");
        public static MaxmemoryPolicy VolatileLru { get; } = new MaxmemoryPolicy("volatile_lru");
        public static MaxmemoryPolicy VolatileRandom { get; } = new MaxmemoryPolicy("volatile_random");
        public static MaxmemoryPolicy VolatileTtl { get; } = new MaxmemoryPolicy("volatile_ttl");

        public static bool operator ==(MaxmemoryPolicy left, MaxmemoryPolicy right) => left.Equals(right);
        public static bool operator !=(MaxmemoryPolicy left, MaxmemoryPolicy right) => !left.Equals(right);

        public static explicit operator string(MaxmemoryPolicy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is MaxmemoryPolicy other && Equals(other);
        public bool Equals(MaxmemoryPolicy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        private OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OwnerType User { get; } = new OwnerType("user");
        public static OwnerType Team { get; } = new OwnerType("team");

        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);

        public static explicit operator string(OwnerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwnerType other && Equals(other);
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan Free { get; } = new Plan("free");
        public static Plan Starter { get; } = new Plan("starter");
        public static Plan Standard { get; } = new Plan("standard");
        public static Plan Pro { get; } = new Plan("pro");
        public static Plan ProPlus { get; } = new Plan("pro_plus");
        public static Plan Custom { get; } = new Plan("custom");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisDetailMaintenancePropertiesState : IEquatable<RedisDetailMaintenancePropertiesState>
    {
        private readonly string _value;

        private RedisDetailMaintenancePropertiesState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailMaintenancePropertiesState Scheduled { get; } = new RedisDetailMaintenancePropertiesState("scheduled");
        public static RedisDetailMaintenancePropertiesState InProgress { get; } = new RedisDetailMaintenancePropertiesState("in_progress");
        public static RedisDetailMaintenancePropertiesState UserFixRequired { get; } = new RedisDetailMaintenancePropertiesState("user_fix_required");
        public static RedisDetailMaintenancePropertiesState Cancelled { get; } = new RedisDetailMaintenancePropertiesState("cancelled");
        public static RedisDetailMaintenancePropertiesState Succeeded { get; } = new RedisDetailMaintenancePropertiesState("succeeded");
        public static RedisDetailMaintenancePropertiesState Failed { get; } = new RedisDetailMaintenancePropertiesState("failed");

        public static bool operator ==(RedisDetailMaintenancePropertiesState left, RedisDetailMaintenancePropertiesState right) => left.Equals(right);
        public static bool operator !=(RedisDetailMaintenancePropertiesState left, RedisDetailMaintenancePropertiesState right) => !left.Equals(right);

        public static explicit operator string(RedisDetailMaintenancePropertiesState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailMaintenancePropertiesState other && Equals(other);
        public bool Equals(RedisDetailMaintenancePropertiesState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisDetailPlan : IEquatable<RedisDetailPlan>
    {
        private readonly string _value;

        private RedisDetailPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailPlan Free { get; } = new RedisDetailPlan("free");
        public static RedisDetailPlan Starter { get; } = new RedisDetailPlan("starter");
        public static RedisDetailPlan Standard { get; } = new RedisDetailPlan("standard");
        public static RedisDetailPlan Pro { get; } = new RedisDetailPlan("pro");
        public static RedisDetailPlan ProPlus { get; } = new RedisDetailPlan("pro_plus");
        public static RedisDetailPlan Custom { get; } = new RedisDetailPlan("custom");

        public static bool operator ==(RedisDetailPlan left, RedisDetailPlan right) => left.Equals(right);
        public static bool operator !=(RedisDetailPlan left, RedisDetailPlan right) => !left.Equals(right);

        public static explicit operator string(RedisDetailPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailPlan other && Equals(other);
        public bool Equals(RedisDetailPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct RedisDetailRegion : IEquatable<RedisDetailRegion>
    {
        private readonly string _value;

        private RedisDetailRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailRegion Frankfurt { get; } = new RedisDetailRegion("frankfurt");
        public static RedisDetailRegion Oregon { get; } = new RedisDetailRegion("oregon");
        public static RedisDetailRegion Ohio { get; } = new RedisDetailRegion("ohio");
        public static RedisDetailRegion Singapore { get; } = new RedisDetailRegion("singapore");
        public static RedisDetailRegion Virginia { get; } = new RedisDetailRegion("virginia");

        public static bool operator ==(RedisDetailRegion left, RedisDetailRegion right) => left.Equals(right);
        public static bool operator !=(RedisDetailRegion left, RedisDetailRegion right) => !left.Equals(right);

        public static explicit operator string(RedisDetailRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailRegion other && Equals(other);
        public bool Equals(RedisDetailRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisDetailStatus : IEquatable<RedisDetailStatus>
    {
        private readonly string _value;

        private RedisDetailStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailStatus Creating { get; } = new RedisDetailStatus("creating");
        public static RedisDetailStatus Available { get; } = new RedisDetailStatus("available");
        public static RedisDetailStatus Unavailable { get; } = new RedisDetailStatus("unavailable");
        public static RedisDetailStatus ConfigRestart { get; } = new RedisDetailStatus("config_restart");
        public static RedisDetailStatus Suspended { get; } = new RedisDetailStatus("suspended");
        public static RedisDetailStatus MaintenanceScheduled { get; } = new RedisDetailStatus("maintenance_scheduled");
        public static RedisDetailStatus MaintenanceInProgress { get; } = new RedisDetailStatus("maintenance_in_progress");
        public static RedisDetailStatus RecoveryFailed { get; } = new RedisDetailStatus("recovery_failed");
        public static RedisDetailStatus RecoveryInProgress { get; } = new RedisDetailStatus("recovery_in_progress");
        public static RedisDetailStatus Unknown { get; } = new RedisDetailStatus("unknown");
        public static RedisDetailStatus UpdatingInstance { get; } = new RedisDetailStatus("updating_instance");

        public static bool operator ==(RedisDetailStatus left, RedisDetailStatus right) => left.Equals(right);
        public static bool operator !=(RedisDetailStatus left, RedisDetailStatus right) => !left.Equals(right);

        public static explicit operator string(RedisDetailStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailStatus other && Equals(other);
        public bool Equals(RedisDetailStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisPlan : IEquatable<RedisPlan>
    {
        private readonly string _value;

        private RedisPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisPlan Free { get; } = new RedisPlan("free");
        public static RedisPlan Starter { get; } = new RedisPlan("starter");
        public static RedisPlan Standard { get; } = new RedisPlan("standard");
        public static RedisPlan Pro { get; } = new RedisPlan("pro");
        public static RedisPlan ProPlus { get; } = new RedisPlan("pro_plus");
        public static RedisPlan Custom { get; } = new RedisPlan("custom");

        public static bool operator ==(RedisPlan left, RedisPlan right) => left.Equals(right);
        public static bool operator !=(RedisPlan left, RedisPlan right) => !left.Equals(right);

        public static explicit operator string(RedisPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisPlan other && Equals(other);
        public bool Equals(RedisPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct RedisRegion : IEquatable<RedisRegion>
    {
        private readonly string _value;

        private RedisRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisRegion Frankfurt { get; } = new RedisRegion("frankfurt");
        public static RedisRegion Oregon { get; } = new RedisRegion("oregon");
        public static RedisRegion Ohio { get; } = new RedisRegion("ohio");
        public static RedisRegion Singapore { get; } = new RedisRegion("singapore");
        public static RedisRegion Virginia { get; } = new RedisRegion("virginia");

        public static bool operator ==(RedisRegion left, RedisRegion right) => left.Equals(right);
        public static bool operator !=(RedisRegion left, RedisRegion right) => !left.Equals(right);

        public static explicit operator string(RedisRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisRegion other && Equals(other);
        public bool Equals(RedisRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisStatus : IEquatable<RedisStatus>
    {
        private readonly string _value;

        private RedisStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisStatus Creating { get; } = new RedisStatus("creating");
        public static RedisStatus Available { get; } = new RedisStatus("available");
        public static RedisStatus Unavailable { get; } = new RedisStatus("unavailable");
        public static RedisStatus ConfigRestart { get; } = new RedisStatus("config_restart");
        public static RedisStatus Suspended { get; } = new RedisStatus("suspended");
        public static RedisStatus MaintenanceScheduled { get; } = new RedisStatus("maintenance_scheduled");
        public static RedisStatus MaintenanceInProgress { get; } = new RedisStatus("maintenance_in_progress");
        public static RedisStatus RecoveryFailed { get; } = new RedisStatus("recovery_failed");
        public static RedisStatus RecoveryInProgress { get; } = new RedisStatus("recovery_in_progress");
        public static RedisStatus Unknown { get; } = new RedisStatus("unknown");
        public static RedisStatus UpdatingInstance { get; } = new RedisStatus("updating_instance");

        public static bool operator ==(RedisStatus left, RedisStatus right) => left.Equals(right);
        public static bool operator !=(RedisStatus left, RedisStatus right) => !left.Equals(right);

        public static explicit operator string(RedisStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisStatus other && Equals(other);
        public bool Equals(RedisStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Region Frankfurt { get; } = new Region("frankfurt");
        public static Region Oregon { get; } = new Region("oregon");
        public static Region Ohio { get; } = new Region("ohio");
        public static Region Singapore { get; } = new Region("singapore");
        public static Region Virginia { get; } = new Region("virginia");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Creating { get; } = new Status("creating");
        public static Status Available { get; } = new Status("available");
        public static Status Unavailable { get; } = new Status("unavailable");
        public static Status ConfigRestart { get; } = new Status("config_restart");
        public static Status Suspended { get; } = new Status("suspended");
        public static Status MaintenanceScheduled { get; } = new Status("maintenance_scheduled");
        public static Status MaintenanceInProgress { get; } = new Status("maintenance_in_progress");
        public static Status RecoveryFailed { get; } = new Status("recovery_failed");
        public static Status RecoveryInProgress { get; } = new Status("recovery_in_progress");
        public static Status Unknown { get; } = new Status("unknown");
        public static Status UpdatingInstance { get; } = new Status("updating_instance");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
