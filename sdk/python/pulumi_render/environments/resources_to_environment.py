# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['ResourcesToEnvironmentArgs', 'ResourcesToEnvironment']

@pulumi.input_type
class ResourcesToEnvironmentArgs:
    def __init__(__self__, *,
                 resource_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 environment_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourcesToEnvironment resource.
        """
        pulumi.set(__self__, "resource_ids", resource_ids)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "resource_ids")

    @resource_ids.setter
    def resource_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_ids", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)


class ResourcesToEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ResourcesToEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourcesToEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourcesToEnvironment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourcesToEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcesToEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 resource_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcesToEnvironmentArgs.__new__(ResourcesToEnvironmentArgs)

            __props__.__dict__["environment_id"] = environment_id
            if resource_ids is None and not opts.urn:
                raise TypeError("Missing required property 'resource_ids'")
            __props__.__dict__["resource_ids"] = resource_ids
            __props__.__dict__["databases_ids"] = None
            __props__.__dict__["env_group_ids"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["protected_status"] = None
            __props__.__dict__["redis_ids"] = None
            __props__.__dict__["service_ids"] = None
        super(ResourcesToEnvironment, __self__).__init__(
            'render:environments:ResourcesToEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ResourcesToEnvironment':
        """
        Get an existing ResourcesToEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ResourcesToEnvironmentArgs.__new__(ResourcesToEnvironmentArgs)

        __props__.__dict__["databases_ids"] = None
        __props__.__dict__["env_group_ids"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project_id"] = None
        __props__.__dict__["protected_status"] = None
        __props__.__dict__["redis_ids"] = None
        __props__.__dict__["resource_ids"] = None
        __props__.__dict__["service_ids"] = None
        return ResourcesToEnvironment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="databasesIds")
    def databases_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "databases_ids")

    @property
    @pulumi.getter(name="envGroupIds")
    def env_group_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "env_group_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="protectedStatus")
    def protected_status(self) -> pulumi.Output['ProtectedStatus']:
        """
        Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
        """
        return pulumi.get(self, "protected_status")

    @property
    @pulumi.getter(name="redisIds")
    def redis_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "redis_ids")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "service_ids")

