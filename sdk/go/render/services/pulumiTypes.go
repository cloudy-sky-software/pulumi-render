// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A background worker service
type BackgroundWorkerType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string            `pulumi:"repo"`
	ServiceDetails *ServiceDetails   `pulumi:"serviceDetails"`
	Slug           *string           `pulumi:"slug"`
	Suspended      *ServiceSuspended `pulumi:"suspended"`
	Suspenders     []string          `pulumi:"suspenders"`
	Type           *string           `pulumi:"type"`
	UpdatedAt      *string           `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for BackgroundWorkerType
func (val *BackgroundWorkerType) Defaults() *BackgroundWorkerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "background_worker"
		tmp.Type = &type_
	}
	return &tmp
}

type Commit struct {
	CreatedAt *string `pulumi:"createdAt"`
	Id        *string `pulumi:"id"`
	Message   *string `pulumi:"message"`
}

type CommitOutput struct{ *pulumi.OutputState }

func (CommitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Commit)(nil)).Elem()
}

func (o CommitOutput) ToCommitOutput() CommitOutput {
	return o
}

func (o CommitOutput) ToCommitOutputWithContext(ctx context.Context) CommitOutput {
	return o
}

func (o CommitOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Commit) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o CommitOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Commit) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o CommitOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Commit) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type CommitPtrOutput struct{ *pulumi.OutputState }

func (CommitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Commit)(nil)).Elem()
}

func (o CommitPtrOutput) ToCommitPtrOutput() CommitPtrOutput {
	return o
}

func (o CommitPtrOutput) ToCommitPtrOutputWithContext(ctx context.Context) CommitPtrOutput {
	return o
}

func (o CommitPtrOutput) Elem() CommitOutput {
	return o.ApplyT(func(v *Commit) Commit {
		if v != nil {
			return *v
		}
		var ret Commit
		return ret
	}).(CommitOutput)
}

func (o CommitPtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Commit) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

func (o CommitPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Commit) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o CommitPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Commit) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// A cron job
type CronJobType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                 `pulumi:"repo"`
	ServiceDetails *CronJobServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                `pulumi:"slug"`
	Suspended      *ServiceSuspended      `pulumi:"suspended"`
	Suspenders     []string               `pulumi:"suspenders"`
	Type           *string                `pulumi:"type"`
	UpdatedAt      *string                `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for CronJobType
func (val *CronJobType) Defaults() *CronJobType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "cron_job"
		tmp.Type = &type_
	}
	return &tmp
}

type CronJobServiceDetails struct {
	Env                CronJobServiceDetailsEnv     `pulumi:"env"`
	EnvSpecificDetails interface{}                  `pulumi:"envSpecificDetails"`
	Plan               *CronJobServiceDetailsPlan   `pulumi:"plan"`
	Region             *CronJobServiceDetailsRegion `pulumi:"region"`
	Schedule           string                       `pulumi:"schedule"`
}

// Defaults sets the appropriate defaults for CronJobServiceDetails
func (val *CronJobServiceDetails) Defaults() *CronJobServiceDetails {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Plan) {
		plan_ := CronJobServiceDetailsPlan("starter")
		tmp.Plan = &plan_
	}
	if isZero(tmp.Region) {
		region_ := CronJobServiceDetailsRegion("oregon")
		tmp.Region = &region_
	}
	return &tmp
}

// CronJobServiceDetailsInput is an input type that accepts CronJobServiceDetailsArgs and CronJobServiceDetailsOutput values.
// You can construct a concrete instance of `CronJobServiceDetailsInput` via:
//
//          CronJobServiceDetailsArgs{...}
type CronJobServiceDetailsInput interface {
	pulumi.Input

	ToCronJobServiceDetailsOutput() CronJobServiceDetailsOutput
	ToCronJobServiceDetailsOutputWithContext(context.Context) CronJobServiceDetailsOutput
}

type CronJobServiceDetailsArgs struct {
	Env                CronJobServiceDetailsEnvInput       `pulumi:"env"`
	EnvSpecificDetails pulumi.Input                        `pulumi:"envSpecificDetails"`
	Plan               CronJobServiceDetailsPlanPtrInput   `pulumi:"plan"`
	Region             CronJobServiceDetailsRegionPtrInput `pulumi:"region"`
	Schedule           pulumi.StringInput                  `pulumi:"schedule"`
}

// Defaults sets the appropriate defaults for CronJobServiceDetailsArgs
func (val *CronJobServiceDetailsArgs) Defaults() *CronJobServiceDetailsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.Plan) {
		tmp.Plan = CronJobServiceDetailsPlan("starter")
	}
	if isZero(tmp.Region) {
		tmp.Region = CronJobServiceDetailsRegion("oregon")
	}
	return &tmp
}
func (CronJobServiceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobServiceDetails)(nil)).Elem()
}

func (i CronJobServiceDetailsArgs) ToCronJobServiceDetailsOutput() CronJobServiceDetailsOutput {
	return i.ToCronJobServiceDetailsOutputWithContext(context.Background())
}

func (i CronJobServiceDetailsArgs) ToCronJobServiceDetailsOutputWithContext(ctx context.Context) CronJobServiceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobServiceDetailsOutput)
}

func (i CronJobServiceDetailsArgs) ToCronJobServiceDetailsPtrOutput() CronJobServiceDetailsPtrOutput {
	return i.ToCronJobServiceDetailsPtrOutputWithContext(context.Background())
}

func (i CronJobServiceDetailsArgs) ToCronJobServiceDetailsPtrOutputWithContext(ctx context.Context) CronJobServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobServiceDetailsOutput).ToCronJobServiceDetailsPtrOutputWithContext(ctx)
}

// CronJobServiceDetailsPtrInput is an input type that accepts CronJobServiceDetailsArgs, CronJobServiceDetailsPtr and CronJobServiceDetailsPtrOutput values.
// You can construct a concrete instance of `CronJobServiceDetailsPtrInput` via:
//
//          CronJobServiceDetailsArgs{...}
//
//  or:
//
//          nil
type CronJobServiceDetailsPtrInput interface {
	pulumi.Input

	ToCronJobServiceDetailsPtrOutput() CronJobServiceDetailsPtrOutput
	ToCronJobServiceDetailsPtrOutputWithContext(context.Context) CronJobServiceDetailsPtrOutput
}

type cronJobServiceDetailsPtrType CronJobServiceDetailsArgs

func CronJobServiceDetailsPtr(v *CronJobServiceDetailsArgs) CronJobServiceDetailsPtrInput {
	return (*cronJobServiceDetailsPtrType)(v)
}

func (*cronJobServiceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobServiceDetails)(nil)).Elem()
}

func (i *cronJobServiceDetailsPtrType) ToCronJobServiceDetailsPtrOutput() CronJobServiceDetailsPtrOutput {
	return i.ToCronJobServiceDetailsPtrOutputWithContext(context.Background())
}

func (i *cronJobServiceDetailsPtrType) ToCronJobServiceDetailsPtrOutputWithContext(ctx context.Context) CronJobServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobServiceDetailsPtrOutput)
}

type CronJobServiceDetailsOutput struct{ *pulumi.OutputState }

func (CronJobServiceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronJobServiceDetails)(nil)).Elem()
}

func (o CronJobServiceDetailsOutput) ToCronJobServiceDetailsOutput() CronJobServiceDetailsOutput {
	return o
}

func (o CronJobServiceDetailsOutput) ToCronJobServiceDetailsOutputWithContext(ctx context.Context) CronJobServiceDetailsOutput {
	return o
}

func (o CronJobServiceDetailsOutput) ToCronJobServiceDetailsPtrOutput() CronJobServiceDetailsPtrOutput {
	return o.ToCronJobServiceDetailsPtrOutputWithContext(context.Background())
}

func (o CronJobServiceDetailsOutput) ToCronJobServiceDetailsPtrOutputWithContext(ctx context.Context) CronJobServiceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronJobServiceDetails) *CronJobServiceDetails {
		return &v
	}).(CronJobServiceDetailsPtrOutput)
}

func (o CronJobServiceDetailsOutput) Env() CronJobServiceDetailsEnvOutput {
	return o.ApplyT(func(v CronJobServiceDetails) CronJobServiceDetailsEnv { return v.Env }).(CronJobServiceDetailsEnvOutput)
}

func (o CronJobServiceDetailsOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v CronJobServiceDetails) interface{} { return v.EnvSpecificDetails }).(pulumi.AnyOutput)
}

func (o CronJobServiceDetailsOutput) Plan() CronJobServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v CronJobServiceDetails) *CronJobServiceDetailsPlan { return v.Plan }).(CronJobServiceDetailsPlanPtrOutput)
}

func (o CronJobServiceDetailsOutput) Region() CronJobServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v CronJobServiceDetails) *CronJobServiceDetailsRegion { return v.Region }).(CronJobServiceDetailsRegionPtrOutput)
}

func (o CronJobServiceDetailsOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v CronJobServiceDetails) string { return v.Schedule }).(pulumi.StringOutput)
}

type CronJobServiceDetailsPtrOutput struct{ *pulumi.OutputState }

func (CronJobServiceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobServiceDetails)(nil)).Elem()
}

func (o CronJobServiceDetailsPtrOutput) ToCronJobServiceDetailsPtrOutput() CronJobServiceDetailsPtrOutput {
	return o
}

func (o CronJobServiceDetailsPtrOutput) ToCronJobServiceDetailsPtrOutputWithContext(ctx context.Context) CronJobServiceDetailsPtrOutput {
	return o
}

func (o CronJobServiceDetailsPtrOutput) Elem() CronJobServiceDetailsOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) CronJobServiceDetails {
		if v != nil {
			return *v
		}
		var ret CronJobServiceDetails
		return ret
	}).(CronJobServiceDetailsOutput)
}

func (o CronJobServiceDetailsPtrOutput) Env() CronJobServiceDetailsEnvPtrOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) *CronJobServiceDetailsEnv {
		if v == nil {
			return nil
		}
		return &v.Env
	}).(CronJobServiceDetailsEnvPtrOutput)
}

func (o CronJobServiceDetailsPtrOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) interface{} {
		if v == nil {
			return nil
		}
		return v.EnvSpecificDetails
	}).(pulumi.AnyOutput)
}

func (o CronJobServiceDetailsPtrOutput) Plan() CronJobServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) *CronJobServiceDetailsPlan {
		if v == nil {
			return nil
		}
		return v.Plan
	}).(CronJobServiceDetailsPlanPtrOutput)
}

func (o CronJobServiceDetailsPtrOutput) Region() CronJobServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) *CronJobServiceDetailsRegion {
		if v == nil {
			return nil
		}
		return v.Region
	}).(CronJobServiceDetailsRegionPtrOutput)
}

func (o CronJobServiceDetailsPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronJobServiceDetails) *string {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(pulumi.StringPtrOutput)
}

type CustomDomainType struct {
	CreatedAt          *string                        `pulumi:"createdAt"`
	DomainType         CustomDomainDomainType         `pulumi:"domainType"`
	Name               string                         `pulumi:"name"`
	PublicSuffix       *string                        `pulumi:"publicSuffix"`
	RedirectForName    string                         `pulumi:"redirectForName"`
	Server             CustomDomainServerProperties   `pulumi:"server"`
	VerificationStatus CustomDomainVerificationStatus `pulumi:"verificationStatus"`
}

type CustomDomainTypeOutput struct{ *pulumi.OutputState }

func (CustomDomainTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainType)(nil)).Elem()
}

func (o CustomDomainTypeOutput) ToCustomDomainTypeOutput() CustomDomainTypeOutput {
	return o
}

func (o CustomDomainTypeOutput) ToCustomDomainTypeOutputWithContext(ctx context.Context) CustomDomainTypeOutput {
	return o
}

func (o CustomDomainTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypeOutput) DomainType() CustomDomainDomainTypeOutput {
	return o.ApplyT(func(v CustomDomainType) CustomDomainDomainType { return v.DomainType }).(CustomDomainDomainTypeOutput)
}

func (o CustomDomainTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainType) string { return v.Name }).(pulumi.StringOutput)
}

func (o CustomDomainTypeOutput) PublicSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainType) *string { return v.PublicSuffix }).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypeOutput) RedirectForName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainType) string { return v.RedirectForName }).(pulumi.StringOutput)
}

func (o CustomDomainTypeOutput) Server() CustomDomainServerPropertiesOutput {
	return o.ApplyT(func(v CustomDomainType) CustomDomainServerProperties { return v.Server }).(CustomDomainServerPropertiesOutput)
}

func (o CustomDomainTypeOutput) VerificationStatus() CustomDomainVerificationStatusOutput {
	return o.ApplyT(func(v CustomDomainType) CustomDomainVerificationStatus { return v.VerificationStatus }).(CustomDomainVerificationStatusOutput)
}

type CustomDomainTypePtrOutput struct{ *pulumi.OutputState }

func (CustomDomainTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainType)(nil)).Elem()
}

func (o CustomDomainTypePtrOutput) ToCustomDomainTypePtrOutput() CustomDomainTypePtrOutput {
	return o
}

func (o CustomDomainTypePtrOutput) ToCustomDomainTypePtrOutputWithContext(ctx context.Context) CustomDomainTypePtrOutput {
	return o
}

func (o CustomDomainTypePtrOutput) Elem() CustomDomainTypeOutput {
	return o.ApplyT(func(v *CustomDomainType) CustomDomainType {
		if v != nil {
			return *v
		}
		var ret CustomDomainType
		return ret
	}).(CustomDomainTypeOutput)
}

func (o CustomDomainTypePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypePtrOutput) DomainType() CustomDomainDomainTypePtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *CustomDomainDomainType {
		if v == nil {
			return nil
		}
		return &v.DomainType
	}).(CustomDomainDomainTypePtrOutput)
}

func (o CustomDomainTypePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypePtrOutput) PublicSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *string {
		if v == nil {
			return nil
		}
		return v.PublicSuffix
	}).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypePtrOutput) RedirectForName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *string {
		if v == nil {
			return nil
		}
		return &v.RedirectForName
	}).(pulumi.StringPtrOutput)
}

func (o CustomDomainTypePtrOutput) Server() CustomDomainServerPropertiesPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *CustomDomainServerProperties {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(CustomDomainServerPropertiesPtrOutput)
}

func (o CustomDomainTypePtrOutput) VerificationStatus() CustomDomainVerificationStatusPtrOutput {
	return o.ApplyT(func(v *CustomDomainType) *CustomDomainVerificationStatus {
		if v == nil {
			return nil
		}
		return &v.VerificationStatus
	}).(CustomDomainVerificationStatusPtrOutput)
}

type CustomDomainServerProperties struct {
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
}

type CustomDomainServerPropertiesOutput struct{ *pulumi.OutputState }

func (CustomDomainServerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainServerProperties)(nil)).Elem()
}

func (o CustomDomainServerPropertiesOutput) ToCustomDomainServerPropertiesOutput() CustomDomainServerPropertiesOutput {
	return o
}

func (o CustomDomainServerPropertiesOutput) ToCustomDomainServerPropertiesOutputWithContext(ctx context.Context) CustomDomainServerPropertiesOutput {
	return o
}

func (o CustomDomainServerPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainServerProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o CustomDomainServerPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainServerProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CustomDomainServerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CustomDomainServerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainServerProperties)(nil)).Elem()
}

func (o CustomDomainServerPropertiesPtrOutput) ToCustomDomainServerPropertiesPtrOutput() CustomDomainServerPropertiesPtrOutput {
	return o
}

func (o CustomDomainServerPropertiesPtrOutput) ToCustomDomainServerPropertiesPtrOutputWithContext(ctx context.Context) CustomDomainServerPropertiesPtrOutput {
	return o
}

func (o CustomDomainServerPropertiesPtrOutput) Elem() CustomDomainServerPropertiesOutput {
	return o.ApplyT(func(v *CustomDomainServerProperties) CustomDomainServerProperties {
		if v != nil {
			return *v
		}
		var ret CustomDomainServerProperties
		return ret
	}).(CustomDomainServerPropertiesOutput)
}

func (o CustomDomainServerPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainServerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o CustomDomainServerPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainServerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type DeployType struct {
	ClearCache *DeployClearCache `pulumi:"clearCache"`
	Commit     *Commit           `pulumi:"commit"`
}

// Defaults sets the appropriate defaults for DeployType
func (val *DeployType) Defaults() *DeployType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.ClearCache) {
		clearCache_ := DeployClearCache("do_not_clear")
		tmp.ClearCache = &clearCache_
	}
	return &tmp
}

type DeployTypeOutput struct{ *pulumi.OutputState }

func (DeployTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployType)(nil)).Elem()
}

func (o DeployTypeOutput) ToDeployTypeOutput() DeployTypeOutput {
	return o
}

func (o DeployTypeOutput) ToDeployTypeOutputWithContext(ctx context.Context) DeployTypeOutput {
	return o
}

func (o DeployTypeOutput) ClearCache() DeployClearCachePtrOutput {
	return o.ApplyT(func(v DeployType) *DeployClearCache { return v.ClearCache }).(DeployClearCachePtrOutput)
}

func (o DeployTypeOutput) Commit() CommitPtrOutput {
	return o.ApplyT(func(v DeployType) *Commit { return v.Commit }).(CommitPtrOutput)
}

type DeployTypePtrOutput struct{ *pulumi.OutputState }

func (DeployTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployType)(nil)).Elem()
}

func (o DeployTypePtrOutput) ToDeployTypePtrOutput() DeployTypePtrOutput {
	return o
}

func (o DeployTypePtrOutput) ToDeployTypePtrOutputWithContext(ctx context.Context) DeployTypePtrOutput {
	return o
}

func (o DeployTypePtrOutput) Elem() DeployTypeOutput {
	return o.ApplyT(func(v *DeployType) DeployType {
		if v != nil {
			return *v
		}
		var ret DeployType
		return ret
	}).(DeployTypeOutput)
}

func (o DeployTypePtrOutput) ClearCache() DeployClearCachePtrOutput {
	return o.ApplyT(func(v *DeployType) *DeployClearCache {
		if v == nil {
			return nil
		}
		return v.ClearCache
	}).(DeployClearCachePtrOutput)
}

func (o DeployTypePtrOutput) Commit() CommitPtrOutput {
	return o.ApplyT(func(v *DeployType) *Commit {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(CommitPtrOutput)
}

type Disk struct {
	MountPath string   `pulumi:"mountPath"`
	Name      string   `pulumi:"name"`
	SizeGB    *float64 `pulumi:"sizeGB"`
}

// Defaults sets the appropriate defaults for Disk
func (val *Disk) Defaults() *Disk {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.SizeGB) {
		sizeGB_ := 1.0
		tmp.SizeGB = &sizeGB_
	}
	return &tmp
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//          DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

type DiskArgs struct {
	MountPath pulumi.StringInput     `pulumi:"mountPath"`
	Name      pulumi.StringInput     `pulumi:"name"`
	SizeGB    pulumi.Float64PtrInput `pulumi:"sizeGB"`
}

// Defaults sets the appropriate defaults for DiskArgs
func (val *DiskArgs) Defaults() *DiskArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.SizeGB) {
		tmp.SizeGB = pulumi.Float64Ptr(1.0)
	}
	return &tmp
}
func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

func (i DiskArgs) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput).ToDiskPtrOutputWithContext(ctx)
}

// DiskPtrInput is an input type that accepts DiskArgs, DiskPtr and DiskPtrOutput values.
// You can construct a concrete instance of `DiskPtrInput` via:
//
//          DiskArgs{...}
//
//  or:
//
//          nil
type DiskPtrInput interface {
	pulumi.Input

	ToDiskPtrOutput() DiskPtrOutput
	ToDiskPtrOutputWithContext(context.Context) DiskPtrOutput
}

type diskPtrType DiskArgs

func DiskPtr(v *DiskArgs) DiskPtrInput {
	return (*diskPtrType)(v)
}

func (*diskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil)).Elem()
}

func (i *diskPtrType) ToDiskPtrOutput() DiskPtrOutput {
	return i.ToDiskPtrOutputWithContext(context.Background())
}

func (i *diskPtrType) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskPtrOutput)
}

type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

func (o DiskOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o.ToDiskPtrOutputWithContext(context.Background())
}

func (o DiskOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Disk) *Disk {
		return &v
	}).(DiskPtrOutput)
}

func (o DiskOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.MountPath }).(pulumi.StringOutput)
}

func (o DiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Disk) string { return v.Name }).(pulumi.StringOutput)
}

func (o DiskOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Disk) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

type DiskPtrOutput struct{ *pulumi.OutputState }

func (DiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil)).Elem()
}

func (o DiskPtrOutput) ToDiskPtrOutput() DiskPtrOutput {
	return o
}

func (o DiskPtrOutput) ToDiskPtrOutputWithContext(ctx context.Context) DiskPtrOutput {
	return o
}

func (o DiskPtrOutput) Elem() DiskOutput {
	return o.ApplyT(func(v *Disk) Disk {
		if v != nil {
			return *v
		}
		var ret Disk
		return ret
	}).(DiskOutput)
}

func (o DiskPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Disk) *string {
		if v == nil {
			return nil
		}
		return &v.MountPath
	}).(pulumi.StringPtrOutput)
}

func (o DiskPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Disk) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o DiskPtrOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Disk) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeGB
	}).(pulumi.Float64PtrOutput)
}

type DockerDetails struct {
	DockerCommand  *string `pulumi:"dockerCommand"`
	DockerContext  *string `pulumi:"dockerContext"`
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for DockerDetails
func (val *DockerDetails) Defaults() *DockerDetails {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.DockerfilePath) {
		dockerfilePath_ := "./Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

type EnvVarKeyValue struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

type EnvVarKeyValueOutput struct{ *pulumi.OutputState }

func (EnvVarKeyValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvVarKeyValue)(nil)).Elem()
}

func (o EnvVarKeyValueOutput) ToEnvVarKeyValueOutput() EnvVarKeyValueOutput {
	return o
}

func (o EnvVarKeyValueOutput) ToEnvVarKeyValueOutputWithContext(ctx context.Context) EnvVarKeyValueOutput {
	return o
}

func (o EnvVarKeyValueOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarKeyValue) string { return v.Key }).(pulumi.StringOutput)
}

func (o EnvVarKeyValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EnvVarKeyValue) string { return v.Value }).(pulumi.StringOutput)
}

type EnvVarKeyValuePtrOutput struct{ *pulumi.OutputState }

func (EnvVarKeyValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnvVarKeyValue)(nil)).Elem()
}

func (o EnvVarKeyValuePtrOutput) ToEnvVarKeyValuePtrOutput() EnvVarKeyValuePtrOutput {
	return o
}

func (o EnvVarKeyValuePtrOutput) ToEnvVarKeyValuePtrOutputWithContext(ctx context.Context) EnvVarKeyValuePtrOutput {
	return o
}

func (o EnvVarKeyValuePtrOutput) Elem() EnvVarKeyValueOutput {
	return o.ApplyT(func(v *EnvVarKeyValue) EnvVarKeyValue {
		if v != nil {
			return *v
		}
		var ret EnvVarKeyValue
		return ret
	}).(EnvVarKeyValueOutput)
}

func (o EnvVarKeyValuePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvVarKeyValue) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

func (o EnvVarKeyValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnvVarKeyValue) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// A background worker service
type GetBackgroundWorkerType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string            `pulumi:"repo"`
	ServiceDetails *ServiceDetails   `pulumi:"serviceDetails"`
	Slug           *string           `pulumi:"slug"`
	Suspended      *ServiceSuspended `pulumi:"suspended"`
	Suspenders     []string          `pulumi:"suspenders"`
	Type           *string           `pulumi:"type"`
	UpdatedAt      *string           `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for GetBackgroundWorkerType
func (val *GetBackgroundWorkerType) Defaults() *GetBackgroundWorkerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "background_worker"
		tmp.Type = &type_
	}
	return &tmp
}

// A background worker service
type GetBackgroundWorkerTypeOutput struct{ *pulumi.OutputState }

func (GetBackgroundWorkerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackgroundWorkerType)(nil)).Elem()
}

func (o GetBackgroundWorkerTypeOutput) ToGetBackgroundWorkerTypeOutput() GetBackgroundWorkerTypeOutput {
	return o
}

func (o GetBackgroundWorkerTypeOutput) ToGetBackgroundWorkerTypeOutputWithContext(ctx context.Context) GetBackgroundWorkerTypeOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o GetBackgroundWorkerTypeOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *ServiceAutoDeploy { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o GetBackgroundWorkerTypeOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) string { return v.Name }).(pulumi.StringOutput)
}

// The notification setting for this service upon deployment failure.
func (o GetBackgroundWorkerTypeOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *ServiceNotifyOnFail { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o GetBackgroundWorkerTypeOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o GetBackgroundWorkerTypeOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) string { return v.Repo }).(pulumi.StringOutput)
}

func (o GetBackgroundWorkerTypeOutput) ServiceDetails() ServiceDetailsPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *ServiceDetails { return v.ServiceDetails }).(ServiceDetailsPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *ServiceSuspended { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) []string { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o GetBackgroundWorkerTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetBackgroundWorkerTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBackgroundWorkerType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// A cron job
type GetCronJobType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                 `pulumi:"repo"`
	ServiceDetails *CronJobServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                `pulumi:"slug"`
	Suspended      *ServiceSuspended      `pulumi:"suspended"`
	Suspenders     []string               `pulumi:"suspenders"`
	Type           *string                `pulumi:"type"`
	UpdatedAt      *string                `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for GetCronJobType
func (val *GetCronJobType) Defaults() *GetCronJobType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "cron_job"
		tmp.Type = &type_
	}
	return &tmp
}

// A cron job
type GetCronJobTypeOutput struct{ *pulumi.OutputState }

func (GetCronJobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCronJobType)(nil)).Elem()
}

func (o GetCronJobTypeOutput) ToGetCronJobTypeOutput() GetCronJobTypeOutput {
	return o
}

func (o GetCronJobTypeOutput) ToGetCronJobTypeOutputWithContext(ctx context.Context) GetCronJobTypeOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o GetCronJobTypeOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *ServiceAutoDeploy { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o GetCronJobTypeOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GetCronJobTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o GetCronJobTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCronJobType) string { return v.Name }).(pulumi.StringOutput)
}

// The notification setting for this service upon deployment failure.
func (o GetCronJobTypeOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *ServiceNotifyOnFail { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o GetCronJobTypeOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCronJobType) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o GetCronJobTypeOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetCronJobType) string { return v.Repo }).(pulumi.StringOutput)
}

func (o GetCronJobTypeOutput) ServiceDetails() CronJobServiceDetailsPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *CronJobServiceDetails { return v.ServiceDetails }).(CronJobServiceDetailsPtrOutput)
}

func (o GetCronJobTypeOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o GetCronJobTypeOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *ServiceSuspended { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o GetCronJobTypeOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCronJobType) []string { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o GetCronJobTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetCronJobTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCronJobType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// A private service
type GetPrivateServiceType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string            `pulumi:"repo"`
	ServiceDetails *ServiceDetails   `pulumi:"serviceDetails"`
	Slug           *string           `pulumi:"slug"`
	Suspended      *ServiceSuspended `pulumi:"suspended"`
	Suspenders     []string          `pulumi:"suspenders"`
	Type           *string           `pulumi:"type"`
	UpdatedAt      *string           `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for GetPrivateServiceType
func (val *GetPrivateServiceType) Defaults() *GetPrivateServiceType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "private_service"
		tmp.Type = &type_
	}
	return &tmp
}

// A private service
type GetPrivateServiceTypeOutput struct{ *pulumi.OutputState }

func (GetPrivateServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateServiceType)(nil)).Elem()
}

func (o GetPrivateServiceTypeOutput) ToGetPrivateServiceTypeOutput() GetPrivateServiceTypeOutput {
	return o
}

func (o GetPrivateServiceTypeOutput) ToGetPrivateServiceTypeOutputWithContext(ctx context.Context) GetPrivateServiceTypeOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o GetPrivateServiceTypeOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *ServiceAutoDeploy { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o GetPrivateServiceTypeOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GetPrivateServiceTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o GetPrivateServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// The notification setting for this service upon deployment failure.
func (o GetPrivateServiceTypeOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *ServiceNotifyOnFail { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o GetPrivateServiceTypeOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateServiceType) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o GetPrivateServiceTypeOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateServiceType) string { return v.Repo }).(pulumi.StringOutput)
}

func (o GetPrivateServiceTypeOutput) ServiceDetails() ServiceDetailsPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *ServiceDetails { return v.ServiceDetails }).(ServiceDetailsPtrOutput)
}

func (o GetPrivateServiceTypeOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o GetPrivateServiceTypeOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *ServiceSuspended { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o GetPrivateServiceTypeOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrivateServiceType) []string { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o GetPrivateServiceTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetPrivateServiceTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateServiceType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// A static website service
type GetStaticSiteType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                    `pulumi:"repo"`
	ServiceDetails *StaticSiteServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                   `pulumi:"slug"`
	Suspended      *ServiceSuspended         `pulumi:"suspended"`
	Suspenders     []string                  `pulumi:"suspenders"`
	Type           *string                   `pulumi:"type"`
	UpdatedAt      *string                   `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for GetStaticSiteType
func (val *GetStaticSiteType) Defaults() *GetStaticSiteType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "static_site"
		tmp.Type = &type_
	}
	return &tmp
}

// A static website service
type GetStaticSiteTypeOutput struct{ *pulumi.OutputState }

func (GetStaticSiteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticSiteType)(nil)).Elem()
}

func (o GetStaticSiteTypeOutput) ToGetStaticSiteTypeOutput() GetStaticSiteTypeOutput {
	return o
}

func (o GetStaticSiteTypeOutput) ToGetStaticSiteTypeOutputWithContext(ctx context.Context) GetStaticSiteTypeOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o GetStaticSiteTypeOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *ServiceAutoDeploy { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o GetStaticSiteTypeOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GetStaticSiteTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o GetStaticSiteTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticSiteType) string { return v.Name }).(pulumi.StringOutput)
}

// The notification setting for this service upon deployment failure.
func (o GetStaticSiteTypeOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *ServiceNotifyOnFail { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o GetStaticSiteTypeOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticSiteType) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o GetStaticSiteTypeOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticSiteType) string { return v.Repo }).(pulumi.StringOutput)
}

func (o GetStaticSiteTypeOutput) ServiceDetails() StaticSiteServiceDetailsPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *StaticSiteServiceDetails { return v.ServiceDetails }).(StaticSiteServiceDetailsPtrOutput)
}

func (o GetStaticSiteTypeOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o GetStaticSiteTypeOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *ServiceSuspended { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o GetStaticSiteTypeOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStaticSiteType) []string { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o GetStaticSiteTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetStaticSiteTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStaticSiteType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

// A web service
type GetWebServiceType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                    `pulumi:"repo"`
	ServiceDetails *WebServiceServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                   `pulumi:"slug"`
	Suspended      *ServiceSuspended         `pulumi:"suspended"`
	Suspenders     []string                  `pulumi:"suspenders"`
	Type           *string                   `pulumi:"type"`
	UpdatedAt      *string                   `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for GetWebServiceType
func (val *GetWebServiceType) Defaults() *GetWebServiceType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "web_service"
		tmp.Type = &type_
	}
	return &tmp
}

// A web service
type GetWebServiceTypeOutput struct{ *pulumi.OutputState }

func (GetWebServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebServiceType)(nil)).Elem()
}

func (o GetWebServiceTypeOutput) ToGetWebServiceTypeOutput() GetWebServiceTypeOutput {
	return o
}

func (o GetWebServiceTypeOutput) ToGetWebServiceTypeOutputWithContext(ctx context.Context) GetWebServiceTypeOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o GetWebServiceTypeOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *ServiceAutoDeploy { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o GetWebServiceTypeOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o GetWebServiceTypeOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o GetWebServiceTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebServiceType) string { return v.Name }).(pulumi.StringOutput)
}

// The notification setting for this service upon deployment failure.
func (o GetWebServiceTypeOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *ServiceNotifyOnFail { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o GetWebServiceTypeOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebServiceType) string { return v.OwnerId }).(pulumi.StringOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o GetWebServiceTypeOutput) Repo() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebServiceType) string { return v.Repo }).(pulumi.StringOutput)
}

func (o GetWebServiceTypeOutput) ServiceDetails() WebServiceServiceDetailsPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *WebServiceServiceDetails { return v.ServiceDetails }).(WebServiceServiceDetailsPtrOutput)
}

func (o GetWebServiceTypeOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *string { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o GetWebServiceTypeOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *ServiceSuspended { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o GetWebServiceTypeOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebServiceType) []string { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o GetWebServiceTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o GetWebServiceTypeOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWebServiceType) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type ListCustomDomainsResponse struct {
	Cursor       *string           `pulumi:"cursor"`
	CustomDomain *CustomDomainType `pulumi:"customDomain"`
}

type ListCustomDomainsResponseOutput struct{ *pulumi.OutputState }

func (ListCustomDomainsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListCustomDomainsResponse)(nil)).Elem()
}

func (o ListCustomDomainsResponseOutput) ToListCustomDomainsResponseOutput() ListCustomDomainsResponseOutput {
	return o
}

func (o ListCustomDomainsResponseOutput) ToListCustomDomainsResponseOutputWithContext(ctx context.Context) ListCustomDomainsResponseOutput {
	return o
}

func (o ListCustomDomainsResponseOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListCustomDomainsResponse) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

func (o ListCustomDomainsResponseOutput) CustomDomain() CustomDomainTypePtrOutput {
	return o.ApplyT(func(v ListCustomDomainsResponse) *CustomDomainType { return v.CustomDomain }).(CustomDomainTypePtrOutput)
}

type ListCustomDomainsResponseArrayOutput struct{ *pulumi.OutputState }

func (ListCustomDomainsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListCustomDomainsResponse)(nil)).Elem()
}

func (o ListCustomDomainsResponseArrayOutput) ToListCustomDomainsResponseArrayOutput() ListCustomDomainsResponseArrayOutput {
	return o
}

func (o ListCustomDomainsResponseArrayOutput) ToListCustomDomainsResponseArrayOutputWithContext(ctx context.Context) ListCustomDomainsResponseArrayOutput {
	return o
}

func (o ListCustomDomainsResponseArrayOutput) Index(i pulumi.IntInput) ListCustomDomainsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListCustomDomainsResponse {
		return vs[0].([]ListCustomDomainsResponse)[vs[1].(int)]
	}).(ListCustomDomainsResponseOutput)
}

type ListDeploysResponse struct {
	Cursor       *string     `pulumi:"cursor"`
	CustomDomain *DeployType `pulumi:"customDomain"`
}

// Defaults sets the appropriate defaults for ListDeploysResponse
func (val *ListDeploysResponse) Defaults() *ListDeploysResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CustomDomain = tmp.CustomDomain.Defaults()

	return &tmp
}

type ListDeploysResponseOutput struct{ *pulumi.OutputState }

func (ListDeploysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListDeploysResponse)(nil)).Elem()
}

func (o ListDeploysResponseOutput) ToListDeploysResponseOutput() ListDeploysResponseOutput {
	return o
}

func (o ListDeploysResponseOutput) ToListDeploysResponseOutputWithContext(ctx context.Context) ListDeploysResponseOutput {
	return o
}

func (o ListDeploysResponseOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListDeploysResponse) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

func (o ListDeploysResponseOutput) CustomDomain() DeployTypePtrOutput {
	return o.ApplyT(func(v ListDeploysResponse) *DeployType { return v.CustomDomain }).(DeployTypePtrOutput)
}

type ListDeploysResponseArrayOutput struct{ *pulumi.OutputState }

func (ListDeploysResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListDeploysResponse)(nil)).Elem()
}

func (o ListDeploysResponseArrayOutput) ToListDeploysResponseArrayOutput() ListDeploysResponseArrayOutput {
	return o
}

func (o ListDeploysResponseArrayOutput) ToListDeploysResponseArrayOutputWithContext(ctx context.Context) ListDeploysResponseArrayOutput {
	return o
}

func (o ListDeploysResponseArrayOutput) Index(i pulumi.IntInput) ListDeploysResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListDeploysResponse {
		return vs[0].([]ListDeploysResponse)[vs[1].(int)]
	}).(ListDeploysResponseOutput)
}

type ListEnvVarsResponse struct {
	Cursor *string         `pulumi:"cursor"`
	EnvVar *EnvVarKeyValue `pulumi:"envVar"`
}

type ListEnvVarsResponseOutput struct{ *pulumi.OutputState }

func (ListEnvVarsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEnvVarsResponse)(nil)).Elem()
}

func (o ListEnvVarsResponseOutput) ToListEnvVarsResponseOutput() ListEnvVarsResponseOutput {
	return o
}

func (o ListEnvVarsResponseOutput) ToListEnvVarsResponseOutputWithContext(ctx context.Context) ListEnvVarsResponseOutput {
	return o
}

func (o ListEnvVarsResponseOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListEnvVarsResponse) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

func (o ListEnvVarsResponseOutput) EnvVar() EnvVarKeyValuePtrOutput {
	return o.ApplyT(func(v ListEnvVarsResponse) *EnvVarKeyValue { return v.EnvVar }).(EnvVarKeyValuePtrOutput)
}

type ListEnvVarsResponseArrayOutput struct{ *pulumi.OutputState }

func (ListEnvVarsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListEnvVarsResponse)(nil)).Elem()
}

func (o ListEnvVarsResponseArrayOutput) ToListEnvVarsResponseArrayOutput() ListEnvVarsResponseArrayOutput {
	return o
}

func (o ListEnvVarsResponseArrayOutput) ToListEnvVarsResponseArrayOutputWithContext(ctx context.Context) ListEnvVarsResponseArrayOutput {
	return o
}

func (o ListEnvVarsResponseArrayOutput) Index(i pulumi.IntInput) ListEnvVarsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListEnvVarsResponse {
		return vs[0].([]ListEnvVarsResponse)[vs[1].(int)]
	}).(ListEnvVarsResponseOutput)
}

type ListServiceHeadersResponse struct {
	Cursor *string `pulumi:"cursor"`
	// A service header object
	Header *ServiceHeader `pulumi:"header"`
}

type ListServiceHeadersResponseOutput struct{ *pulumi.OutputState }

func (ListServiceHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListServiceHeadersResponse)(nil)).Elem()
}

func (o ListServiceHeadersResponseOutput) ToListServiceHeadersResponseOutput() ListServiceHeadersResponseOutput {
	return o
}

func (o ListServiceHeadersResponseOutput) ToListServiceHeadersResponseOutputWithContext(ctx context.Context) ListServiceHeadersResponseOutput {
	return o
}

func (o ListServiceHeadersResponseOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListServiceHeadersResponse) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

// A service header object
func (o ListServiceHeadersResponseOutput) Header() ServiceHeaderPtrOutput {
	return o.ApplyT(func(v ListServiceHeadersResponse) *ServiceHeader { return v.Header }).(ServiceHeaderPtrOutput)
}

type ListServiceHeadersResponseArrayOutput struct{ *pulumi.OutputState }

func (ListServiceHeadersResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListServiceHeadersResponse)(nil)).Elem()
}

func (o ListServiceHeadersResponseArrayOutput) ToListServiceHeadersResponseArrayOutput() ListServiceHeadersResponseArrayOutput {
	return o
}

func (o ListServiceHeadersResponseArrayOutput) ToListServiceHeadersResponseArrayOutputWithContext(ctx context.Context) ListServiceHeadersResponseArrayOutput {
	return o
}

func (o ListServiceHeadersResponseArrayOutput) Index(i pulumi.IntInput) ListServiceHeadersResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListServiceHeadersResponse {
		return vs[0].([]ListServiceHeadersResponse)[vs[1].(int)]
	}).(ListServiceHeadersResponseOutput)
}

type ListServiceResponse struct {
	Cursor  *string     `pulumi:"cursor"`
	Service interface{} `pulumi:"service"`
}

type ListStaticSiteRoutesResponse struct {
	Cursor *string `pulumi:"cursor"`
	// A route object for a static site
	Route *StaticSiteRoute `pulumi:"route"`
}

type ListStaticSiteRoutesResponseOutput struct{ *pulumi.OutputState }

func (ListStaticSiteRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListStaticSiteRoutesResponse)(nil)).Elem()
}

func (o ListStaticSiteRoutesResponseOutput) ToListStaticSiteRoutesResponseOutput() ListStaticSiteRoutesResponseOutput {
	return o
}

func (o ListStaticSiteRoutesResponseOutput) ToListStaticSiteRoutesResponseOutputWithContext(ctx context.Context) ListStaticSiteRoutesResponseOutput {
	return o
}

func (o ListStaticSiteRoutesResponseOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListStaticSiteRoutesResponse) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

// A route object for a static site
func (o ListStaticSiteRoutesResponseOutput) Route() StaticSiteRoutePtrOutput {
	return o.ApplyT(func(v ListStaticSiteRoutesResponse) *StaticSiteRoute { return v.Route }).(StaticSiteRoutePtrOutput)
}

type ListStaticSiteRoutesResponseArrayOutput struct{ *pulumi.OutputState }

func (ListStaticSiteRoutesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListStaticSiteRoutesResponse)(nil)).Elem()
}

func (o ListStaticSiteRoutesResponseArrayOutput) ToListStaticSiteRoutesResponseArrayOutput() ListStaticSiteRoutesResponseArrayOutput {
	return o
}

func (o ListStaticSiteRoutesResponseArrayOutput) ToListStaticSiteRoutesResponseArrayOutputWithContext(ctx context.Context) ListStaticSiteRoutesResponseArrayOutput {
	return o
}

func (o ListStaticSiteRoutesResponseArrayOutput) Index(i pulumi.IntInput) ListStaticSiteRoutesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListStaticSiteRoutesResponse {
		return vs[0].([]ListStaticSiteRoutesResponse)[vs[1].(int)]
	}).(ListStaticSiteRoutesResponseOutput)
}

type NativeEnvironmentDetails struct {
	BuildCommand string `pulumi:"buildCommand"`
	StartCommand string `pulumi:"startCommand"`
}

// A private service
type PrivateServiceType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string            `pulumi:"repo"`
	ServiceDetails *ServiceDetails   `pulumi:"serviceDetails"`
	Slug           *string           `pulumi:"slug"`
	Suspended      *ServiceSuspended `pulumi:"suspended"`
	Suspenders     []string          `pulumi:"suspenders"`
	Type           *string           `pulumi:"type"`
	UpdatedAt      *string           `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for PrivateServiceType
func (val *PrivateServiceType) Defaults() *PrivateServiceType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "private_service"
		tmp.Type = &type_
	}
	return &tmp
}

type ServerProperties struct {
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
}

// ServerPropertiesInput is an input type that accepts ServerPropertiesArgs and ServerPropertiesOutput values.
// You can construct a concrete instance of `ServerPropertiesInput` via:
//
//          ServerPropertiesArgs{...}
type ServerPropertiesInput interface {
	pulumi.Input

	ToServerPropertiesOutput() ServerPropertiesOutput
	ToServerPropertiesOutputWithContext(context.Context) ServerPropertiesOutput
}

type ServerPropertiesArgs struct {
	Id   pulumi.StringPtrInput `pulumi:"id"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ServerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProperties)(nil)).Elem()
}

func (i ServerPropertiesArgs) ToServerPropertiesOutput() ServerPropertiesOutput {
	return i.ToServerPropertiesOutputWithContext(context.Background())
}

func (i ServerPropertiesArgs) ToServerPropertiesOutputWithContext(ctx context.Context) ServerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerPropertiesOutput)
}

type ServerPropertiesOutput struct{ *pulumi.OutputState }

func (ServerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerProperties)(nil)).Elem()
}

func (o ServerPropertiesOutput) ToServerPropertiesOutput() ServerPropertiesOutput {
	return o
}

func (o ServerPropertiesOutput) ToServerPropertiesOutputWithContext(ctx context.Context) ServerPropertiesOutput {
	return o
}

func (o ServerPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ServerPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ServiceDetails struct {
	Disk                       *Disk                                     `pulumi:"disk"`
	Env                        ServiceDetailsEnv                         `pulumi:"env"`
	EnvSpecificDetails         interface{}                               `pulumi:"envSpecificDetails"`
	NumInstances               *float64                                  `pulumi:"numInstances"`
	Plan                       *ServiceDetailsPlan                       `pulumi:"plan"`
	PullRequestPreviewsEnabled *ServiceDetailsPullRequestPreviewsEnabled `pulumi:"pullRequestPreviewsEnabled"`
	Region                     *ServiceDetailsRegion                     `pulumi:"region"`
}

// Defaults sets the appropriate defaults for ServiceDetails
func (val *ServiceDetails) Defaults() *ServiceDetails {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Disk = tmp.Disk.Defaults()

	if isZero(tmp.NumInstances) {
		numInstances_ := 1.0
		tmp.NumInstances = &numInstances_
	}
	if isZero(tmp.Plan) {
		plan_ := ServiceDetailsPlan("starter")
		tmp.Plan = &plan_
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		pullRequestPreviewsEnabled_ := ServiceDetailsPullRequestPreviewsEnabled("no")
		tmp.PullRequestPreviewsEnabled = &pullRequestPreviewsEnabled_
	}
	if isZero(tmp.Region) {
		region_ := ServiceDetailsRegion("oregon")
		tmp.Region = &region_
	}
	return &tmp
}

// ServiceDetailsInput is an input type that accepts ServiceDetailsArgs and ServiceDetailsOutput values.
// You can construct a concrete instance of `ServiceDetailsInput` via:
//
//          ServiceDetailsArgs{...}
type ServiceDetailsInput interface {
	pulumi.Input

	ToServiceDetailsOutput() ServiceDetailsOutput
	ToServiceDetailsOutputWithContext(context.Context) ServiceDetailsOutput
}

type ServiceDetailsArgs struct {
	Disk                       DiskPtrInput                                     `pulumi:"disk"`
	Env                        ServiceDetailsEnvInput                           `pulumi:"env"`
	EnvSpecificDetails         pulumi.Input                                     `pulumi:"envSpecificDetails"`
	NumInstances               pulumi.Float64PtrInput                           `pulumi:"numInstances"`
	Plan                       ServiceDetailsPlanPtrInput                       `pulumi:"plan"`
	PullRequestPreviewsEnabled ServiceDetailsPullRequestPreviewsEnabledPtrInput `pulumi:"pullRequestPreviewsEnabled"`
	Region                     ServiceDetailsRegionPtrInput                     `pulumi:"region"`
}

// Defaults sets the appropriate defaults for ServiceDetailsArgs
func (val *ServiceDetailsArgs) Defaults() *ServiceDetailsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if isZero(tmp.NumInstances) {
		tmp.NumInstances = pulumi.Float64Ptr(1.0)
	}
	if isZero(tmp.Plan) {
		tmp.Plan = ServiceDetailsPlan("starter")
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		tmp.PullRequestPreviewsEnabled = ServiceDetailsPullRequestPreviewsEnabled("no")
	}
	if isZero(tmp.Region) {
		tmp.Region = ServiceDetailsRegion("oregon")
	}
	return &tmp
}
func (ServiceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDetails)(nil)).Elem()
}

func (i ServiceDetailsArgs) ToServiceDetailsOutput() ServiceDetailsOutput {
	return i.ToServiceDetailsOutputWithContext(context.Background())
}

func (i ServiceDetailsArgs) ToServiceDetailsOutputWithContext(ctx context.Context) ServiceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetailsOutput)
}

func (i ServiceDetailsArgs) ToServiceDetailsPtrOutput() ServiceDetailsPtrOutput {
	return i.ToServiceDetailsPtrOutputWithContext(context.Background())
}

func (i ServiceDetailsArgs) ToServiceDetailsPtrOutputWithContext(ctx context.Context) ServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetailsOutput).ToServiceDetailsPtrOutputWithContext(ctx)
}

// ServiceDetailsPtrInput is an input type that accepts ServiceDetailsArgs, ServiceDetailsPtr and ServiceDetailsPtrOutput values.
// You can construct a concrete instance of `ServiceDetailsPtrInput` via:
//
//          ServiceDetailsArgs{...}
//
//  or:
//
//          nil
type ServiceDetailsPtrInput interface {
	pulumi.Input

	ToServiceDetailsPtrOutput() ServiceDetailsPtrOutput
	ToServiceDetailsPtrOutputWithContext(context.Context) ServiceDetailsPtrOutput
}

type serviceDetailsPtrType ServiceDetailsArgs

func ServiceDetailsPtr(v *ServiceDetailsArgs) ServiceDetailsPtrInput {
	return (*serviceDetailsPtrType)(v)
}

func (*serviceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDetails)(nil)).Elem()
}

func (i *serviceDetailsPtrType) ToServiceDetailsPtrOutput() ServiceDetailsPtrOutput {
	return i.ToServiceDetailsPtrOutputWithContext(context.Background())
}

func (i *serviceDetailsPtrType) ToServiceDetailsPtrOutputWithContext(ctx context.Context) ServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDetailsPtrOutput)
}

type ServiceDetailsOutput struct{ *pulumi.OutputState }

func (ServiceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDetails)(nil)).Elem()
}

func (o ServiceDetailsOutput) ToServiceDetailsOutput() ServiceDetailsOutput {
	return o
}

func (o ServiceDetailsOutput) ToServiceDetailsOutputWithContext(ctx context.Context) ServiceDetailsOutput {
	return o
}

func (o ServiceDetailsOutput) ToServiceDetailsPtrOutput() ServiceDetailsPtrOutput {
	return o.ToServiceDetailsPtrOutputWithContext(context.Background())
}

func (o ServiceDetailsOutput) ToServiceDetailsPtrOutputWithContext(ctx context.Context) ServiceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDetails) *ServiceDetails {
		return &v
	}).(ServiceDetailsPtrOutput)
}

func (o ServiceDetailsOutput) Disk() DiskPtrOutput {
	return o.ApplyT(func(v ServiceDetails) *Disk { return v.Disk }).(DiskPtrOutput)
}

func (o ServiceDetailsOutput) Env() ServiceDetailsEnvOutput {
	return o.ApplyT(func(v ServiceDetails) ServiceDetailsEnv { return v.Env }).(ServiceDetailsEnvOutput)
}

func (o ServiceDetailsOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceDetails) interface{} { return v.EnvSpecificDetails }).(pulumi.AnyOutput)
}

func (o ServiceDetailsOutput) NumInstances() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceDetails) *float64 { return v.NumInstances }).(pulumi.Float64PtrOutput)
}

func (o ServiceDetailsOutput) Plan() ServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v ServiceDetails) *ServiceDetailsPlan { return v.Plan }).(ServiceDetailsPlanPtrOutput)
}

func (o ServiceDetailsOutput) PullRequestPreviewsEnabled() ServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v ServiceDetails) *ServiceDetailsPullRequestPreviewsEnabled { return v.PullRequestPreviewsEnabled }).(ServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o ServiceDetailsOutput) Region() ServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v ServiceDetails) *ServiceDetailsRegion { return v.Region }).(ServiceDetailsRegionPtrOutput)
}

type ServiceDetailsPtrOutput struct{ *pulumi.OutputState }

func (ServiceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDetails)(nil)).Elem()
}

func (o ServiceDetailsPtrOutput) ToServiceDetailsPtrOutput() ServiceDetailsPtrOutput {
	return o
}

func (o ServiceDetailsPtrOutput) ToServiceDetailsPtrOutputWithContext(ctx context.Context) ServiceDetailsPtrOutput {
	return o
}

func (o ServiceDetailsPtrOutput) Elem() ServiceDetailsOutput {
	return o.ApplyT(func(v *ServiceDetails) ServiceDetails {
		if v != nil {
			return *v
		}
		var ret ServiceDetails
		return ret
	}).(ServiceDetailsOutput)
}

func (o ServiceDetailsPtrOutput) Disk() DiskPtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *Disk {
		if v == nil {
			return nil
		}
		return v.Disk
	}).(DiskPtrOutput)
}

func (o ServiceDetailsPtrOutput) Env() ServiceDetailsEnvPtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *ServiceDetailsEnv {
		if v == nil {
			return nil
		}
		return &v.Env
	}).(ServiceDetailsEnvPtrOutput)
}

func (o ServiceDetailsPtrOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v *ServiceDetails) interface{} {
		if v == nil {
			return nil
		}
		return v.EnvSpecificDetails
	}).(pulumi.AnyOutput)
}

func (o ServiceDetailsPtrOutput) NumInstances() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *float64 {
		if v == nil {
			return nil
		}
		return v.NumInstances
	}).(pulumi.Float64PtrOutput)
}

func (o ServiceDetailsPtrOutput) Plan() ServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *ServiceDetailsPlan {
		if v == nil {
			return nil
		}
		return v.Plan
	}).(ServiceDetailsPlanPtrOutput)
}

func (o ServiceDetailsPtrOutput) PullRequestPreviewsEnabled() ServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *ServiceDetailsPullRequestPreviewsEnabled {
		if v == nil {
			return nil
		}
		return v.PullRequestPreviewsEnabled
	}).(ServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o ServiceDetailsPtrOutput) Region() ServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v *ServiceDetails) *ServiceDetailsRegion {
		if v == nil {
			return nil
		}
		return v.Region
	}).(ServiceDetailsRegionPtrOutput)
}

// A service header object
type ServiceHeader struct {
	Name  string `pulumi:"name"`
	Path  string `pulumi:"path"`
	Value string `pulumi:"value"`
}

// ServiceHeaderInput is an input type that accepts ServiceHeaderArgs and ServiceHeaderOutput values.
// You can construct a concrete instance of `ServiceHeaderInput` via:
//
//          ServiceHeaderArgs{...}
type ServiceHeaderInput interface {
	pulumi.Input

	ToServiceHeaderOutput() ServiceHeaderOutput
	ToServiceHeaderOutputWithContext(context.Context) ServiceHeaderOutput
}

// A service header object
type ServiceHeaderArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Path  pulumi.StringInput `pulumi:"path"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHeader)(nil)).Elem()
}

func (i ServiceHeaderArgs) ToServiceHeaderOutput() ServiceHeaderOutput {
	return i.ToServiceHeaderOutputWithContext(context.Background())
}

func (i ServiceHeaderArgs) ToServiceHeaderOutputWithContext(ctx context.Context) ServiceHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceHeaderOutput)
}

// ServiceHeaderArrayInput is an input type that accepts ServiceHeaderArray and ServiceHeaderArrayOutput values.
// You can construct a concrete instance of `ServiceHeaderArrayInput` via:
//
//          ServiceHeaderArray{ ServiceHeaderArgs{...} }
type ServiceHeaderArrayInput interface {
	pulumi.Input

	ToServiceHeaderArrayOutput() ServiceHeaderArrayOutput
	ToServiceHeaderArrayOutputWithContext(context.Context) ServiceHeaderArrayOutput
}

type ServiceHeaderArray []ServiceHeaderInput

func (ServiceHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceHeader)(nil)).Elem()
}

func (i ServiceHeaderArray) ToServiceHeaderArrayOutput() ServiceHeaderArrayOutput {
	return i.ToServiceHeaderArrayOutputWithContext(context.Background())
}

func (i ServiceHeaderArray) ToServiceHeaderArrayOutputWithContext(ctx context.Context) ServiceHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceHeaderArrayOutput)
}

// A service header object
type ServiceHeaderOutput struct{ *pulumi.OutputState }

func (ServiceHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceHeader)(nil)).Elem()
}

func (o ServiceHeaderOutput) ToServiceHeaderOutput() ServiceHeaderOutput {
	return o
}

func (o ServiceHeaderOutput) ToServiceHeaderOutputWithContext(ctx context.Context) ServiceHeaderOutput {
	return o
}

func (o ServiceHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceHeader) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceHeaderOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceHeader) string { return v.Path }).(pulumi.StringOutput)
}

func (o ServiceHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceHeader) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceHeaderPtrOutput struct{ *pulumi.OutputState }

func (ServiceHeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceHeader)(nil)).Elem()
}

func (o ServiceHeaderPtrOutput) ToServiceHeaderPtrOutput() ServiceHeaderPtrOutput {
	return o
}

func (o ServiceHeaderPtrOutput) ToServiceHeaderPtrOutputWithContext(ctx context.Context) ServiceHeaderPtrOutput {
	return o
}

func (o ServiceHeaderPtrOutput) Elem() ServiceHeaderOutput {
	return o.ApplyT(func(v *ServiceHeader) ServiceHeader {
		if v != nil {
			return *v
		}
		var ret ServiceHeader
		return ret
	}).(ServiceHeaderOutput)
}

func (o ServiceHeaderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceHeader) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ServiceHeaderPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceHeader) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

func (o ServiceHeaderPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceHeader) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type ServiceHeaderArrayOutput struct{ *pulumi.OutputState }

func (ServiceHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceHeader)(nil)).Elem()
}

func (o ServiceHeaderArrayOutput) ToServiceHeaderArrayOutput() ServiceHeaderArrayOutput {
	return o
}

func (o ServiceHeaderArrayOutput) ToServiceHeaderArrayOutputWithContext(ctx context.Context) ServiceHeaderArrayOutput {
	return o
}

func (o ServiceHeaderArrayOutput) Index(i pulumi.IntInput) ServiceHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceHeader {
		return vs[0].([]ServiceHeader)[vs[1].(int)]
	}).(ServiceHeaderOutput)
}

// A static website service
type StaticSiteType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                    `pulumi:"repo"`
	ServiceDetails *StaticSiteServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                   `pulumi:"slug"`
	Suspended      *ServiceSuspended         `pulumi:"suspended"`
	Suspenders     []string                  `pulumi:"suspenders"`
	Type           *string                   `pulumi:"type"`
	UpdatedAt      *string                   `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for StaticSiteType
func (val *StaticSiteType) Defaults() *StaticSiteType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "static_site"
		tmp.Type = &type_
	}
	return &tmp
}

// A route object for a static site
type StaticSiteRoute struct {
	Destination string              `pulumi:"destination"`
	Source      string              `pulumi:"source"`
	Type        StaticSiteRouteType `pulumi:"type"`
}

// StaticSiteRouteInput is an input type that accepts StaticSiteRouteArgs and StaticSiteRouteOutput values.
// You can construct a concrete instance of `StaticSiteRouteInput` via:
//
//          StaticSiteRouteArgs{...}
type StaticSiteRouteInput interface {
	pulumi.Input

	ToStaticSiteRouteOutput() StaticSiteRouteOutput
	ToStaticSiteRouteOutputWithContext(context.Context) StaticSiteRouteOutput
}

// A route object for a static site
type StaticSiteRouteArgs struct {
	Destination pulumi.StringInput       `pulumi:"destination"`
	Source      pulumi.StringInput       `pulumi:"source"`
	Type        StaticSiteRouteTypeInput `pulumi:"type"`
}

func (StaticSiteRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteRoute)(nil)).Elem()
}

func (i StaticSiteRouteArgs) ToStaticSiteRouteOutput() StaticSiteRouteOutput {
	return i.ToStaticSiteRouteOutputWithContext(context.Background())
}

func (i StaticSiteRouteArgs) ToStaticSiteRouteOutputWithContext(ctx context.Context) StaticSiteRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteRouteOutput)
}

// StaticSiteRouteArrayInput is an input type that accepts StaticSiteRouteArray and StaticSiteRouteArrayOutput values.
// You can construct a concrete instance of `StaticSiteRouteArrayInput` via:
//
//          StaticSiteRouteArray{ StaticSiteRouteArgs{...} }
type StaticSiteRouteArrayInput interface {
	pulumi.Input

	ToStaticSiteRouteArrayOutput() StaticSiteRouteArrayOutput
	ToStaticSiteRouteArrayOutputWithContext(context.Context) StaticSiteRouteArrayOutput
}

type StaticSiteRouteArray []StaticSiteRouteInput

func (StaticSiteRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticSiteRoute)(nil)).Elem()
}

func (i StaticSiteRouteArray) ToStaticSiteRouteArrayOutput() StaticSiteRouteArrayOutput {
	return i.ToStaticSiteRouteArrayOutputWithContext(context.Background())
}

func (i StaticSiteRouteArray) ToStaticSiteRouteArrayOutputWithContext(ctx context.Context) StaticSiteRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteRouteArrayOutput)
}

// A route object for a static site
type StaticSiteRouteOutput struct{ *pulumi.OutputState }

func (StaticSiteRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteRoute)(nil)).Elem()
}

func (o StaticSiteRouteOutput) ToStaticSiteRouteOutput() StaticSiteRouteOutput {
	return o
}

func (o StaticSiteRouteOutput) ToStaticSiteRouteOutputWithContext(ctx context.Context) StaticSiteRouteOutput {
	return o
}

func (o StaticSiteRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteRoute) string { return v.Destination }).(pulumi.StringOutput)
}

func (o StaticSiteRouteOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v StaticSiteRoute) string { return v.Source }).(pulumi.StringOutput)
}

func (o StaticSiteRouteOutput) Type() StaticSiteRouteTypeOutput {
	return o.ApplyT(func(v StaticSiteRoute) StaticSiteRouteType { return v.Type }).(StaticSiteRouteTypeOutput)
}

type StaticSiteRoutePtrOutput struct{ *pulumi.OutputState }

func (StaticSiteRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteRoute)(nil)).Elem()
}

func (o StaticSiteRoutePtrOutput) ToStaticSiteRoutePtrOutput() StaticSiteRoutePtrOutput {
	return o
}

func (o StaticSiteRoutePtrOutput) ToStaticSiteRoutePtrOutputWithContext(ctx context.Context) StaticSiteRoutePtrOutput {
	return o
}

func (o StaticSiteRoutePtrOutput) Elem() StaticSiteRouteOutput {
	return o.ApplyT(func(v *StaticSiteRoute) StaticSiteRoute {
		if v != nil {
			return *v
		}
		var ret StaticSiteRoute
		return ret
	}).(StaticSiteRouteOutput)
}

func (o StaticSiteRoutePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteRoute) *string {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(pulumi.StringPtrOutput)
}

func (o StaticSiteRoutePtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteRoute) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func (o StaticSiteRoutePtrOutput) Type() StaticSiteRouteTypePtrOutput {
	return o.ApplyT(func(v *StaticSiteRoute) *StaticSiteRouteType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(StaticSiteRouteTypePtrOutput)
}

type StaticSiteRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticSiteRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticSiteRoute)(nil)).Elem()
}

func (o StaticSiteRouteArrayOutput) ToStaticSiteRouteArrayOutput() StaticSiteRouteArrayOutput {
	return o
}

func (o StaticSiteRouteArrayOutput) ToStaticSiteRouteArrayOutputWithContext(ctx context.Context) StaticSiteRouteArrayOutput {
	return o
}

func (o StaticSiteRouteArrayOutput) Index(i pulumi.IntInput) StaticSiteRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticSiteRoute {
		return vs[0].([]StaticSiteRoute)[vs[1].(int)]
	}).(StaticSiteRouteOutput)
}

type StaticSiteServiceDetails struct {
	BuildCommand               *string                                             `pulumi:"buildCommand"`
	Headers                    []ServiceHeader                                     `pulumi:"headers"`
	ParentServer               *StaticSiteServiceDetailsParentServerProperties     `pulumi:"parentServer"`
	PublishPath                *string                                             `pulumi:"publishPath"`
	PullRequestPreviewsEnabled *StaticSiteServiceDetailsPullRequestPreviewsEnabled `pulumi:"pullRequestPreviewsEnabled"`
	Routes                     []StaticSiteRoute                                   `pulumi:"routes"`
	// The HTTPS service URL. A subdomain of onrender.com, by default.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for StaticSiteServiceDetails
func (val *StaticSiteServiceDetails) Defaults() *StaticSiteServiceDetails {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.PublishPath) {
		publishPath_ := "public"
		tmp.PublishPath = &publishPath_
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		pullRequestPreviewsEnabled_ := StaticSiteServiceDetailsPullRequestPreviewsEnabled("no")
		tmp.PullRequestPreviewsEnabled = &pullRequestPreviewsEnabled_
	}
	return &tmp
}

// StaticSiteServiceDetailsInput is an input type that accepts StaticSiteServiceDetailsArgs and StaticSiteServiceDetailsOutput values.
// You can construct a concrete instance of `StaticSiteServiceDetailsInput` via:
//
//          StaticSiteServiceDetailsArgs{...}
type StaticSiteServiceDetailsInput interface {
	pulumi.Input

	ToStaticSiteServiceDetailsOutput() StaticSiteServiceDetailsOutput
	ToStaticSiteServiceDetailsOutputWithContext(context.Context) StaticSiteServiceDetailsOutput
}

type StaticSiteServiceDetailsArgs struct {
	BuildCommand               pulumi.StringPtrInput                                      `pulumi:"buildCommand"`
	Headers                    ServiceHeaderArrayInput                                    `pulumi:"headers"`
	ParentServer               StaticSiteServiceDetailsParentServerPropertiesPtrInput     `pulumi:"parentServer"`
	PublishPath                pulumi.StringPtrInput                                      `pulumi:"publishPath"`
	PullRequestPreviewsEnabled StaticSiteServiceDetailsPullRequestPreviewsEnabledPtrInput `pulumi:"pullRequestPreviewsEnabled"`
	Routes                     StaticSiteRouteArrayInput                                  `pulumi:"routes"`
	// The HTTPS service URL. A subdomain of onrender.com, by default.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for StaticSiteServiceDetailsArgs
func (val *StaticSiteServiceDetailsArgs) Defaults() *StaticSiteServiceDetailsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.PublishPath) {
		tmp.PublishPath = pulumi.StringPtr("public")
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		tmp.PullRequestPreviewsEnabled = StaticSiteServiceDetailsPullRequestPreviewsEnabled("no")
	}
	return &tmp
}
func (StaticSiteServiceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteServiceDetails)(nil)).Elem()
}

func (i StaticSiteServiceDetailsArgs) ToStaticSiteServiceDetailsOutput() StaticSiteServiceDetailsOutput {
	return i.ToStaticSiteServiceDetailsOutputWithContext(context.Background())
}

func (i StaticSiteServiceDetailsArgs) ToStaticSiteServiceDetailsOutputWithContext(ctx context.Context) StaticSiteServiceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsOutput)
}

func (i StaticSiteServiceDetailsArgs) ToStaticSiteServiceDetailsPtrOutput() StaticSiteServiceDetailsPtrOutput {
	return i.ToStaticSiteServiceDetailsPtrOutputWithContext(context.Background())
}

func (i StaticSiteServiceDetailsArgs) ToStaticSiteServiceDetailsPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsOutput).ToStaticSiteServiceDetailsPtrOutputWithContext(ctx)
}

// StaticSiteServiceDetailsPtrInput is an input type that accepts StaticSiteServiceDetailsArgs, StaticSiteServiceDetailsPtr and StaticSiteServiceDetailsPtrOutput values.
// You can construct a concrete instance of `StaticSiteServiceDetailsPtrInput` via:
//
//          StaticSiteServiceDetailsArgs{...}
//
//  or:
//
//          nil
type StaticSiteServiceDetailsPtrInput interface {
	pulumi.Input

	ToStaticSiteServiceDetailsPtrOutput() StaticSiteServiceDetailsPtrOutput
	ToStaticSiteServiceDetailsPtrOutputWithContext(context.Context) StaticSiteServiceDetailsPtrOutput
}

type staticSiteServiceDetailsPtrType StaticSiteServiceDetailsArgs

func StaticSiteServiceDetailsPtr(v *StaticSiteServiceDetailsArgs) StaticSiteServiceDetailsPtrInput {
	return (*staticSiteServiceDetailsPtrType)(v)
}

func (*staticSiteServiceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteServiceDetails)(nil)).Elem()
}

func (i *staticSiteServiceDetailsPtrType) ToStaticSiteServiceDetailsPtrOutput() StaticSiteServiceDetailsPtrOutput {
	return i.ToStaticSiteServiceDetailsPtrOutputWithContext(context.Background())
}

func (i *staticSiteServiceDetailsPtrType) ToStaticSiteServiceDetailsPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsPtrOutput)
}

type StaticSiteServiceDetailsOutput struct{ *pulumi.OutputState }

func (StaticSiteServiceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteServiceDetails)(nil)).Elem()
}

func (o StaticSiteServiceDetailsOutput) ToStaticSiteServiceDetailsOutput() StaticSiteServiceDetailsOutput {
	return o
}

func (o StaticSiteServiceDetailsOutput) ToStaticSiteServiceDetailsOutputWithContext(ctx context.Context) StaticSiteServiceDetailsOutput {
	return o
}

func (o StaticSiteServiceDetailsOutput) ToStaticSiteServiceDetailsPtrOutput() StaticSiteServiceDetailsPtrOutput {
	return o.ToStaticSiteServiceDetailsPtrOutputWithContext(context.Background())
}

func (o StaticSiteServiceDetailsOutput) ToStaticSiteServiceDetailsPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticSiteServiceDetails) *StaticSiteServiceDetails {
		return &v
	}).(StaticSiteServiceDetailsPtrOutput)
}

func (o StaticSiteServiceDetailsOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) *string { return v.BuildCommand }).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsOutput) Headers() ServiceHeaderArrayOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) []ServiceHeader { return v.Headers }).(ServiceHeaderArrayOutput)
}

func (o StaticSiteServiceDetailsOutput) ParentServer() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) *StaticSiteServiceDetailsParentServerProperties {
		return v.ParentServer
	}).(StaticSiteServiceDetailsParentServerPropertiesPtrOutput)
}

func (o StaticSiteServiceDetailsOutput) PublishPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) *string { return v.PublishPath }).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsOutput) PullRequestPreviewsEnabled() StaticSiteServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) *StaticSiteServiceDetailsPullRequestPreviewsEnabled {
		return v.PullRequestPreviewsEnabled
	}).(StaticSiteServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o StaticSiteServiceDetailsOutput) Routes() StaticSiteRouteArrayOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) []StaticSiteRoute { return v.Routes }).(StaticSiteRouteArrayOutput)
}

// The HTTPS service URL. A subdomain of onrender.com, by default.
func (o StaticSiteServiceDetailsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetails) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type StaticSiteServiceDetailsPtrOutput struct{ *pulumi.OutputState }

func (StaticSiteServiceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteServiceDetails)(nil)).Elem()
}

func (o StaticSiteServiceDetailsPtrOutput) ToStaticSiteServiceDetailsPtrOutput() StaticSiteServiceDetailsPtrOutput {
	return o
}

func (o StaticSiteServiceDetailsPtrOutput) ToStaticSiteServiceDetailsPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsPtrOutput {
	return o
}

func (o StaticSiteServiceDetailsPtrOutput) Elem() StaticSiteServiceDetailsOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) StaticSiteServiceDetails {
		if v != nil {
			return *v
		}
		var ret StaticSiteServiceDetails
		return ret
	}).(StaticSiteServiceDetailsOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) BuildCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) *string {
		if v == nil {
			return nil
		}
		return v.BuildCommand
	}).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) Headers() ServiceHeaderArrayOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) []ServiceHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(ServiceHeaderArrayOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) ParentServer() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) *StaticSiteServiceDetailsParentServerProperties {
		if v == nil {
			return nil
		}
		return v.ParentServer
	}).(StaticSiteServiceDetailsParentServerPropertiesPtrOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) PublishPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) *string {
		if v == nil {
			return nil
		}
		return v.PublishPath
	}).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) PullRequestPreviewsEnabled() StaticSiteServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) *StaticSiteServiceDetailsPullRequestPreviewsEnabled {
		if v == nil {
			return nil
		}
		return v.PullRequestPreviewsEnabled
	}).(StaticSiteServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o StaticSiteServiceDetailsPtrOutput) Routes() StaticSiteRouteArrayOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) []StaticSiteRoute {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(StaticSiteRouteArrayOutput)
}

// The HTTPS service URL. A subdomain of onrender.com, by default.
func (o StaticSiteServiceDetailsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetails) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type StaticSiteServiceDetailsParentServerProperties struct {
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
}

// StaticSiteServiceDetailsParentServerPropertiesInput is an input type that accepts StaticSiteServiceDetailsParentServerPropertiesArgs and StaticSiteServiceDetailsParentServerPropertiesOutput values.
// You can construct a concrete instance of `StaticSiteServiceDetailsParentServerPropertiesInput` via:
//
//          StaticSiteServiceDetailsParentServerPropertiesArgs{...}
type StaticSiteServiceDetailsParentServerPropertiesInput interface {
	pulumi.Input

	ToStaticSiteServiceDetailsParentServerPropertiesOutput() StaticSiteServiceDetailsParentServerPropertiesOutput
	ToStaticSiteServiceDetailsParentServerPropertiesOutputWithContext(context.Context) StaticSiteServiceDetailsParentServerPropertiesOutput
}

type StaticSiteServiceDetailsParentServerPropertiesArgs struct {
	Id   pulumi.StringPtrInput `pulumi:"id"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (StaticSiteServiceDetailsParentServerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteServiceDetailsParentServerProperties)(nil)).Elem()
}

func (i StaticSiteServiceDetailsParentServerPropertiesArgs) ToStaticSiteServiceDetailsParentServerPropertiesOutput() StaticSiteServiceDetailsParentServerPropertiesOutput {
	return i.ToStaticSiteServiceDetailsParentServerPropertiesOutputWithContext(context.Background())
}

func (i StaticSiteServiceDetailsParentServerPropertiesArgs) ToStaticSiteServiceDetailsParentServerPropertiesOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsParentServerPropertiesOutput)
}

func (i StaticSiteServiceDetailsParentServerPropertiesArgs) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutput() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return i.ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(context.Background())
}

func (i StaticSiteServiceDetailsParentServerPropertiesArgs) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsParentServerPropertiesOutput).ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(ctx)
}

// StaticSiteServiceDetailsParentServerPropertiesPtrInput is an input type that accepts StaticSiteServiceDetailsParentServerPropertiesArgs, StaticSiteServiceDetailsParentServerPropertiesPtr and StaticSiteServiceDetailsParentServerPropertiesPtrOutput values.
// You can construct a concrete instance of `StaticSiteServiceDetailsParentServerPropertiesPtrInput` via:
//
//          StaticSiteServiceDetailsParentServerPropertiesArgs{...}
//
//  or:
//
//          nil
type StaticSiteServiceDetailsParentServerPropertiesPtrInput interface {
	pulumi.Input

	ToStaticSiteServiceDetailsParentServerPropertiesPtrOutput() StaticSiteServiceDetailsParentServerPropertiesPtrOutput
	ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(context.Context) StaticSiteServiceDetailsParentServerPropertiesPtrOutput
}

type staticSiteServiceDetailsParentServerPropertiesPtrType StaticSiteServiceDetailsParentServerPropertiesArgs

func StaticSiteServiceDetailsParentServerPropertiesPtr(v *StaticSiteServiceDetailsParentServerPropertiesArgs) StaticSiteServiceDetailsParentServerPropertiesPtrInput {
	return (*staticSiteServiceDetailsParentServerPropertiesPtrType)(v)
}

func (*staticSiteServiceDetailsParentServerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteServiceDetailsParentServerProperties)(nil)).Elem()
}

func (i *staticSiteServiceDetailsParentServerPropertiesPtrType) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutput() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return i.ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(context.Background())
}

func (i *staticSiteServiceDetailsParentServerPropertiesPtrType) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticSiteServiceDetailsParentServerPropertiesPtrOutput)
}

type StaticSiteServiceDetailsParentServerPropertiesOutput struct{ *pulumi.OutputState }

func (StaticSiteServiceDetailsParentServerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticSiteServiceDetailsParentServerProperties)(nil)).Elem()
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) ToStaticSiteServiceDetailsParentServerPropertiesOutput() StaticSiteServiceDetailsParentServerPropertiesOutput {
	return o
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) ToStaticSiteServiceDetailsParentServerPropertiesOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesOutput {
	return o
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutput() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o.ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(context.Background())
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticSiteServiceDetailsParentServerProperties) *StaticSiteServiceDetailsParentServerProperties {
		return &v
	}).(StaticSiteServiceDetailsParentServerPropertiesPtrOutput)
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetailsParentServerProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsParentServerPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticSiteServiceDetailsParentServerProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type StaticSiteServiceDetailsParentServerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StaticSiteServiceDetailsParentServerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticSiteServiceDetailsParentServerProperties)(nil)).Elem()
}

func (o StaticSiteServiceDetailsParentServerPropertiesPtrOutput) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutput() StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o
}

func (o StaticSiteServiceDetailsParentServerPropertiesPtrOutput) ToStaticSiteServiceDetailsParentServerPropertiesPtrOutputWithContext(ctx context.Context) StaticSiteServiceDetailsParentServerPropertiesPtrOutput {
	return o
}

func (o StaticSiteServiceDetailsParentServerPropertiesPtrOutput) Elem() StaticSiteServiceDetailsParentServerPropertiesOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetailsParentServerProperties) StaticSiteServiceDetailsParentServerProperties {
		if v != nil {
			return *v
		}
		var ret StaticSiteServiceDetailsParentServerProperties
		return ret
	}).(StaticSiteServiceDetailsParentServerPropertiesOutput)
}

func (o StaticSiteServiceDetailsParentServerPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetailsParentServerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o StaticSiteServiceDetailsParentServerPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticSiteServiceDetailsParentServerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A web service
type WebServiceType struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string `pulumi:"branch"`
	CreatedAt *string `pulumi:"createdAt"`
	Name      string  `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                    `pulumi:"repo"`
	ServiceDetails *WebServiceServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                   `pulumi:"slug"`
	Suspended      *ServiceSuspended         `pulumi:"suspended"`
	Suspenders     []string                  `pulumi:"suspenders"`
	Type           *string                   `pulumi:"type"`
	UpdatedAt      *string                   `pulumi:"updatedAt"`
}

// Defaults sets the appropriate defaults for WebServiceType
func (val *WebServiceType) Defaults() *WebServiceType {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.AutoDeploy) {
		autoDeploy_ := ServiceAutoDeploy("no")
		tmp.AutoDeploy = &autoDeploy_
	}
	tmp.ServiceDetails = tmp.ServiceDetails.Defaults()

	if isZero(tmp.Type) {
		type_ := "web_service"
		tmp.Type = &type_
	}
	return &tmp
}

type WebServiceServiceDetails struct {
	Disk                       *Disk                                               `pulumi:"disk"`
	Env                        WebServiceServiceDetailsEnv                         `pulumi:"env"`
	EnvSpecificDetails         interface{}                                         `pulumi:"envSpecificDetails"`
	HealthCheckPath            *string                                             `pulumi:"healthCheckPath"`
	NumInstances               *float64                                            `pulumi:"numInstances"`
	Plan                       *WebServiceServiceDetailsPlan                       `pulumi:"plan"`
	PullRequestPreviewsEnabled *WebServiceServiceDetailsPullRequestPreviewsEnabled `pulumi:"pullRequestPreviewsEnabled"`
	Region                     *WebServiceServiceDetailsRegion                     `pulumi:"region"`
}

// Defaults sets the appropriate defaults for WebServiceServiceDetails
func (val *WebServiceServiceDetails) Defaults() *WebServiceServiceDetails {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Disk = tmp.Disk.Defaults()

	if isZero(tmp.NumInstances) {
		numInstances_ := 1.0
		tmp.NumInstances = &numInstances_
	}
	if isZero(tmp.Plan) {
		plan_ := WebServiceServiceDetailsPlan("starter")
		tmp.Plan = &plan_
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		pullRequestPreviewsEnabled_ := WebServiceServiceDetailsPullRequestPreviewsEnabled("no")
		tmp.PullRequestPreviewsEnabled = &pullRequestPreviewsEnabled_
	}
	if isZero(tmp.Region) {
		region_ := WebServiceServiceDetailsRegion("oregon")
		tmp.Region = &region_
	}
	return &tmp
}

// WebServiceServiceDetailsInput is an input type that accepts WebServiceServiceDetailsArgs and WebServiceServiceDetailsOutput values.
// You can construct a concrete instance of `WebServiceServiceDetailsInput` via:
//
//          WebServiceServiceDetailsArgs{...}
type WebServiceServiceDetailsInput interface {
	pulumi.Input

	ToWebServiceServiceDetailsOutput() WebServiceServiceDetailsOutput
	ToWebServiceServiceDetailsOutputWithContext(context.Context) WebServiceServiceDetailsOutput
}

type WebServiceServiceDetailsArgs struct {
	Disk                       DiskPtrInput                                               `pulumi:"disk"`
	Env                        WebServiceServiceDetailsEnvInput                           `pulumi:"env"`
	EnvSpecificDetails         pulumi.Input                                               `pulumi:"envSpecificDetails"`
	HealthCheckPath            pulumi.StringPtrInput                                      `pulumi:"healthCheckPath"`
	NumInstances               pulumi.Float64PtrInput                                     `pulumi:"numInstances"`
	Plan                       WebServiceServiceDetailsPlanPtrInput                       `pulumi:"plan"`
	PullRequestPreviewsEnabled WebServiceServiceDetailsPullRequestPreviewsEnabledPtrInput `pulumi:"pullRequestPreviewsEnabled"`
	Region                     WebServiceServiceDetailsRegionPtrInput                     `pulumi:"region"`
}

// Defaults sets the appropriate defaults for WebServiceServiceDetailsArgs
func (val *WebServiceServiceDetailsArgs) Defaults() *WebServiceServiceDetailsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if isZero(tmp.NumInstances) {
		tmp.NumInstances = pulumi.Float64Ptr(1.0)
	}
	if isZero(tmp.Plan) {
		tmp.Plan = WebServiceServiceDetailsPlan("starter")
	}
	if isZero(tmp.PullRequestPreviewsEnabled) {
		tmp.PullRequestPreviewsEnabled = WebServiceServiceDetailsPullRequestPreviewsEnabled("no")
	}
	if isZero(tmp.Region) {
		tmp.Region = WebServiceServiceDetailsRegion("oregon")
	}
	return &tmp
}
func (WebServiceServiceDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServiceServiceDetails)(nil)).Elem()
}

func (i WebServiceServiceDetailsArgs) ToWebServiceServiceDetailsOutput() WebServiceServiceDetailsOutput {
	return i.ToWebServiceServiceDetailsOutputWithContext(context.Background())
}

func (i WebServiceServiceDetailsArgs) ToWebServiceServiceDetailsOutputWithContext(ctx context.Context) WebServiceServiceDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServiceServiceDetailsOutput)
}

func (i WebServiceServiceDetailsArgs) ToWebServiceServiceDetailsPtrOutput() WebServiceServiceDetailsPtrOutput {
	return i.ToWebServiceServiceDetailsPtrOutputWithContext(context.Background())
}

func (i WebServiceServiceDetailsArgs) ToWebServiceServiceDetailsPtrOutputWithContext(ctx context.Context) WebServiceServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServiceServiceDetailsOutput).ToWebServiceServiceDetailsPtrOutputWithContext(ctx)
}

// WebServiceServiceDetailsPtrInput is an input type that accepts WebServiceServiceDetailsArgs, WebServiceServiceDetailsPtr and WebServiceServiceDetailsPtrOutput values.
// You can construct a concrete instance of `WebServiceServiceDetailsPtrInput` via:
//
//          WebServiceServiceDetailsArgs{...}
//
//  or:
//
//          nil
type WebServiceServiceDetailsPtrInput interface {
	pulumi.Input

	ToWebServiceServiceDetailsPtrOutput() WebServiceServiceDetailsPtrOutput
	ToWebServiceServiceDetailsPtrOutputWithContext(context.Context) WebServiceServiceDetailsPtrOutput
}

type webServiceServiceDetailsPtrType WebServiceServiceDetailsArgs

func WebServiceServiceDetailsPtr(v *WebServiceServiceDetailsArgs) WebServiceServiceDetailsPtrInput {
	return (*webServiceServiceDetailsPtrType)(v)
}

func (*webServiceServiceDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServiceServiceDetails)(nil)).Elem()
}

func (i *webServiceServiceDetailsPtrType) ToWebServiceServiceDetailsPtrOutput() WebServiceServiceDetailsPtrOutput {
	return i.ToWebServiceServiceDetailsPtrOutputWithContext(context.Background())
}

func (i *webServiceServiceDetailsPtrType) ToWebServiceServiceDetailsPtrOutputWithContext(ctx context.Context) WebServiceServiceDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebServiceServiceDetailsPtrOutput)
}

type WebServiceServiceDetailsOutput struct{ *pulumi.OutputState }

func (WebServiceServiceDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebServiceServiceDetails)(nil)).Elem()
}

func (o WebServiceServiceDetailsOutput) ToWebServiceServiceDetailsOutput() WebServiceServiceDetailsOutput {
	return o
}

func (o WebServiceServiceDetailsOutput) ToWebServiceServiceDetailsOutputWithContext(ctx context.Context) WebServiceServiceDetailsOutput {
	return o
}

func (o WebServiceServiceDetailsOutput) ToWebServiceServiceDetailsPtrOutput() WebServiceServiceDetailsPtrOutput {
	return o.ToWebServiceServiceDetailsPtrOutputWithContext(context.Background())
}

func (o WebServiceServiceDetailsOutput) ToWebServiceServiceDetailsPtrOutputWithContext(ctx context.Context) WebServiceServiceDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebServiceServiceDetails) *WebServiceServiceDetails {
		return &v
	}).(WebServiceServiceDetailsPtrOutput)
}

func (o WebServiceServiceDetailsOutput) Disk() DiskPtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *Disk { return v.Disk }).(DiskPtrOutput)
}

func (o WebServiceServiceDetailsOutput) Env() WebServiceServiceDetailsEnvOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) WebServiceServiceDetailsEnv { return v.Env }).(WebServiceServiceDetailsEnvOutput)
}

func (o WebServiceServiceDetailsOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) interface{} { return v.EnvSpecificDetails }).(pulumi.AnyOutput)
}

func (o WebServiceServiceDetailsOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *string { return v.HealthCheckPath }).(pulumi.StringPtrOutput)
}

func (o WebServiceServiceDetailsOutput) NumInstances() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *float64 { return v.NumInstances }).(pulumi.Float64PtrOutput)
}

func (o WebServiceServiceDetailsOutput) Plan() WebServiceServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *WebServiceServiceDetailsPlan { return v.Plan }).(WebServiceServiceDetailsPlanPtrOutput)
}

func (o WebServiceServiceDetailsOutput) PullRequestPreviewsEnabled() WebServiceServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *WebServiceServiceDetailsPullRequestPreviewsEnabled {
		return v.PullRequestPreviewsEnabled
	}).(WebServiceServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o WebServiceServiceDetailsOutput) Region() WebServiceServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v WebServiceServiceDetails) *WebServiceServiceDetailsRegion { return v.Region }).(WebServiceServiceDetailsRegionPtrOutput)
}

type WebServiceServiceDetailsPtrOutput struct{ *pulumi.OutputState }

func (WebServiceServiceDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebServiceServiceDetails)(nil)).Elem()
}

func (o WebServiceServiceDetailsPtrOutput) ToWebServiceServiceDetailsPtrOutput() WebServiceServiceDetailsPtrOutput {
	return o
}

func (o WebServiceServiceDetailsPtrOutput) ToWebServiceServiceDetailsPtrOutputWithContext(ctx context.Context) WebServiceServiceDetailsPtrOutput {
	return o
}

func (o WebServiceServiceDetailsPtrOutput) Elem() WebServiceServiceDetailsOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) WebServiceServiceDetails {
		if v != nil {
			return *v
		}
		var ret WebServiceServiceDetails
		return ret
	}).(WebServiceServiceDetailsOutput)
}

func (o WebServiceServiceDetailsPtrOutput) Disk() DiskPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *Disk {
		if v == nil {
			return nil
		}
		return v.Disk
	}).(DiskPtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) Env() WebServiceServiceDetailsEnvPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *WebServiceServiceDetailsEnv {
		if v == nil {
			return nil
		}
		return &v.Env
	}).(WebServiceServiceDetailsEnvPtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) EnvSpecificDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) interface{} {
		if v == nil {
			return nil
		}
		return v.EnvSpecificDetails
	}).(pulumi.AnyOutput)
}

func (o WebServiceServiceDetailsPtrOutput) HealthCheckPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *string {
		if v == nil {
			return nil
		}
		return v.HealthCheckPath
	}).(pulumi.StringPtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) NumInstances() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *float64 {
		if v == nil {
			return nil
		}
		return v.NumInstances
	}).(pulumi.Float64PtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) Plan() WebServiceServiceDetailsPlanPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *WebServiceServiceDetailsPlan {
		if v == nil {
			return nil
		}
		return v.Plan
	}).(WebServiceServiceDetailsPlanPtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) PullRequestPreviewsEnabled() WebServiceServiceDetailsPullRequestPreviewsEnabledPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *WebServiceServiceDetailsPullRequestPreviewsEnabled {
		if v == nil {
			return nil
		}
		return v.PullRequestPreviewsEnabled
	}).(WebServiceServiceDetailsPullRequestPreviewsEnabledPtrOutput)
}

func (o WebServiceServiceDetailsPtrOutput) Region() WebServiceServiceDetailsRegionPtrOutput {
	return o.ApplyT(func(v *WebServiceServiceDetails) *WebServiceServiceDetailsRegion {
		if v == nil {
			return nil
		}
		return v.Region
	}).(WebServiceServiceDetailsRegionPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobServiceDetailsInput)(nil)).Elem(), CronJobServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobServiceDetailsPtrInput)(nil)).Elem(), CronJobServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), DiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskPtrInput)(nil)).Elem(), DiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerPropertiesInput)(nil)).Elem(), ServerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDetailsInput)(nil)).Elem(), ServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDetailsPtrInput)(nil)).Elem(), ServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceHeaderInput)(nil)).Elem(), ServiceHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceHeaderArrayInput)(nil)).Elem(), ServiceHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteRouteInput)(nil)).Elem(), StaticSiteRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteRouteArrayInput)(nil)).Elem(), StaticSiteRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteServiceDetailsInput)(nil)).Elem(), StaticSiteServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteServiceDetailsPtrInput)(nil)).Elem(), StaticSiteServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteServiceDetailsParentServerPropertiesInput)(nil)).Elem(), StaticSiteServiceDetailsParentServerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticSiteServiceDetailsParentServerPropertiesPtrInput)(nil)).Elem(), StaticSiteServiceDetailsParentServerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServiceServiceDetailsInput)(nil)).Elem(), WebServiceServiceDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebServiceServiceDetailsPtrInput)(nil)).Elem(), WebServiceServiceDetailsArgs{})
	pulumi.RegisterOutputType(CommitOutput{})
	pulumi.RegisterOutputType(CommitPtrOutput{})
	pulumi.RegisterOutputType(CronJobServiceDetailsOutput{})
	pulumi.RegisterOutputType(CronJobServiceDetailsPtrOutput{})
	pulumi.RegisterOutputType(CustomDomainTypeOutput{})
	pulumi.RegisterOutputType(CustomDomainTypePtrOutput{})
	pulumi.RegisterOutputType(CustomDomainServerPropertiesOutput{})
	pulumi.RegisterOutputType(CustomDomainServerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DeployTypeOutput{})
	pulumi.RegisterOutputType(DeployTypePtrOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskPtrOutput{})
	pulumi.RegisterOutputType(EnvVarKeyValueOutput{})
	pulumi.RegisterOutputType(EnvVarKeyValuePtrOutput{})
	pulumi.RegisterOutputType(GetBackgroundWorkerTypeOutput{})
	pulumi.RegisterOutputType(GetCronJobTypeOutput{})
	pulumi.RegisterOutputType(GetPrivateServiceTypeOutput{})
	pulumi.RegisterOutputType(GetStaticSiteTypeOutput{})
	pulumi.RegisterOutputType(GetWebServiceTypeOutput{})
	pulumi.RegisterOutputType(ListCustomDomainsResponseOutput{})
	pulumi.RegisterOutputType(ListCustomDomainsResponseArrayOutput{})
	pulumi.RegisterOutputType(ListDeploysResponseOutput{})
	pulumi.RegisterOutputType(ListDeploysResponseArrayOutput{})
	pulumi.RegisterOutputType(ListEnvVarsResponseOutput{})
	pulumi.RegisterOutputType(ListEnvVarsResponseArrayOutput{})
	pulumi.RegisterOutputType(ListServiceHeadersResponseOutput{})
	pulumi.RegisterOutputType(ListServiceHeadersResponseArrayOutput{})
	pulumi.RegisterOutputType(ListStaticSiteRoutesResponseOutput{})
	pulumi.RegisterOutputType(ListStaticSiteRoutesResponseArrayOutput{})
	pulumi.RegisterOutputType(ServerPropertiesOutput{})
	pulumi.RegisterOutputType(ServiceDetailsOutput{})
	pulumi.RegisterOutputType(ServiceDetailsPtrOutput{})
	pulumi.RegisterOutputType(ServiceHeaderOutput{})
	pulumi.RegisterOutputType(ServiceHeaderPtrOutput{})
	pulumi.RegisterOutputType(ServiceHeaderArrayOutput{})
	pulumi.RegisterOutputType(StaticSiteRouteOutput{})
	pulumi.RegisterOutputType(StaticSiteRoutePtrOutput{})
	pulumi.RegisterOutputType(StaticSiteRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticSiteServiceDetailsOutput{})
	pulumi.RegisterOutputType(StaticSiteServiceDetailsPtrOutput{})
	pulumi.RegisterOutputType(StaticSiteServiceDetailsParentServerPropertiesOutput{})
	pulumi.RegisterOutputType(StaticSiteServiceDetailsParentServerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(WebServiceServiceDetailsOutput{})
	pulumi.RegisterOutputType(WebServiceServiceDetailsPtrOutput{})
}
