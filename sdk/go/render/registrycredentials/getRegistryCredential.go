// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package registrycredentials

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRegistryCredential(ctx *pulumi.Context, args *LookupRegistryCredentialArgs, opts ...pulumi.InvokeOption) (*LookupRegistryCredentialResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegistryCredentialResult
	err := ctx.Invoke("render:registrycredentials:getRegistryCredential", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRegistryCredentialArgs struct {
	// The ID of the registry credential
	RegistryCredentialId string `pulumi:"registryCredentialId"`
}

type LookupRegistryCredentialResult struct {
	// Unique identifier for this credential
	Id string `pulumi:"id"`
	// Descriptive name for this credential
	Name string `pulumi:"name"`
	// The registry to use this credential with
	Registry RegistryCredentialRegistry `pulumi:"registry"`
	// Last updated time for the credential
	UpdatedAt string `pulumi:"updatedAt"`
	// The username associated with the credential
	Username string `pulumi:"username"`
}

func LookupRegistryCredentialOutput(ctx *pulumi.Context, args LookupRegistryCredentialOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryCredentialResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegistryCredentialResultOutput, error) {
			args := v.(LookupRegistryCredentialArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("render:registrycredentials:getRegistryCredential", args, LookupRegistryCredentialResultOutput{}, options).(LookupRegistryCredentialResultOutput), nil
		}).(LookupRegistryCredentialResultOutput)
}

type LookupRegistryCredentialOutputArgs struct {
	// The ID of the registry credential
	RegistryCredentialId pulumi.StringInput `pulumi:"registryCredentialId"`
}

func (LookupRegistryCredentialOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryCredentialArgs)(nil)).Elem()
}

type LookupRegistryCredentialResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryCredentialResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryCredentialResult)(nil)).Elem()
}

func (o LookupRegistryCredentialResultOutput) ToLookupRegistryCredentialResultOutput() LookupRegistryCredentialResultOutput {
	return o
}

func (o LookupRegistryCredentialResultOutput) ToLookupRegistryCredentialResultOutputWithContext(ctx context.Context) LookupRegistryCredentialResultOutput {
	return o
}

// Unique identifier for this credential
func (o LookupRegistryCredentialResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCredentialResult) string { return v.Id }).(pulumi.StringOutput)
}

// Descriptive name for this credential
func (o LookupRegistryCredentialResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCredentialResult) string { return v.Name }).(pulumi.StringOutput)
}

// The registry to use this credential with
func (o LookupRegistryCredentialResultOutput) Registry() RegistryCredentialRegistryOutput {
	return o.ApplyT(func(v LookupRegistryCredentialResult) RegistryCredentialRegistry { return v.Registry }).(RegistryCredentialRegistryOutput)
}

// Last updated time for the credential
func (o LookupRegistryCredentialResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCredentialResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username associated with the credential
func (o LookupRegistryCredentialResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCredentialResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryCredentialResultOutput{})
}
