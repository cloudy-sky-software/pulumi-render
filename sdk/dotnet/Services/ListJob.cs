// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class ListJob
    {
        public static Task<ListJobResult> InvokeAsync(ListJobArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListJobResult>("render:services:listJob", args ?? new ListJobArgs(), options.WithDefaults());

        public static Output<ListJobResult> Invoke(ListJobInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListJobResult>("render:services:listJob", args ?? new ListJobInvokeArgs(), options.WithDefaults());

        public static Output<ListJobResult> Invoke(ListJobInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<ListJobResult>("render:services:listJob", args ?? new ListJobInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListJobArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public ListJobArgs()
        {
        }
        public static new ListJobArgs Empty => new ListJobArgs();
    }

    public sealed class ListJobInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ListJobInvokeArgs()
        {
        }
        public static new ListJobInvokeArgs Empty => new ListJobInvokeArgs();
    }


    [OutputType]
    public sealed class ListJobResult
    {
        public readonly ImmutableArray<Outputs.JobWithCursor> Items;

        [OutputConstructor]
        private ListJobResult(ImmutableArray<Outputs.JobWithCursor> items)
        {
            Items = items;
        }
    }
}
