// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The environments associated with the project
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// The environments to create when creating the project
	Environments ProjectCreateEnvironmentInputArrayOutput `pulumi:"environments"`
	// The name of the project
	Name  pulumi.StringOutput `pulumi:"name"`
	Owner OwnerOutput         `pulumi:"owner"`
	// The ID of the owner that the project belongs to
	OwnerId   pulumi.StringOutput `pulumi:"ownerId"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environments == nil {
		return nil, errors.New("invalid value for required argument 'Environments'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("render:projects:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("render:projects:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
}

type ProjectState struct {
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// The environments to create when creating the project
	Environments []ProjectCreateEnvironmentInput `pulumi:"environments"`
	// The name of the project
	Name *string `pulumi:"name"`
	// The ID of the owner that the project belongs to
	OwnerId string `pulumi:"ownerId"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// The environments to create when creating the project
	Environments ProjectCreateEnvironmentInputArrayInput
	// The name of the project
	Name pulumi.StringPtrInput
	// The ID of the owner that the project belongs to
	OwnerId pulumi.StringInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The environments associated with the project
func (o ProjectOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Project) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The environments to create when creating the project
func (o ProjectOutput) Environments() ProjectCreateEnvironmentInputArrayOutput {
	return o.ApplyT(func(v *Project) ProjectCreateEnvironmentInputArrayOutput { return v.Environments }).(ProjectCreateEnvironmentInputArrayOutput)
}

// The name of the project
func (o ProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProjectOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v *Project) OwnerOutput { return v.Owner }).(OwnerOutput)
}

// The ID of the owner that the project belongs to
func (o ProjectOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ProjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterOutputType(ProjectOutput{})
}
