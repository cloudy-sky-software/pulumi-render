// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class ListSecretFilesForService
    {
        public static Task<ListSecretFilesForServiceResult> InvokeAsync(ListSecretFilesForServiceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListSecretFilesForServiceResult>("render:services:listSecretFilesForService", args ?? new ListSecretFilesForServiceArgs(), options.WithDefaults());

        public static Output<ListSecretFilesForServiceResult> Invoke(ListSecretFilesForServiceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListSecretFilesForServiceResult>("render:services:listSecretFilesForService", args ?? new ListSecretFilesForServiceInvokeArgs(), options.WithDefaults());

        public static Output<ListSecretFilesForServiceResult> Invoke(ListSecretFilesForServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<ListSecretFilesForServiceResult>("render:services:listSecretFilesForService", args ?? new ListSecretFilesForServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class ListSecretFilesForServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public ListSecretFilesForServiceArgs()
        {
        }
        public static new ListSecretFilesForServiceArgs Empty => new ListSecretFilesForServiceArgs();
    }

    public sealed class ListSecretFilesForServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ListSecretFilesForServiceInvokeArgs()
        {
        }
        public static new ListSecretFilesForServiceInvokeArgs Empty => new ListSecretFilesForServiceInvokeArgs();
    }


    [OutputType]
    public sealed class ListSecretFilesForServiceResult
    {
        public readonly ImmutableArray<Outputs.SecretFileWithCursor> Items;

        [OutputConstructor]
        private ListSecretFilesForServiceResult(ImmutableArray<Outputs.SecretFileWithCursor> items)
        {
            Items = items;
        }
    }
}
