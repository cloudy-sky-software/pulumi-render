// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";

import * as utilities from "../utilities";

export namespace owners {
}

export namespace services {
    export interface CronJobServiceDetailsArgs {
        env: pulumi.Input<enums.services.CronJobServiceDetailsEnv>;
        envSpecificDetails?: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        plan?: pulumi.Input<enums.services.CronJobServiceDetailsPlan>;
        region?: pulumi.Input<enums.services.CronJobServiceDetailsRegion>;
        schedule: pulumi.Input<string>;
    }
    /**
     * cronJobServiceDetailsArgsProvideDefaults sets the appropriate defaults for CronJobServiceDetailsArgs
     */
    export function cronJobServiceDetailsArgsProvideDefaults(val: CronJobServiceDetailsArgs): CronJobServiceDetailsArgs {
        return {
            ...val,
            plan: (val.plan) ?? "starter",
            region: (val.region) ?? "oregon",
        };
    }

    export interface DiskArgs {
        mountPath: pulumi.Input<string>;
        name: pulumi.Input<string>;
        sizeGB?: pulumi.Input<number>;
    }
    /**
     * diskArgsProvideDefaults sets the appropriate defaults for DiskArgs
     */
    export function diskArgsProvideDefaults(val: DiskArgs): DiskArgs {
        return {
            ...val,
            sizeGB: (val.sizeGB) ?? 1,
        };
    }

    export interface DockerDetailsArgs {
        dockerCommand?: pulumi.Input<string>;
        dockerContext?: pulumi.Input<string>;
        dockerfilePath?: pulumi.Input<string>;
    }
    /**
     * dockerDetailsArgsProvideDefaults sets the appropriate defaults for DockerDetailsArgs
     */
    export function dockerDetailsArgsProvideDefaults(val: DockerDetailsArgs): DockerDetailsArgs {
        return {
            ...val,
            dockerfilePath: (val.dockerfilePath) ?? "./Dockerfile",
        };
    }

    export interface NativeEnvironmentDetailsArgs {
        buildCommand: pulumi.Input<string>;
        startCommand: pulumi.Input<string>;
    }

    export interface ServerPropertiesArgs {
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
    }

    export interface ServiceDetailsArgs {
        disk?: pulumi.Input<inputs.services.DiskArgs>;
        env: pulumi.Input<enums.services.ServiceDetailsEnv>;
        envSpecificDetails?: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        numInstances?: pulumi.Input<number>;
        plan?: pulumi.Input<enums.services.ServiceDetailsPlan>;
        pullRequestPreviewsEnabled?: pulumi.Input<enums.services.ServiceDetailsPullRequestPreviewsEnabled>;
        region?: pulumi.Input<enums.services.ServiceDetailsRegion>;
    }
    /**
     * serviceDetailsArgsProvideDefaults sets the appropriate defaults for ServiceDetailsArgs
     */
    export function serviceDetailsArgsProvideDefaults(val: ServiceDetailsArgs): ServiceDetailsArgs {
        return {
            ...val,
            disk: (val.disk ? pulumi.output(val.disk).apply(inputs.services.diskArgsProvideDefaults) : undefined),
            numInstances: (val.numInstances) ?? 1,
            plan: (val.plan) ?? "starter",
            pullRequestPreviewsEnabled: (val.pullRequestPreviewsEnabled) ?? "no",
            region: (val.region) ?? "oregon",
        };
    }

    /**
     * A service header object
     */
    export interface ServiceHeaderArgs {
        name: pulumi.Input<string>;
        path: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    /**
     * A route object for a static site
     */
    export interface StaticSiteRouteArgs {
        destination: pulumi.Input<string>;
        source: pulumi.Input<string>;
        type: pulumi.Input<enums.services.StaticSiteRouteType>;
    }

    export interface StaticSiteServiceDetailsArgs {
        buildCommand?: pulumi.Input<string>;
        headers?: pulumi.Input<pulumi.Input<inputs.services.ServiceHeaderArgs>[]>;
        parentServer?: pulumi.Input<inputs.services.StaticSiteServiceDetailsParentServerPropertiesArgs>;
        publishPath?: pulumi.Input<string>;
        pullRequestPreviewsEnabled?: pulumi.Input<enums.services.StaticSiteServiceDetailsPullRequestPreviewsEnabled>;
        routes?: pulumi.Input<pulumi.Input<inputs.services.StaticSiteRouteArgs>[]>;
        /**
         * The HTTPS service URL. A subdomain of onrender.com, by default.
         */
        url?: pulumi.Input<string>;
    }
    /**
     * staticSiteServiceDetailsArgsProvideDefaults sets the appropriate defaults for StaticSiteServiceDetailsArgs
     */
    export function staticSiteServiceDetailsArgsProvideDefaults(val: StaticSiteServiceDetailsArgs): StaticSiteServiceDetailsArgs {
        return {
            ...val,
            publishPath: (val.publishPath) ?? "public",
            pullRequestPreviewsEnabled: (val.pullRequestPreviewsEnabled) ?? "no",
        };
    }

    export interface StaticSiteServiceDetailsParentServerPropertiesArgs {
        id?: pulumi.Input<string>;
        name?: pulumi.Input<string>;
    }

    export interface WebServiceServiceDetailsArgs {
        disk?: pulumi.Input<inputs.services.DiskArgs>;
        env: pulumi.Input<enums.services.WebServiceServiceDetailsEnv>;
        envSpecificDetails?: pulumi.Input<inputs.services.DockerDetailsArgs | inputs.services.NativeEnvironmentDetailsArgs>;
        healthCheckPath?: pulumi.Input<string>;
        numInstances?: pulumi.Input<number>;
        plan?: pulumi.Input<enums.services.WebServiceServiceDetailsPlan>;
        pullRequestPreviewsEnabled?: pulumi.Input<enums.services.WebServiceServiceDetailsPullRequestPreviewsEnabled>;
        region?: pulumi.Input<enums.services.WebServiceServiceDetailsRegion>;
    }
    /**
     * webServiceServiceDetailsArgsProvideDefaults sets the appropriate defaults for WebServiceServiceDetailsArgs
     */
    export function webServiceServiceDetailsArgsProvideDefaults(val: WebServiceServiceDetailsArgs): WebServiceServiceDetailsArgs {
        return {
            ...val,
            disk: (val.disk ? pulumi.output(val.disk).apply(inputs.services.diskArgsProvideDefaults) : undefined),
            numInstances: (val.numInstances) ?? 1,
            plan: (val.plan) ?? "starter",
            pullRequestPreviewsEnabled: (val.pullRequestPreviewsEnabled) ?? "no",
            region: (val.region) ?? "oregon",
        };
    }
}
