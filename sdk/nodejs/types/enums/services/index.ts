// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***


export const BackgroundWorkerDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type BackgroundWorkerDetailsCreateEnv = (typeof BackgroundWorkerDetailsCreateEnv)[keyof typeof BackgroundWorkerDetailsCreateEnv];

export const BackgroundWorkerDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

/**
 * Defaults to "starter"
 */
export type BackgroundWorkerDetailsCreatePlan = (typeof BackgroundWorkerDetailsCreatePlan)[keyof typeof BackgroundWorkerDetailsCreatePlan];

export const BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled = (typeof BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled)[keyof typeof BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled];

export const BackgroundWorkerDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type BackgroundWorkerDetailsCreateRegion = (typeof BackgroundWorkerDetailsCreateRegion)[keyof typeof BackgroundWorkerDetailsCreateRegion];

export const BackgroundWorkerDetailsCreateRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type BackgroundWorkerDetailsCreateRuntime = (typeof BackgroundWorkerDetailsCreateRuntime)[keyof typeof BackgroundWorkerDetailsCreateRuntime];

export const BackgroundWorkerDetailsOutputBuildPlan = {
    Starter: "starter",
    Performance: "performance",
} as const;

export type BackgroundWorkerDetailsOutputBuildPlan = (typeof BackgroundWorkerDetailsOutputBuildPlan)[keyof typeof BackgroundWorkerDetailsOutputBuildPlan];

export const BackgroundWorkerDetailsOutputEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type BackgroundWorkerDetailsOutputEnv = (typeof BackgroundWorkerDetailsOutputEnv)[keyof typeof BackgroundWorkerDetailsOutputEnv];

export const BackgroundWorkerDetailsOutputPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type BackgroundWorkerDetailsOutputPlan = (typeof BackgroundWorkerDetailsOutputPlan)[keyof typeof BackgroundWorkerDetailsOutputPlan];

export const BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled = (typeof BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled)[keyof typeof BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled];

export const BackgroundWorkerDetailsOutputRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type BackgroundWorkerDetailsOutputRegion = (typeof BackgroundWorkerDetailsOutputRegion)[keyof typeof BackgroundWorkerDetailsOutputRegion];

export const BackgroundWorkerDetailsOutputRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type BackgroundWorkerDetailsOutputRuntime = (typeof BackgroundWorkerDetailsOutputRuntime)[keyof typeof BackgroundWorkerDetailsOutputRuntime];

export const CancelJobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Canceled: "canceled",
} as const;

export type CancelJobStatus = (typeof CancelJobStatus)[keyof typeof CancelJobStatus];

export const ClearCache = {
    Clear: "clear",
    DoNotClear: "do_not_clear",
} as const;

/**
 * If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.
 */
export type ClearCache = (typeof ClearCache)[keyof typeof ClearCache];

export const CronJobDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type CronJobDetailsCreateEnv = (typeof CronJobDetailsCreateEnv)[keyof typeof CronJobDetailsCreateEnv];

export const CronJobDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

/**
 * Defaults to "starter"
 */
export type CronJobDetailsCreatePlan = (typeof CronJobDetailsCreatePlan)[keyof typeof CronJobDetailsCreatePlan];

export const CronJobDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type CronJobDetailsCreateRegion = (typeof CronJobDetailsCreateRegion)[keyof typeof CronJobDetailsCreateRegion];

export const CronJobDetailsCreateRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type CronJobDetailsCreateRuntime = (typeof CronJobDetailsCreateRuntime)[keyof typeof CronJobDetailsCreateRuntime];

export const CronJobDetailsOutputBuildPlan = {
    Starter: "starter",
    Performance: "performance",
} as const;

export type CronJobDetailsOutputBuildPlan = (typeof CronJobDetailsOutputBuildPlan)[keyof typeof CronJobDetailsOutputBuildPlan];

export const CronJobDetailsOutputEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type CronJobDetailsOutputEnv = (typeof CronJobDetailsOutputEnv)[keyof typeof CronJobDetailsOutputEnv];

export const CronJobDetailsOutputPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type CronJobDetailsOutputPlan = (typeof CronJobDetailsOutputPlan)[keyof typeof CronJobDetailsOutputPlan];

export const CronJobDetailsOutputRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type CronJobDetailsOutputRegion = (typeof CronJobDetailsOutputRegion)[keyof typeof CronJobDetailsOutputRegion];

export const CronJobDetailsOutputRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type CronJobDetailsOutputRuntime = (typeof CronJobDetailsOutputRuntime)[keyof typeof CronJobDetailsOutputRuntime];

export const CustomDomainDomainType = {
    Apex: "apex",
    Subdomain: "subdomain",
} as const;

export type CustomDomainDomainType = (typeof CustomDomainDomainType)[keyof typeof CustomDomainDomainType];

export const CustomDomainVerificationStatus = {
    Verified: "verified",
    Unverified: "unverified",
} as const;

export type CustomDomainVerificationStatus = (typeof CustomDomainVerificationStatus)[keyof typeof CustomDomainVerificationStatus];

export const DeployStatus = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type DeployStatus = (typeof DeployStatus)[keyof typeof DeployStatus];

export const DeployTrigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type DeployTrigger = (typeof DeployTrigger)[keyof typeof DeployTrigger];

export const JobStatus = {
    Succeeded: "succeeded",
    Failed: "failed",
    Canceled: "canceled",
} as const;

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];

export const Plan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type Plan = (typeof Plan)[keyof typeof Plan];

export const PreviewsGeneration = {
    Off: "off",
    Manual: "manual",
    Automatic: "automatic",
} as const;

/**
 * Defaults to "off"
 */
export type PreviewsGeneration = (typeof PreviewsGeneration)[keyof typeof PreviewsGeneration];

export const PrivateServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type PrivateServiceDetailsCreateEnv = (typeof PrivateServiceDetailsCreateEnv)[keyof typeof PrivateServiceDetailsCreateEnv];

export const PrivateServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

/**
 * Defaults to "starter"
 */
export type PrivateServiceDetailsCreatePlan = (typeof PrivateServiceDetailsCreatePlan)[keyof typeof PrivateServiceDetailsCreatePlan];

export const PrivateServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type PrivateServiceDetailsCreatePullRequestPreviewsEnabled = (typeof PrivateServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof PrivateServiceDetailsCreatePullRequestPreviewsEnabled];

export const PrivateServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type PrivateServiceDetailsCreateRegion = (typeof PrivateServiceDetailsCreateRegion)[keyof typeof PrivateServiceDetailsCreateRegion];

export const PrivateServiceDetailsCreateRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type PrivateServiceDetailsCreateRuntime = (typeof PrivateServiceDetailsCreateRuntime)[keyof typeof PrivateServiceDetailsCreateRuntime];

export const PrivateServiceDetailsOutputBuildPlan = {
    Starter: "starter",
    Performance: "performance",
} as const;

export type PrivateServiceDetailsOutputBuildPlan = (typeof PrivateServiceDetailsOutputBuildPlan)[keyof typeof PrivateServiceDetailsOutputBuildPlan];

export const PrivateServiceDetailsOutputEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type PrivateServiceDetailsOutputEnv = (typeof PrivateServiceDetailsOutputEnv)[keyof typeof PrivateServiceDetailsOutputEnv];

export const PrivateServiceDetailsOutputPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type PrivateServiceDetailsOutputPlan = (typeof PrivateServiceDetailsOutputPlan)[keyof typeof PrivateServiceDetailsOutputPlan];

export const PrivateServiceDetailsOutputPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type PrivateServiceDetailsOutputPullRequestPreviewsEnabled = (typeof PrivateServiceDetailsOutputPullRequestPreviewsEnabled)[keyof typeof PrivateServiceDetailsOutputPullRequestPreviewsEnabled];

export const PrivateServiceDetailsOutputRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type PrivateServiceDetailsOutputRegion = (typeof PrivateServiceDetailsOutputRegion)[keyof typeof PrivateServiceDetailsOutputRegion];

export const PrivateServiceDetailsOutputRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type PrivateServiceDetailsOutputRuntime = (typeof PrivateServiceDetailsOutputRuntime)[keyof typeof PrivateServiceDetailsOutputRuntime];

export const RegistryCredentialRegistry = {
    Github: "GITHUB",
    Gitlab: "GITLAB",
    Docker: "DOCKER",
    GoogleArtifact: "GOOGLE_ARTIFACT",
    AwsEcr: "AWS_ECR",
} as const;

/**
 * The registry to use this credential with
 */
export type RegistryCredentialRegistry = (typeof RegistryCredentialRegistry)[keyof typeof RegistryCredentialRegistry];

export const RouteCreateType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;

export type RouteCreateType = (typeof RouteCreateType)[keyof typeof RouteCreateType];

export const RouteType = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;

export type RouteType = (typeof RouteType)[keyof typeof RouteType];

export const ServerPortProtocol = {
    Tcp: "TCP",
    Udp: "UDP",
} as const;

export type ServerPortProtocol = (typeof ServerPortProtocol)[keyof typeof ServerPortProtocol];

export const ServiceAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type ServiceAutoDeploy = (typeof ServiceAutoDeploy)[keyof typeof ServiceAutoDeploy];

export const ServiceCreateAutoDeploy = {
    Yes: "yes",
    No: "no",
} as const;

export type ServiceCreateAutoDeploy = (typeof ServiceCreateAutoDeploy)[keyof typeof ServiceCreateAutoDeploy];

export const ServiceNotifyOnFail = {
    Default: "default",
    Notify: "notify",
    Ignore: "ignore",
} as const;

export type ServiceNotifyOnFail = (typeof ServiceNotifyOnFail)[keyof typeof ServiceNotifyOnFail];

export const ServiceSuspended = {
    Suspended: "suspended",
    NotSuspended: "not_suspended",
} as const;

export type ServiceSuspended = (typeof ServiceSuspended)[keyof typeof ServiceSuspended];

export const ServiceSuspendersItem = {
    Admin: "admin",
    Billing: "billing",
    User: "user",
    ParentService: "parent_service",
    Unknown: "unknown",
} as const;

export type ServiceSuspendersItem = (typeof ServiceSuspendersItem)[keyof typeof ServiceSuspendersItem];

export const StaticSiteDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type StaticSiteDetailsCreatePullRequestPreviewsEnabled = (typeof StaticSiteDetailsCreatePullRequestPreviewsEnabled)[keyof typeof StaticSiteDetailsCreatePullRequestPreviewsEnabled];

export const StaticSiteDetailsOutputBuildPlan = {
    Starter: "starter",
    Performance: "performance",
} as const;

export type StaticSiteDetailsOutputBuildPlan = (typeof StaticSiteDetailsOutputBuildPlan)[keyof typeof StaticSiteDetailsOutputBuildPlan];

export const StaticSiteDetailsOutputPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type StaticSiteDetailsOutputPullRequestPreviewsEnabled = (typeof StaticSiteDetailsOutputPullRequestPreviewsEnabled)[keyof typeof StaticSiteDetailsOutputPullRequestPreviewsEnabled];

export const Status = {
    Created: "created",
    BuildInProgress: "build_in_progress",
    UpdateInProgress: "update_in_progress",
    Live: "live",
    Deactivated: "deactivated",
    BuildFailed: "build_failed",
    UpdateFailed: "update_failed",
    Canceled: "canceled",
    PreDeployInProgress: "pre_deploy_in_progress",
    PreDeployFailed: "pre_deploy_failed",
} as const;

export type Status = (typeof Status)[keyof typeof Status];

export const Trigger = {
    Api: "api",
    BlueprintSync: "blueprint_sync",
    DeployHook: "deploy_hook",
    DeployedByRender: "deployed_by_render",
    Manual: "manual",
    Other: "other",
    NewCommit: "new_commit",
    Rollback: "rollback",
    ServiceResumed: "service_resumed",
    ServiceUpdated: "service_updated",
} as const;

export type Trigger = (typeof Trigger)[keyof typeof Trigger];

export const Type = {
    Redirect: "redirect",
    Rewrite: "rewrite",
} as const;

export type Type = (typeof Type)[keyof typeof Type];

export const WebServiceDetailsCreateEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type WebServiceDetailsCreateEnv = (typeof WebServiceDetailsCreateEnv)[keyof typeof WebServiceDetailsCreateEnv];

export const WebServiceDetailsCreatePlan = {
    Starter: "starter",
    Standard: "standard",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
} as const;

/**
 * Defaults to "starter"
 */
export type WebServiceDetailsCreatePlan = (typeof WebServiceDetailsCreatePlan)[keyof typeof WebServiceDetailsCreatePlan];

export const WebServiceDetailsCreatePullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type WebServiceDetailsCreatePullRequestPreviewsEnabled = (typeof WebServiceDetailsCreatePullRequestPreviewsEnabled)[keyof typeof WebServiceDetailsCreatePullRequestPreviewsEnabled];

export const WebServiceDetailsCreateRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type WebServiceDetailsCreateRegion = (typeof WebServiceDetailsCreateRegion)[keyof typeof WebServiceDetailsCreateRegion];

export const WebServiceDetailsCreateRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type WebServiceDetailsCreateRuntime = (typeof WebServiceDetailsCreateRuntime)[keyof typeof WebServiceDetailsCreateRuntime];

export const WebServiceDetailsOutputBuildPlan = {
    Starter: "starter",
    Performance: "performance",
} as const;

export type WebServiceDetailsOutputBuildPlan = (typeof WebServiceDetailsOutputBuildPlan)[keyof typeof WebServiceDetailsOutputBuildPlan];

export const WebServiceDetailsOutputEnv = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * This field has been deprecated, runtime should be used in its place.
 */
export type WebServiceDetailsOutputEnv = (typeof WebServiceDetailsOutputEnv)[keyof typeof WebServiceDetailsOutputEnv];

export const WebServiceDetailsOutputPlan = {
    Starter: "starter",
    StarterPlus: "starter_plus",
    Standard: "standard",
    StandardPlus: "standard_plus",
    Pro: "pro",
    ProPlus: "pro_plus",
    ProMax: "pro_max",
    ProUltra: "pro_ultra",
    Free: "free",
    Custom: "custom",
} as const;

/**
 * The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
 */
export type WebServiceDetailsOutputPlan = (typeof WebServiceDetailsOutputPlan)[keyof typeof WebServiceDetailsOutputPlan];

export const WebServiceDetailsOutputPullRequestPreviewsEnabled = {
    Yes: "yes",
    No: "no",
} as const;

/**
 * This field has been deprecated. previews.generation should be used in its place.
 */
export type WebServiceDetailsOutputPullRequestPreviewsEnabled = (typeof WebServiceDetailsOutputPullRequestPreviewsEnabled)[keyof typeof WebServiceDetailsOutputPullRequestPreviewsEnabled];

export const WebServiceDetailsOutputRegion = {
    Frankfurt: "frankfurt",
    Oregon: "oregon",
    Ohio: "ohio",
    Singapore: "singapore",
    Virginia: "virginia",
} as const;

/**
 * Defaults to "oregon"
 */
export type WebServiceDetailsOutputRegion = (typeof WebServiceDetailsOutputRegion)[keyof typeof WebServiceDetailsOutputRegion];

export const WebServiceDetailsOutputRuntime = {
    Docker: "docker",
    Elixir: "elixir",
    Go: "go",
    Node: "node",
    Python: "python",
    Ruby: "ruby",
    Rust: "rust",
    Image: "image",
} as const;

/**
 * Runtime
 */
export type WebServiceDetailsOutputRuntime = (typeof WebServiceDetailsOutputRuntime)[keyof typeof WebServiceDetailsOutputRuntime];
