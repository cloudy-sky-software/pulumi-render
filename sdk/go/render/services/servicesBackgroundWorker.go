// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A background worker service
type ServicesBackgroundWorker struct {
	pulumi.CustomResourceState

	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrOutput `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrOutput    `pulumi:"branch"`
	CreatedAt pulumi.StringPtrOutput    `pulumi:"createdAt"`
	EnvVars   EnvVarKeyValueArrayOutput `pulumi:"envVars"`
	Name      pulumi.StringPtrOutput    `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrOutput `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId pulumi.StringPtrOutput `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringPtrOutput                  `pulumi:"repo"`
	SecretFiles    SecretFileArrayOutput                   `pulumi:"secretFiles"`
	ServiceDetails BackgroundWorkerServiceDetailsPtrOutput `pulumi:"serviceDetails"`
	Slug           pulumi.StringPtrOutput                  `pulumi:"slug"`
	Suspended      ServiceSuspendedPtrOutput               `pulumi:"suspended"`
	Suspenders     pulumi.StringArrayOutput                `pulumi:"suspenders"`
	Type           pulumi.StringPtrOutput                  `pulumi:"type"`
	UpdatedAt      pulumi.StringPtrOutput                  `pulumi:"updatedAt"`
}

// NewServicesBackgroundWorker registers a new resource with the given unique name, arguments, and options.
func NewServicesBackgroundWorker(ctx *pulumi.Context,
	name string, args *ServicesBackgroundWorkerArgs, opts ...pulumi.ResourceOption) (*ServicesBackgroundWorker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Repo == nil {
		return nil, errors.New("invalid value for required argument 'Repo'")
	}
	if args.AutoDeploy == nil {
		args.AutoDeploy = ServiceAutoDeploy("no")
	}
	if args.ServiceDetails != nil {
		args.ServiceDetails = args.ServiceDetails.ToBackgroundWorkerServiceDetailsPtrOutput().ApplyT(func(v *BackgroundWorkerServiceDetails) *BackgroundWorkerServiceDetails { return v.Defaults() }).(BackgroundWorkerServiceDetailsPtrOutput)
	}
	if args.Type == nil {
		args.Type = pulumi.StringPtr("background_worker")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServicesBackgroundWorker
	err := ctx.RegisterResource("render:services:ServicesBackgroundWorker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicesBackgroundWorker gets an existing ServicesBackgroundWorker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicesBackgroundWorker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServicesBackgroundWorkerState, opts ...pulumi.ResourceOption) (*ServicesBackgroundWorker, error) {
	var resource ServicesBackgroundWorker
	err := ctx.ReadResource("render:services:ServicesBackgroundWorker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServicesBackgroundWorker resources.
type servicesBackgroundWorkerState struct {
}

type ServicesBackgroundWorkerState struct {
}

func (ServicesBackgroundWorkerState) ElementType() reflect.Type {
	return reflect.TypeOf((*servicesBackgroundWorkerState)(nil)).Elem()
}

type servicesBackgroundWorkerArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository.
	Branch    *string          `pulumi:"branch"`
	CreatedAt *string          `pulumi:"createdAt"`
	EnvVars   []EnvVarKeyValue `pulumi:"envVars"`
	Name      string           `pulumi:"name"`
	// The notification setting for this service upon deployment failure.
	NotifyOnFail *ServiceNotifyOnFail `pulumi:"notifyOnFail"`
	// The id of the owner (user/team).
	OwnerId string `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           string                          `pulumi:"repo"`
	SecretFiles    []SecretFile                    `pulumi:"secretFiles"`
	ServiceDetails *BackgroundWorkerServiceDetails `pulumi:"serviceDetails"`
	Slug           *string                         `pulumi:"slug"`
	Suspended      *ServiceSuspended               `pulumi:"suspended"`
	Suspenders     []string                        `pulumi:"suspenders"`
	Type           *string                         `pulumi:"type"`
	UpdatedAt      *string                         `pulumi:"updatedAt"`
}

// The set of arguments for constructing a ServicesBackgroundWorker resource.
type ServicesBackgroundWorkerArgs struct {
	// Whether to auto deploy the service or not upon git push.
	AutoDeploy ServiceAutoDeployPtrInput
	// If left empty, this will fall back to the default branch of the repository.
	Branch    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	EnvVars   EnvVarKeyValueArrayInput
	Name      pulumi.StringInput
	// The notification setting for this service upon deployment failure.
	NotifyOnFail ServiceNotifyOnFailPtrInput
	// The id of the owner (user/team).
	OwnerId pulumi.StringInput
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringInput
	SecretFiles    SecretFileArrayInput
	ServiceDetails BackgroundWorkerServiceDetailsPtrInput
	Slug           pulumi.StringPtrInput
	Suspended      ServiceSuspendedPtrInput
	Suspenders     pulumi.StringArrayInput
	Type           pulumi.StringPtrInput
	UpdatedAt      pulumi.StringPtrInput
}

func (ServicesBackgroundWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servicesBackgroundWorkerArgs)(nil)).Elem()
}

type ServicesBackgroundWorkerInput interface {
	pulumi.Input

	ToServicesBackgroundWorkerOutput() ServicesBackgroundWorkerOutput
	ToServicesBackgroundWorkerOutputWithContext(ctx context.Context) ServicesBackgroundWorkerOutput
}

func (*ServicesBackgroundWorker) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicesBackgroundWorker)(nil)).Elem()
}

func (i *ServicesBackgroundWorker) ToServicesBackgroundWorkerOutput() ServicesBackgroundWorkerOutput {
	return i.ToServicesBackgroundWorkerOutputWithContext(context.Background())
}

func (i *ServicesBackgroundWorker) ToServicesBackgroundWorkerOutputWithContext(ctx context.Context) ServicesBackgroundWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicesBackgroundWorkerOutput)
}

type ServicesBackgroundWorkerOutput struct{ *pulumi.OutputState }

func (ServicesBackgroundWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicesBackgroundWorker)(nil)).Elem()
}

func (o ServicesBackgroundWorkerOutput) ToServicesBackgroundWorkerOutput() ServicesBackgroundWorkerOutput {
	return o
}

func (o ServicesBackgroundWorkerOutput) ToServicesBackgroundWorkerOutputWithContext(ctx context.Context) ServicesBackgroundWorkerOutput {
	return o
}

// Whether to auto deploy the service or not upon git push.
func (o ServicesBackgroundWorkerOutput) AutoDeploy() ServiceAutoDeployPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) ServiceAutoDeployPtrOutput { return v.AutoDeploy }).(ServiceAutoDeployPtrOutput)
}

// If left empty, this will fall back to the default branch of the repository.
func (o ServicesBackgroundWorkerOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) EnvVars() EnvVarKeyValueArrayOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) EnvVarKeyValueArrayOutput { return v.EnvVars }).(EnvVarKeyValueArrayOutput)
}

func (o ServicesBackgroundWorkerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The notification setting for this service upon deployment failure.
func (o ServicesBackgroundWorkerOutput) NotifyOnFail() ServiceNotifyOnFailPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) ServiceNotifyOnFailPtrOutput { return v.NotifyOnFail }).(ServiceNotifyOnFailPtrOutput)
}

// The id of the owner (user/team).
func (o ServicesBackgroundWorkerOutput) OwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.OwnerId }).(pulumi.StringPtrOutput)
}

// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
func (o ServicesBackgroundWorkerOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.Repo }).(pulumi.StringPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) SecretFiles() SecretFileArrayOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) SecretFileArrayOutput { return v.SecretFiles }).(SecretFileArrayOutput)
}

func (o ServicesBackgroundWorkerOutput) ServiceDetails() BackgroundWorkerServiceDetailsPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) BackgroundWorkerServiceDetailsPtrOutput { return v.ServiceDetails }).(BackgroundWorkerServiceDetailsPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.Slug }).(pulumi.StringPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) Suspended() ServiceSuspendedPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) ServiceSuspendedPtrOutput { return v.Suspended }).(ServiceSuspendedPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) Suspenders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringArrayOutput { return v.Suspenders }).(pulumi.StringArrayOutput)
}

func (o ServicesBackgroundWorkerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ServicesBackgroundWorkerOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicesBackgroundWorker) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServicesBackgroundWorkerInput)(nil)).Elem(), &ServicesBackgroundWorker{})
	pulumi.RegisterOutputType(ServicesBackgroundWorkerOutput{})
}
