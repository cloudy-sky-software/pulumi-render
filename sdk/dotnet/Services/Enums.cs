// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Services
{
    [EnumType]
    public readonly struct BackgroundWorkerServiceDetailsEnv : IEquatable<BackgroundWorkerServiceDetailsEnv>
    {
        private readonly string _value;

        private BackgroundWorkerServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerServiceDetailsEnv Docker { get; } = new BackgroundWorkerServiceDetailsEnv("docker");
        public static BackgroundWorkerServiceDetailsEnv Elixir { get; } = new BackgroundWorkerServiceDetailsEnv("elixir");
        public static BackgroundWorkerServiceDetailsEnv Go { get; } = new BackgroundWorkerServiceDetailsEnv("go");
        public static BackgroundWorkerServiceDetailsEnv Node { get; } = new BackgroundWorkerServiceDetailsEnv("node");
        public static BackgroundWorkerServiceDetailsEnv Python { get; } = new BackgroundWorkerServiceDetailsEnv("python");
        public static BackgroundWorkerServiceDetailsEnv Ruby { get; } = new BackgroundWorkerServiceDetailsEnv("ruby");
        public static BackgroundWorkerServiceDetailsEnv Rust { get; } = new BackgroundWorkerServiceDetailsEnv("rust");

        public static bool operator ==(BackgroundWorkerServiceDetailsEnv left, BackgroundWorkerServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerServiceDetailsEnv left, BackgroundWorkerServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerServiceDetailsEnv other && Equals(other);
        public bool Equals(BackgroundWorkerServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerServiceDetailsPlan : IEquatable<BackgroundWorkerServiceDetailsPlan>
    {
        private readonly string _value;

        private BackgroundWorkerServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerServiceDetailsPlan Starter { get; } = new BackgroundWorkerServiceDetailsPlan("starter");
        public static BackgroundWorkerServiceDetailsPlan StarterPlus { get; } = new BackgroundWorkerServiceDetailsPlan("starter_plus");
        public static BackgroundWorkerServiceDetailsPlan Standard { get; } = new BackgroundWorkerServiceDetailsPlan("standard");
        public static BackgroundWorkerServiceDetailsPlan StandardPlus { get; } = new BackgroundWorkerServiceDetailsPlan("standard_plus");
        public static BackgroundWorkerServiceDetailsPlan Pro { get; } = new BackgroundWorkerServiceDetailsPlan("pro");
        public static BackgroundWorkerServiceDetailsPlan ProPlus { get; } = new BackgroundWorkerServiceDetailsPlan("pro_plus");
        public static BackgroundWorkerServiceDetailsPlan ProMax { get; } = new BackgroundWorkerServiceDetailsPlan("pro_max");
        public static BackgroundWorkerServiceDetailsPlan ProUltra { get; } = new BackgroundWorkerServiceDetailsPlan("pro_ultra");

        public static bool operator ==(BackgroundWorkerServiceDetailsPlan left, BackgroundWorkerServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerServiceDetailsPlan left, BackgroundWorkerServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerServiceDetailsPlan other && Equals(other);
        public bool Equals(BackgroundWorkerServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled : IEquatable<BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled No { get; } = new BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled left, BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled left, BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerServiceDetailsRegion : IEquatable<BackgroundWorkerServiceDetailsRegion>
    {
        private readonly string _value;

        private BackgroundWorkerServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerServiceDetailsRegion Oregon { get; } = new BackgroundWorkerServiceDetailsRegion("oregon");
        public static BackgroundWorkerServiceDetailsRegion Frankfurt { get; } = new BackgroundWorkerServiceDetailsRegion("frankfurt");

        public static bool operator ==(BackgroundWorkerServiceDetailsRegion left, BackgroundWorkerServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerServiceDetailsRegion left, BackgroundWorkerServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerServiceDetailsRegion other && Equals(other);
        public bool Equals(BackgroundWorkerServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ClearCache : IEquatable<ClearCache>
    {
        private readonly string _value;

        private ClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ClearCache DoNotClear { get; } = new ClearCache("do_not_clear");
        public static ClearCache Clear { get; } = new ClearCache("clear");

        public static bool operator ==(ClearCache left, ClearCache right) => left.Equals(right);
        public static bool operator !=(ClearCache left, ClearCache right) => !left.Equals(right);

        public static explicit operator string(ClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ClearCache other && Equals(other);
        public bool Equals(ClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobServiceDetailsEnv : IEquatable<CronJobServiceDetailsEnv>
    {
        private readonly string _value;

        private CronJobServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobServiceDetailsEnv Docker { get; } = new CronJobServiceDetailsEnv("docker");
        public static CronJobServiceDetailsEnv Elixir { get; } = new CronJobServiceDetailsEnv("elixir");
        public static CronJobServiceDetailsEnv Go { get; } = new CronJobServiceDetailsEnv("go");
        public static CronJobServiceDetailsEnv Node { get; } = new CronJobServiceDetailsEnv("node");
        public static CronJobServiceDetailsEnv Python { get; } = new CronJobServiceDetailsEnv("python");
        public static CronJobServiceDetailsEnv Ruby { get; } = new CronJobServiceDetailsEnv("ruby");
        public static CronJobServiceDetailsEnv Rust { get; } = new CronJobServiceDetailsEnv("rust");

        public static bool operator ==(CronJobServiceDetailsEnv left, CronJobServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(CronJobServiceDetailsEnv left, CronJobServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobServiceDetailsEnv other && Equals(other);
        public bool Equals(CronJobServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobServiceDetailsPlan : IEquatable<CronJobServiceDetailsPlan>
    {
        private readonly string _value;

        private CronJobServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobServiceDetailsPlan Starter { get; } = new CronJobServiceDetailsPlan("starter");
        public static CronJobServiceDetailsPlan StarterPlus { get; } = new CronJobServiceDetailsPlan("starter_plus");
        public static CronJobServiceDetailsPlan Standard { get; } = new CronJobServiceDetailsPlan("standard");
        public static CronJobServiceDetailsPlan StandardPlus { get; } = new CronJobServiceDetailsPlan("standard_plus");
        public static CronJobServiceDetailsPlan Pro { get; } = new CronJobServiceDetailsPlan("pro");
        public static CronJobServiceDetailsPlan ProPlus { get; } = new CronJobServiceDetailsPlan("pro_plus");
        public static CronJobServiceDetailsPlan ProMax { get; } = new CronJobServiceDetailsPlan("pro_max");
        public static CronJobServiceDetailsPlan ProUltra { get; } = new CronJobServiceDetailsPlan("pro_ultra");

        public static bool operator ==(CronJobServiceDetailsPlan left, CronJobServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(CronJobServiceDetailsPlan left, CronJobServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobServiceDetailsPlan other && Equals(other);
        public bool Equals(CronJobServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobServiceDetailsRegion : IEquatable<CronJobServiceDetailsRegion>
    {
        private readonly string _value;

        private CronJobServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobServiceDetailsRegion Oregon { get; } = new CronJobServiceDetailsRegion("oregon");
        public static CronJobServiceDetailsRegion Frankfurt { get; } = new CronJobServiceDetailsRegion("frankfurt");

        public static bool operator ==(CronJobServiceDetailsRegion left, CronJobServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(CronJobServiceDetailsRegion left, CronJobServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobServiceDetailsRegion other && Equals(other);
        public bool Equals(CronJobServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainDomainType : IEquatable<CustomDomainDomainType>
    {
        private readonly string _value;

        private CustomDomainDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainDomainType Apex { get; } = new CustomDomainDomainType("apex");
        public static CustomDomainDomainType Subdomain { get; } = new CustomDomainDomainType("subdomain");

        public static bool operator ==(CustomDomainDomainType left, CustomDomainDomainType right) => left.Equals(right);
        public static bool operator !=(CustomDomainDomainType left, CustomDomainDomainType right) => !left.Equals(right);

        public static explicit operator string(CustomDomainDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainDomainType other && Equals(other);
        public bool Equals(CustomDomainDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainVerificationStatus : IEquatable<CustomDomainVerificationStatus>
    {
        private readonly string _value;

        private CustomDomainVerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainVerificationStatus Verified { get; } = new CustomDomainVerificationStatus("verified");
        public static CustomDomainVerificationStatus Unverified { get; } = new CustomDomainVerificationStatus("unverified");

        public static bool operator ==(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => left.Equals(right);
        public static bool operator !=(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDomainVerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainVerificationStatus other && Equals(other);
        public bool Equals(CustomDomainVerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployClearCache : IEquatable<DeployClearCache>
    {
        private readonly string _value;

        private DeployClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployClearCache DoNotClear { get; } = new DeployClearCache("do_not_clear");
        public static DeployClearCache Clear { get; } = new DeployClearCache("clear");

        public static bool operator ==(DeployClearCache left, DeployClearCache right) => left.Equals(right);
        public static bool operator !=(DeployClearCache left, DeployClearCache right) => !left.Equals(right);

        public static explicit operator string(DeployClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployClearCache other && Equals(other);
        public bool Equals(DeployClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DomainType : IEquatable<DomainType>
    {
        private readonly string _value;

        private DomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DomainType Apex { get; } = new DomainType("apex");
        public static DomainType Subdomain { get; } = new DomainType("subdomain");

        public static bool operator ==(DomainType left, DomainType right) => left.Equals(right);
        public static bool operator !=(DomainType left, DomainType right) => !left.Equals(right);

        public static explicit operator string(DomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DomainType other && Equals(other);
        public bool Equals(DomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EnvVarKeyValueGenerateValue : IEquatable<EnvVarKeyValueGenerateValue>
    {
        private readonly string _value;

        private EnvVarKeyValueGenerateValue(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EnvVarKeyValueGenerateValue Yes { get; } = new EnvVarKeyValueGenerateValue("yes");

        public static bool operator ==(EnvVarKeyValueGenerateValue left, EnvVarKeyValueGenerateValue right) => left.Equals(right);
        public static bool operator !=(EnvVarKeyValueGenerateValue left, EnvVarKeyValueGenerateValue right) => !left.Equals(right);

        public static explicit operator string(EnvVarKeyValueGenerateValue value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EnvVarKeyValueGenerateValue other && Equals(other);
        public bool Equals(EnvVarKeyValueGenerateValue other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OpenPortsProtocol : IEquatable<OpenPortsProtocol>
    {
        private readonly string _value;

        private OpenPortsProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OpenPortsProtocol Tcp { get; } = new OpenPortsProtocol("TCP");
        public static OpenPortsProtocol Udp { get; } = new OpenPortsProtocol("UDP");

        public static bool operator ==(OpenPortsProtocol left, OpenPortsProtocol right) => left.Equals(right);
        public static bool operator !=(OpenPortsProtocol left, OpenPortsProtocol right) => !left.Equals(right);

        public static explicit operator string(OpenPortsProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OpenPortsProtocol other && Equals(other);
        public bool Equals(OpenPortsProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsEnv : IEquatable<PrivateServiceDetailsEnv>
    {
        private readonly string _value;

        private PrivateServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsEnv Docker { get; } = new PrivateServiceDetailsEnv("docker");
        public static PrivateServiceDetailsEnv Elixir { get; } = new PrivateServiceDetailsEnv("elixir");
        public static PrivateServiceDetailsEnv Go { get; } = new PrivateServiceDetailsEnv("go");
        public static PrivateServiceDetailsEnv Node { get; } = new PrivateServiceDetailsEnv("node");
        public static PrivateServiceDetailsEnv Python { get; } = new PrivateServiceDetailsEnv("python");
        public static PrivateServiceDetailsEnv Ruby { get; } = new PrivateServiceDetailsEnv("ruby");
        public static PrivateServiceDetailsEnv Rust { get; } = new PrivateServiceDetailsEnv("rust");

        public static bool operator ==(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsEnv other && Equals(other);
        public bool Equals(PrivateServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsPlan : IEquatable<PrivateServiceDetailsPlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPlan Starter { get; } = new PrivateServiceDetailsPlan("starter");
        public static PrivateServiceDetailsPlan StarterPlus { get; } = new PrivateServiceDetailsPlan("starter_plus");
        public static PrivateServiceDetailsPlan Standard { get; } = new PrivateServiceDetailsPlan("standard");
        public static PrivateServiceDetailsPlan StandardPlus { get; } = new PrivateServiceDetailsPlan("standard_plus");
        public static PrivateServiceDetailsPlan Pro { get; } = new PrivateServiceDetailsPlan("pro");
        public static PrivateServiceDetailsPlan ProPlus { get; } = new PrivateServiceDetailsPlan("pro_plus");
        public static PrivateServiceDetailsPlan ProMax { get; } = new PrivateServiceDetailsPlan("pro_max");
        public static PrivateServiceDetailsPlan ProUltra { get; } = new PrivateServiceDetailsPlan("pro_ultra");

        public static bool operator ==(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsPullRequestPreviewsEnabled : IEquatable<PrivateServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("yes");
        public static PrivateServiceDetailsPullRequestPreviewsEnabled No { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsRegion : IEquatable<PrivateServiceDetailsRegion>
    {
        private readonly string _value;

        private PrivateServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsRegion Oregon { get; } = new PrivateServiceDetailsRegion("oregon");
        public static PrivateServiceDetailsRegion Frankfurt { get; } = new PrivateServiceDetailsRegion("frankfurt");

        public static bool operator ==(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsRegion other && Equals(other);
        public bool Equals(PrivateServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Whether to auto deploy the service or not upon git push.
    /// </summary>
    [EnumType]
    public readonly struct ServiceAutoDeploy : IEquatable<ServiceAutoDeploy>
    {
        private readonly string _value;

        private ServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceAutoDeploy Yes { get; } = new ServiceAutoDeploy("yes");
        public static ServiceAutoDeploy No { get; } = new ServiceAutoDeploy("no");

        public static bool operator ==(ServiceAutoDeploy left, ServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(ServiceAutoDeploy left, ServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(ServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceAutoDeploy other && Equals(other);
        public bool Equals(ServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The notification setting for this service upon deployment failure.
    /// </summary>
    [EnumType]
    public readonly struct ServiceNotifyOnFail : IEquatable<ServiceNotifyOnFail>
    {
        private readonly string _value;

        private ServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNotifyOnFail Default { get; } = new ServiceNotifyOnFail("default");
        public static ServiceNotifyOnFail Notify { get; } = new ServiceNotifyOnFail("notify");
        public static ServiceNotifyOnFail Ignore { get; } = new ServiceNotifyOnFail("ignore");

        public static bool operator ==(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(ServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNotifyOnFail other && Equals(other);
        public bool Equals(ServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspended : IEquatable<ServiceSuspended>
    {
        private readonly string _value;

        private ServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspended Suspended { get; } = new ServiceSuspended("suspended");
        public static ServiceSuspended NotSuspended { get; } = new ServiceSuspended("not_suspended");

        public static bool operator ==(ServiceSuspended left, ServiceSuspended right) => left.Equals(right);
        public static bool operator !=(ServiceSuspended left, ServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspended other && Equals(other);
        public bool Equals(ServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteRouteType : IEquatable<StaticSiteRouteType>
    {
        private readonly string _value;

        private StaticSiteRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteRouteType Redirect { get; } = new StaticSiteRouteType("redirect");
        public static StaticSiteRouteType Rewrite { get; } = new StaticSiteRouteType("rewrite");

        public static bool operator ==(StaticSiteRouteType left, StaticSiteRouteType right) => left.Equals(right);
        public static bool operator !=(StaticSiteRouteType left, StaticSiteRouteType right) => !left.Equals(right);

        public static explicit operator string(StaticSiteRouteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteRouteType other && Equals(other);
        public bool Equals(StaticSiteRouteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteServiceDetailsPullRequestPreviewsEnabled : IEquatable<StaticSiteServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSiteServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new StaticSiteServiceDetailsPullRequestPreviewsEnabled("yes");
        public static StaticSiteServiceDetailsPullRequestPreviewsEnabled No { get; } = new StaticSiteServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSiteServiceDetailsPullRequestPreviewsEnabled left, StaticSiteServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSiteServiceDetailsPullRequestPreviewsEnabled left, StaticSiteServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSiteServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSiteServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct VerificationStatus : IEquatable<VerificationStatus>
    {
        private readonly string _value;

        private VerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static VerificationStatus Verified { get; } = new VerificationStatus("verified");
        public static VerificationStatus Unverified { get; } = new VerificationStatus("unverified");

        public static bool operator ==(VerificationStatus left, VerificationStatus right) => left.Equals(right);
        public static bool operator !=(VerificationStatus left, VerificationStatus right) => !left.Equals(right);

        public static explicit operator string(VerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is VerificationStatus other && Equals(other);
        public bool Equals(VerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceServiceDetailsEnv : IEquatable<WebServiceServiceDetailsEnv>
    {
        private readonly string _value;

        private WebServiceServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceServiceDetailsEnv Docker { get; } = new WebServiceServiceDetailsEnv("docker");
        public static WebServiceServiceDetailsEnv Elixir { get; } = new WebServiceServiceDetailsEnv("elixir");
        public static WebServiceServiceDetailsEnv Go { get; } = new WebServiceServiceDetailsEnv("go");
        public static WebServiceServiceDetailsEnv Node { get; } = new WebServiceServiceDetailsEnv("node");
        public static WebServiceServiceDetailsEnv Python { get; } = new WebServiceServiceDetailsEnv("python");
        public static WebServiceServiceDetailsEnv Ruby { get; } = new WebServiceServiceDetailsEnv("ruby");
        public static WebServiceServiceDetailsEnv Rust { get; } = new WebServiceServiceDetailsEnv("rust");

        public static bool operator ==(WebServiceServiceDetailsEnv left, WebServiceServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(WebServiceServiceDetailsEnv left, WebServiceServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(WebServiceServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceServiceDetailsEnv other && Equals(other);
        public bool Equals(WebServiceServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceServiceDetailsPlan : IEquatable<WebServiceServiceDetailsPlan>
    {
        private readonly string _value;

        private WebServiceServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceServiceDetailsPlan Starter { get; } = new WebServiceServiceDetailsPlan("starter");
        public static WebServiceServiceDetailsPlan StarterPlus { get; } = new WebServiceServiceDetailsPlan("starter_plus");
        public static WebServiceServiceDetailsPlan Standard { get; } = new WebServiceServiceDetailsPlan("standard");
        public static WebServiceServiceDetailsPlan StandardPlus { get; } = new WebServiceServiceDetailsPlan("standard_plus");
        public static WebServiceServiceDetailsPlan Pro { get; } = new WebServiceServiceDetailsPlan("pro");
        public static WebServiceServiceDetailsPlan ProPlus { get; } = new WebServiceServiceDetailsPlan("pro_plus");
        public static WebServiceServiceDetailsPlan ProMax { get; } = new WebServiceServiceDetailsPlan("pro_max");
        public static WebServiceServiceDetailsPlan ProUltra { get; } = new WebServiceServiceDetailsPlan("pro_ultra");

        public static bool operator ==(WebServiceServiceDetailsPlan left, WebServiceServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(WebServiceServiceDetailsPlan left, WebServiceServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceServiceDetailsPlan other && Equals(other);
        public bool Equals(WebServiceServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceServiceDetailsPullRequestPreviewsEnabled : IEquatable<WebServiceServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServiceServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new WebServiceServiceDetailsPullRequestPreviewsEnabled("yes");
        public static WebServiceServiceDetailsPullRequestPreviewsEnabled No { get; } = new WebServiceServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServiceServiceDetailsPullRequestPreviewsEnabled left, WebServiceServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServiceServiceDetailsPullRequestPreviewsEnabled left, WebServiceServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServiceServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServiceServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceServiceDetailsRegion : IEquatable<WebServiceServiceDetailsRegion>
    {
        private readonly string _value;

        private WebServiceServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceServiceDetailsRegion Oregon { get; } = new WebServiceServiceDetailsRegion("oregon");
        public static WebServiceServiceDetailsRegion Frankfurt { get; } = new WebServiceServiceDetailsRegion("frankfurt");

        public static bool operator ==(WebServiceServiceDetailsRegion left, WebServiceServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(WebServiceServiceDetailsRegion left, WebServiceServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(WebServiceServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceServiceDetailsRegion other && Equals(other);
        public bool Equals(WebServiceServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
