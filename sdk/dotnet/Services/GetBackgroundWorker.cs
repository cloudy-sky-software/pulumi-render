// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class GetBackgroundWorker
    {
        public static Task<GetBackgroundWorkerResult> InvokeAsync(GetBackgroundWorkerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackgroundWorkerResult>("render:services:getBackgroundWorker", args ?? new GetBackgroundWorkerArgs(), options.WithDefaults());

        public static Output<GetBackgroundWorkerResult> Invoke(GetBackgroundWorkerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackgroundWorkerResult>("render:services:getBackgroundWorker", args ?? new GetBackgroundWorkerInvokeArgs(), options.WithDefaults());

        public static Output<GetBackgroundWorkerResult> Invoke(GetBackgroundWorkerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackgroundWorkerResult>("render:services:getBackgroundWorker", args ?? new GetBackgroundWorkerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackgroundWorkerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public GetBackgroundWorkerArgs()
        {
        }
        public static new GetBackgroundWorkerArgs Empty => new GetBackgroundWorkerArgs();
    }

    public sealed class GetBackgroundWorkerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public GetBackgroundWorkerInvokeArgs()
        {
        }
        public static new GetBackgroundWorkerInvokeArgs Empty => new GetBackgroundWorkerInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackgroundWorkerResult
    {
        public readonly Pulumi.Render.Services.ServiceAutoDeploy AutoDeploy;
        public readonly string? Branch;
        public readonly Outputs.BuildFilter? BuildFilter;
        public readonly string CreatedAt;
        /// <summary>
        /// The URL to view the service in the Render Dashboard
        /// </summary>
        public readonly string DashboardUrl;
        public readonly string? EnvironmentId;
        public readonly string Id;
        public readonly string? ImagePath;
        public readonly string Name;
        public readonly Pulumi.Render.Services.ServiceNotifyOnFail NotifyOnFail;
        public readonly string OwnerId;
        public readonly Outputs.RegistryCredentialSummary? RegistryCredential;
        public readonly string? Repo;
        public readonly string RootDir;
        public readonly Outputs.BackgroundWorkerDetailsOutput? ServiceDetails;
        public readonly string Slug;
        public readonly Pulumi.Render.Services.ServiceSuspended Suspended;
        public readonly ImmutableArray<Pulumi.Render.Services.ServiceSuspendersItem> Suspenders;
        public readonly string? Type;
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetBackgroundWorkerResult(
            Pulumi.Render.Services.ServiceAutoDeploy autoDeploy,

            string? branch,

            Outputs.BuildFilter? buildFilter,

            string createdAt,

            string dashboardUrl,

            string? environmentId,

            string id,

            string? imagePath,

            string name,

            Pulumi.Render.Services.ServiceNotifyOnFail notifyOnFail,

            string ownerId,

            Outputs.RegistryCredentialSummary? registryCredential,

            string? repo,

            string rootDir,

            Outputs.BackgroundWorkerDetailsOutput? serviceDetails,

            string slug,

            Pulumi.Render.Services.ServiceSuspended suspended,

            ImmutableArray<Pulumi.Render.Services.ServiceSuspendersItem> suspenders,

            string? type,

            string updatedAt)
        {
            AutoDeploy = autoDeploy;
            Branch = branch;
            BuildFilter = buildFilter;
            CreatedAt = createdAt;
            DashboardUrl = dashboardUrl;
            EnvironmentId = environmentId;
            Id = id;
            ImagePath = imagePath;
            Name = name;
            NotifyOnFail = notifyOnFail;
            OwnerId = ownerId;
            RegistryCredential = registryCredential;
            Repo = repo;
            RootDir = rootDir;
            ServiceDetails = serviceDetails;
            Slug = slug;
            Suspended = suspended;
            Suspenders = suspenders;
            Type = type;
            UpdatedAt = updatedAt;
        }
    }
}
