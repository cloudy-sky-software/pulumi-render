// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Services
{
    [EnumType]
    public readonly struct CustomDomainDomainType : IEquatable<CustomDomainDomainType>
    {
        private readonly string _value;

        private CustomDomainDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainDomainType Apex { get; } = new CustomDomainDomainType("apex");
        public static CustomDomainDomainType Subdomain { get; } = new CustomDomainDomainType("subdomain");

        public static bool operator ==(CustomDomainDomainType left, CustomDomainDomainType right) => left.Equals(right);
        public static bool operator !=(CustomDomainDomainType left, CustomDomainDomainType right) => !left.Equals(right);

        public static explicit operator string(CustomDomainDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainDomainType other && Equals(other);
        public bool Equals(CustomDomainDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainVerificationStatus : IEquatable<CustomDomainVerificationStatus>
    {
        private readonly string _value;

        private CustomDomainVerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainVerificationStatus Verified { get; } = new CustomDomainVerificationStatus("verified");
        public static CustomDomainVerificationStatus Unverified { get; } = new CustomDomainVerificationStatus("unverified");

        public static bool operator ==(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => left.Equals(right);
        public static bool operator !=(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDomainVerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainVerificationStatus other && Equals(other);
        public bool Equals(CustomDomainVerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployClearCache : IEquatable<DeployClearCache>
    {
        private readonly string _value;

        private DeployClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployClearCache DoNotClear { get; } = new DeployClearCache("do_not_clear");
        public static DeployClearCache Clear { get; } = new DeployClearCache("clear");

        public static bool operator ==(DeployClearCache left, DeployClearCache right) => left.Equals(right);
        public static bool operator !=(DeployClearCache left, DeployClearCache right) => !left.Equals(right);

        public static explicit operator string(DeployClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployClearCache other && Equals(other);
        public bool Equals(DeployClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The notification setting for this service upon deployment failure.
    /// </summary>
    [EnumType]
    public readonly struct ServiceNotifyOnFail : IEquatable<ServiceNotifyOnFail>
    {
        private readonly string _value;

        private ServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNotifyOnFail Default { get; } = new ServiceNotifyOnFail("default");
        public static ServiceNotifyOnFail Notify { get; } = new ServiceNotifyOnFail("notify");
        public static ServiceNotifyOnFail Ignore { get; } = new ServiceNotifyOnFail("ignore");

        public static bool operator ==(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(ServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNotifyOnFail other && Equals(other);
        public bool Equals(ServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceStaticSitePullRequestPreviewsEnabled : IEquatable<ServiceStaticSitePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServiceStaticSitePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceStaticSitePullRequestPreviewsEnabled Yes { get; } = new ServiceStaticSitePullRequestPreviewsEnabled("yes");
        public static ServiceStaticSitePullRequestPreviewsEnabled No { get; } = new ServiceStaticSitePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServiceStaticSitePullRequestPreviewsEnabled left, ServiceStaticSitePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServiceStaticSitePullRequestPreviewsEnabled left, ServiceStaticSitePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServiceStaticSitePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceStaticSitePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServiceStaticSitePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceStaticSiteRouteType : IEquatable<ServiceStaticSiteRouteType>
    {
        private readonly string _value;

        private ServiceStaticSiteRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceStaticSiteRouteType Redirect { get; } = new ServiceStaticSiteRouteType("redirect");
        public static ServiceStaticSiteRouteType Rewrite { get; } = new ServiceStaticSiteRouteType("rewrite");

        public static bool operator ==(ServiceStaticSiteRouteType left, ServiceStaticSiteRouteType right) => left.Equals(right);
        public static bool operator !=(ServiceStaticSiteRouteType left, ServiceStaticSiteRouteType right) => !left.Equals(right);

        public static explicit operator string(ServiceStaticSiteRouteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceStaticSiteRouteType other && Equals(other);
        public bool Equals(ServiceStaticSiteRouteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspended : IEquatable<ServiceSuspended>
    {
        private readonly string _value;

        private ServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspended Suspended { get; } = new ServiceSuspended("suspended");
        public static ServiceSuspended NotSuspended { get; } = new ServiceSuspended("not_suspended");

        public static bool operator ==(ServiceSuspended left, ServiceSuspended right) => left.Equals(right);
        public static bool operator !=(ServiceSuspended left, ServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspended other && Equals(other);
        public bool Equals(ServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType StaticSite { get; } = new ServiceType("static_site");
        public static ServiceType WebService { get; } = new ServiceType("web_service");
        public static ServiceType PrivateService { get; } = new ServiceType("private_service");
        public static ServiceType BackgroundWorker { get; } = new ServiceType("background_worker");
        public static ServiceType CronJob { get; } = new ServiceType("cron_job");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServiceEnv : IEquatable<ServiceWebServiceEnv>
    {
        private readonly string _value;

        private ServiceWebServiceEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceEnv Docker { get; } = new ServiceWebServiceEnv("docker");
        public static ServiceWebServiceEnv Elixir { get; } = new ServiceWebServiceEnv("elixir");
        public static ServiceWebServiceEnv Go { get; } = new ServiceWebServiceEnv("go");
        public static ServiceWebServiceEnv Node { get; } = new ServiceWebServiceEnv("node");
        public static ServiceWebServiceEnv Python { get; } = new ServiceWebServiceEnv("python");
        public static ServiceWebServiceEnv Ruby { get; } = new ServiceWebServiceEnv("ruby");
        public static ServiceWebServiceEnv Rust { get; } = new ServiceWebServiceEnv("rust");

        public static bool operator ==(ServiceWebServiceEnv left, ServiceWebServiceEnv right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceEnv left, ServiceWebServiceEnv right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceEnv other && Equals(other);
        public bool Equals(ServiceWebServiceEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServicePlan : IEquatable<ServiceWebServicePlan>
    {
        private readonly string _value;

        private ServiceWebServicePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServicePlan Starter { get; } = new ServiceWebServicePlan("starter");
        public static ServiceWebServicePlan StarterPlus { get; } = new ServiceWebServicePlan("starter_plus");
        public static ServiceWebServicePlan Standard { get; } = new ServiceWebServicePlan("standard");
        public static ServiceWebServicePlan StandardPlus { get; } = new ServiceWebServicePlan("standard_plus");
        public static ServiceWebServicePlan Pro { get; } = new ServiceWebServicePlan("pro");
        public static ServiceWebServicePlan ProPlus { get; } = new ServiceWebServicePlan("pro_plus");
        public static ServiceWebServicePlan ProMax { get; } = new ServiceWebServicePlan("pro_max");
        public static ServiceWebServicePlan ProUltra { get; } = new ServiceWebServicePlan("pro_ultra");

        public static bool operator ==(ServiceWebServicePlan left, ServiceWebServicePlan right) => left.Equals(right);
        public static bool operator !=(ServiceWebServicePlan left, ServiceWebServicePlan right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServicePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServicePlan other && Equals(other);
        public bool Equals(ServiceWebServicePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServicePullRequestPreviewsEnabled : IEquatable<ServiceWebServicePullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private ServiceWebServicePullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServicePullRequestPreviewsEnabled Yes { get; } = new ServiceWebServicePullRequestPreviewsEnabled("yes");
        public static ServiceWebServicePullRequestPreviewsEnabled No { get; } = new ServiceWebServicePullRequestPreviewsEnabled("no");

        public static bool operator ==(ServiceWebServicePullRequestPreviewsEnabled left, ServiceWebServicePullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(ServiceWebServicePullRequestPreviewsEnabled left, ServiceWebServicePullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServicePullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServicePullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(ServiceWebServicePullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceWebServiceRegion : IEquatable<ServiceWebServiceRegion>
    {
        private readonly string _value;

        private ServiceWebServiceRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceWebServiceRegion Oregon { get; } = new ServiceWebServiceRegion("oregon");
        public static ServiceWebServiceRegion Frankfurt { get; } = new ServiceWebServiceRegion("frankfurt");

        public static bool operator ==(ServiceWebServiceRegion left, ServiceWebServiceRegion right) => left.Equals(right);
        public static bool operator !=(ServiceWebServiceRegion left, ServiceWebServiceRegion right) => !left.Equals(right);

        public static explicit operator string(ServiceWebServiceRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceWebServiceRegion other && Equals(other);
        public bool Equals(ServiceWebServiceRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
