// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Jobs struct {
	pulumi.CustomResourceState

	CreatedAt    pulumi.StringPtrOutput `pulumi:"createdAt"`
	FinishedAt   pulumi.StringPtrOutput `pulumi:"finishedAt"`
	PlanId       pulumi.StringOutput    `pulumi:"planId"`
	StartCommand pulumi.StringOutput    `pulumi:"startCommand"`
	StartedAt    pulumi.StringPtrOutput `pulumi:"startedAt"`
	Status       pulumi.StringPtrOutput `pulumi:"status"`
}

// NewJobs registers a new resource with the given unique name, arguments, and options.
func NewJobs(ctx *pulumi.Context,
	name string, args *JobsArgs, opts ...pulumi.ResourceOption) (*Jobs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanId == nil {
		return nil, errors.New("invalid value for required argument 'PlanId'")
	}
	if args.StartCommand == nil {
		return nil, errors.New("invalid value for required argument 'StartCommand'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Jobs
	err := ctx.RegisterResource("render:services:Jobs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobs gets an existing Jobs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobsState, opts ...pulumi.ResourceOption) (*Jobs, error) {
	var resource Jobs
	err := ctx.ReadResource("render:services:Jobs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Jobs resources.
type jobsState struct {
}

type JobsState struct {
}

func (JobsState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobsState)(nil)).Elem()
}

type jobsArgs struct {
	PlanId string `pulumi:"planId"`
	// (Required) The ID of the service
	ServiceId    *string `pulumi:"serviceId"`
	StartCommand string  `pulumi:"startCommand"`
}

// The set of arguments for constructing a Jobs resource.
type JobsArgs struct {
	PlanId pulumi.StringInput
	// (Required) The ID of the service
	ServiceId    pulumi.StringPtrInput
	StartCommand pulumi.StringInput
}

func (JobsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobsArgs)(nil)).Elem()
}

type JobsInput interface {
	pulumi.Input

	ToJobsOutput() JobsOutput
	ToJobsOutputWithContext(ctx context.Context) JobsOutput
}

func (*Jobs) ElementType() reflect.Type {
	return reflect.TypeOf((**Jobs)(nil)).Elem()
}

func (i *Jobs) ToJobsOutput() JobsOutput {
	return i.ToJobsOutputWithContext(context.Background())
}

func (i *Jobs) ToJobsOutputWithContext(ctx context.Context) JobsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobsOutput)
}

type JobsOutput struct{ *pulumi.OutputState }

func (JobsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Jobs)(nil)).Elem()
}

func (o JobsOutput) ToJobsOutput() JobsOutput {
	return o
}

func (o JobsOutput) ToJobsOutputWithContext(ctx context.Context) JobsOutput {
	return o
}

func (o JobsOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o JobsOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringPtrOutput { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

func (o JobsOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

func (o JobsOutput) StartCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringOutput { return v.StartCommand }).(pulumi.StringOutput)
}

func (o JobsOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringPtrOutput { return v.StartedAt }).(pulumi.StringPtrOutput)
}

func (o JobsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Jobs) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobsInput)(nil)).Elem(), &Jobs{})
	pulumi.RegisterOutputType(JobsOutput{})
}
