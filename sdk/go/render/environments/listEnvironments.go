// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package environments

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ListEnvironments(ctx *pulumi.Context, args *ListEnvironmentsArgs, opts ...pulumi.InvokeOption) (*ListEnvironmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ListEnvironmentsResult
	err := ctx.Invoke("render:environments:listEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListEnvironmentsArgs struct {
}

type ListEnvironmentsResult struct {
	Items []EnvironmentWithCursor `pulumi:"items"`
}

func ListEnvironmentsOutput(ctx *pulumi.Context, args ListEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) ListEnvironmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (ListEnvironmentsResultOutput, error) {
			args := v.(ListEnvironmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("render:environments:listEnvironments", args, ListEnvironmentsResultOutput{}, options).(ListEnvironmentsResultOutput), nil
		}).(ListEnvironmentsResultOutput)
}

type ListEnvironmentsOutputArgs struct {
}

func (ListEnvironmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEnvironmentsArgs)(nil)).Elem()
}

type ListEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (ListEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListEnvironmentsResult)(nil)).Elem()
}

func (o ListEnvironmentsResultOutput) ToListEnvironmentsResultOutput() ListEnvironmentsResultOutput {
	return o
}

func (o ListEnvironmentsResultOutput) ToListEnvironmentsResultOutputWithContext(ctx context.Context) ListEnvironmentsResultOutput {
	return o
}

func (o ListEnvironmentsResultOutput) Items() EnvironmentWithCursorArrayOutput {
	return o.ApplyT(func(v ListEnvironmentsResult) []EnvironmentWithCursor { return v.Items }).(EnvironmentWithCursorArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListEnvironmentsResultOutput{})
}
