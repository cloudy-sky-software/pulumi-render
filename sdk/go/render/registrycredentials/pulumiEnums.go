// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package registrycredentials

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The registry to use this credential with
type RegistryCredentialRegistry string

const (
	RegistryCredentialRegistryGithub = RegistryCredentialRegistry("GITHUB")
	RegistryCredentialRegistryGitlab = RegistryCredentialRegistry("GITLAB")
	RegistryCredentialRegistryDocker = RegistryCredentialRegistry("DOCKER")
)

func (RegistryCredentialRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialRegistry)(nil)).Elem()
}

func (e RegistryCredentialRegistry) ToRegistryCredentialRegistryOutput() RegistryCredentialRegistryOutput {
	return pulumi.ToOutput(e).(RegistryCredentialRegistryOutput)
}

func (e RegistryCredentialRegistry) ToRegistryCredentialRegistryOutputWithContext(ctx context.Context) RegistryCredentialRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RegistryCredentialRegistryOutput)
}

func (e RegistryCredentialRegistry) ToRegistryCredentialRegistryPtrOutput() RegistryCredentialRegistryPtrOutput {
	return e.ToRegistryCredentialRegistryPtrOutputWithContext(context.Background())
}

func (e RegistryCredentialRegistry) ToRegistryCredentialRegistryPtrOutputWithContext(ctx context.Context) RegistryCredentialRegistryPtrOutput {
	return RegistryCredentialRegistry(e).ToRegistryCredentialRegistryOutputWithContext(ctx).ToRegistryCredentialRegistryPtrOutputWithContext(ctx)
}

func (e RegistryCredentialRegistry) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegistryCredentialRegistry) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RegistryCredentialRegistry) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RegistryCredentialRegistry) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RegistryCredentialRegistryOutput struct{ *pulumi.OutputState }

func (RegistryCredentialRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialRegistry)(nil)).Elem()
}

func (o RegistryCredentialRegistryOutput) ToRegistryCredentialRegistryOutput() RegistryCredentialRegistryOutput {
	return o
}

func (o RegistryCredentialRegistryOutput) ToRegistryCredentialRegistryOutputWithContext(ctx context.Context) RegistryCredentialRegistryOutput {
	return o
}

func (o RegistryCredentialRegistryOutput) ToRegistryCredentialRegistryPtrOutput() RegistryCredentialRegistryPtrOutput {
	return o.ToRegistryCredentialRegistryPtrOutputWithContext(context.Background())
}

func (o RegistryCredentialRegistryOutput) ToRegistryCredentialRegistryPtrOutputWithContext(ctx context.Context) RegistryCredentialRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryCredentialRegistry) *RegistryCredentialRegistry {
		return &v
	}).(RegistryCredentialRegistryPtrOutput)
}

func (o RegistryCredentialRegistryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RegistryCredentialRegistryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RegistryCredentialRegistry) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RegistryCredentialRegistryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RegistryCredentialRegistryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RegistryCredentialRegistry) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RegistryCredentialRegistryPtrOutput struct{ *pulumi.OutputState }

func (RegistryCredentialRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryCredentialRegistry)(nil)).Elem()
}

func (o RegistryCredentialRegistryPtrOutput) ToRegistryCredentialRegistryPtrOutput() RegistryCredentialRegistryPtrOutput {
	return o
}

func (o RegistryCredentialRegistryPtrOutput) ToRegistryCredentialRegistryPtrOutputWithContext(ctx context.Context) RegistryCredentialRegistryPtrOutput {
	return o
}

func (o RegistryCredentialRegistryPtrOutput) Elem() RegistryCredentialRegistryOutput {
	return o.ApplyT(func(v *RegistryCredentialRegistry) RegistryCredentialRegistry {
		if v != nil {
			return *v
		}
		var ret RegistryCredentialRegistry
		return ret
	}).(RegistryCredentialRegistryOutput)
}

func (o RegistryCredentialRegistryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RegistryCredentialRegistryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RegistryCredentialRegistry) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RegistryCredentialRegistryInput is an input type that accepts values of the RegistryCredentialRegistry enum
// A concrete instance of `RegistryCredentialRegistryInput` can be one of the following:
//
//	RegistryCredentialRegistryGithub
//	RegistryCredentialRegistryGitlab
//	RegistryCredentialRegistryDocker
type RegistryCredentialRegistryInput interface {
	pulumi.Input

	ToRegistryCredentialRegistryOutput() RegistryCredentialRegistryOutput
	ToRegistryCredentialRegistryOutputWithContext(context.Context) RegistryCredentialRegistryOutput
}

var registryCredentialRegistryPtrType = reflect.TypeOf((**RegistryCredentialRegistry)(nil)).Elem()

type RegistryCredentialRegistryPtrInput interface {
	pulumi.Input

	ToRegistryCredentialRegistryPtrOutput() RegistryCredentialRegistryPtrOutput
	ToRegistryCredentialRegistryPtrOutputWithContext(context.Context) RegistryCredentialRegistryPtrOutput
}

type registryCredentialRegistryPtr string

func RegistryCredentialRegistryPtr(v string) RegistryCredentialRegistryPtrInput {
	return (*registryCredentialRegistryPtr)(&v)
}

func (*registryCredentialRegistryPtr) ElementType() reflect.Type {
	return registryCredentialRegistryPtrType
}

func (in *registryCredentialRegistryPtr) ToRegistryCredentialRegistryPtrOutput() RegistryCredentialRegistryPtrOutput {
	return pulumi.ToOutput(in).(RegistryCredentialRegistryPtrOutput)
}

func (in *registryCredentialRegistryPtr) ToRegistryCredentialRegistryPtrOutputWithContext(ctx context.Context) RegistryCredentialRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RegistryCredentialRegistryPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialRegistryInput)(nil)).Elem(), RegistryCredentialRegistry("GITHUB"))
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialRegistryPtrInput)(nil)).Elem(), RegistryCredentialRegistry("GITHUB"))
	pulumi.RegisterOutputType(RegistryCredentialRegistryOutput{})
	pulumi.RegisterOutputType(RegistryCredentialRegistryPtrOutput{})
}
