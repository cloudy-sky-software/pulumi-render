// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package owners

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Owner struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
	// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
	TwoFactorAuthEnabled *bool     `pulumi:"twoFactorAuthEnabled"`
	Type                 OwnerType `pulumi:"type"`
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

func (o OwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Email }).(pulumi.StringOutput)
}

func (o OwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Id }).(pulumi.StringOutput)
}

func (o OwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Name }).(pulumi.StringOutput)
}

// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
func (o OwnerOutput) TwoFactorAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Owner) *bool { return v.TwoFactorAuthEnabled }).(pulumi.BoolPtrOutput)
}

func (o OwnerOutput) Type() OwnerTypeOutput {
	return o.ApplyT(func(v Owner) OwnerType { return v.Type }).(OwnerTypeOutput)
}

type OwnerPtrOutput struct{ *pulumi.OutputState }

func (OwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Owner)(nil)).Elem()
}

func (o OwnerPtrOutput) ToOwnerPtrOutput() OwnerPtrOutput {
	return o
}

func (o OwnerPtrOutput) ToOwnerPtrOutputWithContext(ctx context.Context) OwnerPtrOutput {
	return o
}

func (o OwnerPtrOutput) Elem() OwnerOutput {
	return o.ApplyT(func(v *Owner) Owner {
		if v != nil {
			return *v
		}
		var ret Owner
		return ret
	}).(OwnerOutput)
}

func (o OwnerPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Owner) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

func (o OwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Owner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

func (o OwnerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Owner) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
func (o OwnerPtrOutput) TwoFactorAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Owner) *bool {
		if v == nil {
			return nil
		}
		return v.TwoFactorAuthEnabled
	}).(pulumi.BoolPtrOutput)
}

func (o OwnerPtrOutput) Type() OwnerTypePtrOutput {
	return o.ApplyT(func(v *Owner) *OwnerType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(OwnerTypePtrOutput)
}

type OwnerWithCursor struct {
	Cursor *string `pulumi:"cursor"`
	Owner  *Owner  `pulumi:"owner"`
}

type OwnerWithCursorOutput struct{ *pulumi.OutputState }

func (OwnerWithCursorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerWithCursor)(nil)).Elem()
}

func (o OwnerWithCursorOutput) ToOwnerWithCursorOutput() OwnerWithCursorOutput {
	return o
}

func (o OwnerWithCursorOutput) ToOwnerWithCursorOutputWithContext(ctx context.Context) OwnerWithCursorOutput {
	return o
}

func (o OwnerWithCursorOutput) Cursor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerWithCursor) *string { return v.Cursor }).(pulumi.StringPtrOutput)
}

func (o OwnerWithCursorOutput) Owner() OwnerPtrOutput {
	return o.ApplyT(func(v OwnerWithCursor) *Owner { return v.Owner }).(OwnerPtrOutput)
}

type OwnerWithCursorArrayOutput struct{ *pulumi.OutputState }

func (OwnerWithCursorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerWithCursor)(nil)).Elem()
}

func (o OwnerWithCursorArrayOutput) ToOwnerWithCursorArrayOutput() OwnerWithCursorArrayOutput {
	return o
}

func (o OwnerWithCursorArrayOutput) ToOwnerWithCursorArrayOutputWithContext(ctx context.Context) OwnerWithCursorArrayOutput {
	return o
}

func (o OwnerWithCursorArrayOutput) Index(i pulumi.IntInput) OwnerWithCursorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerWithCursor {
		return vs[0].([]OwnerWithCursor)[vs[1].(int)]
	}).(OwnerWithCursorOutput)
}

type TeamMember struct {
	Email      string           `pulumi:"email"`
	MfaEnabled bool             `pulumi:"mfaEnabled"`
	Name       string           `pulumi:"name"`
	Role       string           `pulumi:"role"`
	Status     TeamMemberStatus `pulumi:"status"`
	UserId     string           `pulumi:"userId"`
}

type TeamMemberOutput struct{ *pulumi.OutputState }

func (TeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamMember)(nil)).Elem()
}

func (o TeamMemberOutput) ToTeamMemberOutput() TeamMemberOutput {
	return o
}

func (o TeamMemberOutput) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return o
}

func (o TeamMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMember) string { return v.Email }).(pulumi.StringOutput)
}

func (o TeamMemberOutput) MfaEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v TeamMember) bool { return v.MfaEnabled }).(pulumi.BoolOutput)
}

func (o TeamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMember) string { return v.Name }).(pulumi.StringOutput)
}

func (o TeamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMember) string { return v.Role }).(pulumi.StringOutput)
}

func (o TeamMemberOutput) Status() TeamMemberStatusOutput {
	return o.ApplyT(func(v TeamMember) TeamMemberStatus { return v.Status }).(TeamMemberStatusOutput)
}

func (o TeamMemberOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMember) string { return v.UserId }).(pulumi.StringOutput)
}

type TeamMemberArrayOutput struct{ *pulumi.OutputState }

func (TeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamMember)(nil)).Elem()
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) Index(i pulumi.IntInput) TeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamMember {
		return vs[0].([]TeamMember)[vs[1].(int)]
	}).(TeamMemberOutput)
}

func init() {
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(OwnerPtrOutput{})
	pulumi.RegisterOutputType(OwnerWithCursorOutput{})
	pulumi.RegisterOutputType(OwnerWithCursorArrayOutput{})
	pulumi.RegisterOutputType(TeamMemberOutput{})
	pulumi.RegisterOutputType(TeamMemberArrayOutput{})
}
