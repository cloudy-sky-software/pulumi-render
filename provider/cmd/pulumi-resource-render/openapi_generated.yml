openapi: 3.0.2
components:
    parameters:
        createdAfterParam:
            description: Filter for resources created after a certain time (specified as an ISO 8601 timestamp)
            example: "2021-02-17T08:15:30Z"
            in: query
            name: createdAfter
            schema:
                format: date-time
                type: string
        createdBeforeParam:
            description: Filter for resources created before a certain time (specified as an ISO 8601 timestamp)
            example: "2021-06-17T08:15:30Z"
            in: query
            name: createdBefore
            schema:
                format: date-time
                type: string
        cronJobIdParam:
            description: The ID of the cron job
            in: path
            name: cronJobId
            required: true
            schema:
                type: string
        cursorParam:
            description: The position in the result list to start from when fetching paginated results. For details, see [Pagination](https://api-docs.render.com/reference/pagination).
            in: query
            name: cursor
            schema:
                type: string
        customDomainIdOrNameParam:
            description: The ID or name of the custom domain
            in: path
            name: customDomainIdOrName
            required: true
            schema:
                type: string
        deployIdParam:
            description: The ID of the deploy
            in: path
            name: deployId
            required: true
            schema:
                type: string
        endTimeParam:
            description: Epoch/Unix timestamp of end of time range to return. Defaults to `now()`.
            in: query
            name: endTime
            schema:
                example: "2021-06-17T08:30:30Z"
                format: date-time
                type: string
        envGroupIdParam:
            description: Filter for resources that belong to an environment group
            in: path
            name: envGroupId
            required: true
            schema:
                type: string
        envParam:
            deprecated: true
            description: Filter for environments (runtimes) of services (deprecated; use `runtime` instead)
            explode: false
            in: query
            name: env
            schema:
                items:
                    $ref: '#/components/schemas/serviceRuntime'
                type: array
            style: form
        envVarKeyParam:
            description: The name of the environment variable
            in: path
            name: envVarKey
            required: true
            schema:
                type: string
        environmentIdParam:
            description: Filter for resources that belong to an environment
            explode: false
            in: query
            name: environmentId
            schema:
                items:
                    type: string
                type: array
            style: form
        eventTypeParam:
            description: The type of event to filter to
            in: query
            name: eventType
            schema:
                anyOf:
                    - enum:
                        - autoscaling_config_changed
                        - autoscaling_ended
                        - autoscaling_started
                        - branch_deleted
                        - build_ended
                        - build_plan_changed
                        - build_started
                        - commit_ignored
                        - cron_job_run_ended
                        - cron_job_run_started
                        - deploy_ended
                        - deploy_started
                        - disk_created
                        - disk_updated
                        - disk_deleted
                        - image_pull_failed
                        - initial_deploy_hook_ended
                        - initial_deploy_hook_started
                        - instance_count_changed
                        - job_run_ended
                        - maintenance_mode_enabled
                        - maintenance_mode_uri_updated
                        - maintenance_ended
                        - maintenance_started
                        - plan_changed
                        - pre_deploy_ended
                        - pre_deploy_started
                        - server_available
                        - server_failed
                        - server_hardware_failure
                        - server_restarted
                        - server_unhealthy
                        - service_resumed
                        - service_suspended
                        - suspender_added
                        - suspender_removed
                        - zero_downtime_redeploy_ended
                        - zero_downtime_redeploy_started
                      type: string
        includeReplicasParam:
            description: Include replicas in the response
            in: query
            name: includeReplicas
            schema:
                default: true
                type: boolean
        limitParam:
            description: The maximum number of items to return. For details, see [Pagination](https://api-docs.render.com/reference/pagination).
            in: query
            name: limit
            schema:
                default: 20
                description: Defaults to 20
                maximum: 100
                minimum: 1
                type: integer
        nameParam:
            description: Filter by name
            explode: false
            in: query
            name: name
            schema:
                items:
                    type: string
                type: array
            style: form
        ownerIdParam:
            description: The ID of the owner (team or personal user) whose resources should be returned
            explode: false
            in: query
            name: ownerId
            schema:
                items:
                    type: string
                type: array
            style: form
        ownerIdPathParam:
            description: The ID of the owner (team or personal user) whose resources should be returned
            in: path
            name: ownerId
            required: true
            schema:
                type: string
        projectIdParam:
            description: Filter for resources that belong to a project
            explode: false
            in: query
            name: projectId
            required: true
            schema:
                items:
                    type: string
                type: array
            style: form
        regionParam:
            description: Filter by resource region
            explode: false
            in: query
            name: region
            schema:
                items:
                    $ref: '#/components/schemas/region'
                type: array
            style: form
        resourceIdParam:
            description: IDs of resources (server, cron job, postgres, or redis) to filter by
            in: query
            name: resourceId
            schema:
                items:
                    type: string
                type: array
        runtimeParam:
            deprecated: true
            description: Filter for environments (runtimes) of services
            explode: false
            in: query
            name: env
            schema:
                items:
                    $ref: '#/components/schemas/serviceRuntime'
                type: array
            style: form
        secretFileNameParam:
            description: The name of the secret file
            in: path
            name: secretFileName
            required: true
            schema:
                type: string
        serviceIdParam:
            description: The ID of the service
            in: path
            name: serviceId
            required: true
            schema:
                type: string
        serviceIdsParam:
            description: Filter for resources by service ID
            in: query
            name: serviceId
            schema:
                items:
                    type: string
                type: array
            style: form
        serviceTypeParam:
            description: Filter for types of services
            explode: false
            in: query
            name: type
            schema:
                items:
                    $ref: '#/components/schemas/serviceType'
                type: array
            style: form
        startTimeParam:
            description: Epoch/Unix timestamp of end of time range to return. Defaults to `now() - 1 hour`.
            in: query
            name: startTime
            schema:
                example: "2021-06-17T08:15:30Z"
                format: date-time
                type: string
        suspendedParam:
            description: Filter resources based on whether they're suspended or not suspended
            explode: false
            in: query
            name: suspended
            schema:
                items:
                    enum:
                        - suspended
                        - not_suspended
                    type: string
                type: array
            style: form
        updatedAfterParam:
            description: Filter for resources updated after a certain time (specified as an ISO 8601 timestamp)
            example: "2021-06-17T08:15:30Z"
            in: query
            name: updatedAfter
            schema:
                format: date-time
                type: string
        updatedBeforeParam:
            description: Filter for resources updated before a certain time (specified as an ISO 8601 timestamp)
            example: "2021-06-17T08:15:30Z"
            in: query
            name: updatedBefore
            schema:
                format: date-time
                type: string
    responses:
        400BadRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: The request could not be understood by the server.
        401Unauthorized:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: Authorization information is missing or invalid.
        402PaymentRequired:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: You must enter payment information to perform this request.
        403Forbidden:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: You do not have permissions for the requested resource.
        404NotFound:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: Unable to find the requested resource.
        406NotAcceptable:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: Unable to generate preferred media types as specified by Accept request header.
        409Conflict:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: The current state of the resource conflicts with this request.
        410Gone:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: The requested resource is no longer available.
        429RateLimit:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: Rate limit has been surpassed.
        500InternalServerError:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: An unexpected server error has occurred.
        503ServiceUnavailable:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/error'
            description: Server currently unavailable.
        Logs200Response:
            content:
                application/json:
                    schema:
                        description: A run of a cron job
                        properties:
                            hasMore:
                                description: Ture if there are more logs to fetch
                                type: boolean
                            logs:
                                items:
                                    $ref: '#/paths/~1logs~1subscribe/get/responses/101/content/application~1json/schema'
                                type: array
                            nextEndTime:
                                description: The end time to use in the next query to fetch the next set of logs
                                example: "2021-07-15T07:20:05.777035-07:00"
                                format: date-time
                                type: string
                            nextStartTime:
                                description: The start time to use in the next query to fetch the next set of logs
                                example: "2021-07-15T07:20:05.777035-07:00"
                                format: date-time
                                type: string
                        required:
                            - hasMore
                            - nextStartTime
                            - nextEndTime
                            - logs
                        type: object
            description: A collection of logs with pagination metadata
        LogsValues200Response:
            content:
                application/json:
                    schema:
                        items:
                            type: string
                        type: array
            description: An array of possible values for a log label
    schemas:
        Job:
            properties:
                createdAt:
                    example: "2021-07-15T07:20:05.777035-07:00"
                    format: date-time
                    type: string
                finishedAt:
                    example: "2021-07-15T07:20:05.777035-07:00"
                    format: date-time
                    type: string
                id:
                    $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs~1%7BjobId%7D/parameters/1/schema'
                planId:
                    example: plan-srv-004
                    type: string
                serviceId:
                    example: srv-xxxxx
                    type: string
                startCommand:
                    example: echo 'hello world'
                    type: string
                startedAt:
                    example: "2021-07-15T07:20:05.777035-07:00"
                    format: date-time
                    type: string
                status:
                    enum:
                        - succeeded
                        - failed
                        - canceled
                    type: string
            required:
                - id
                - serviceId
                - startCommand
                - planId
                - createdAt
            type: object
        addUpdateEnvVarInput:
            oneOf:
                - $ref: '#/components/schemas/envVarValue'
                - $ref: '#/components/schemas/envVarGenerateValue'
            type: object
        autoDeploy:
            default: "yes"
            enum:
                - "yes"
                - "no"
            type: string
        backgroundWorker:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsPOST'
                    type:
                        default: background_worker
                        type: string
                  type: object
            title: BackgroundWorker
        backgroundWorkerDetails:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    $ref: '#/components/schemas/webServiceDetails/properties/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
            type: object
        backgroundWorkerDetailsOutput:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    $ref: '#/components/schemas/webServiceDetails/properties/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
            type: object
        backgroundWorkerDetailsPATCH:
            properties:
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPATCH'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            type: object
        backgroundWorkerDetailsPOST:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                disk:
                    $ref: '#/components/schemas/serviceDisk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPOST'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    default: 1
                    description: Defaults to 1
                    minimum: 1
                    type: integer
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            required:
                - runtime
            type: object
        backgroundWorkerOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsOutput'
                    type:
                        default: background_worker
                        type: string
                  type: object
            title: BackgroundWorker
        backgroundWorkerPatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/backgroundWorkerDetailsPATCH'
                    type:
                        default: background_worker
                        type: string
                  type: object
            title: BackgroundWorker
        blueprintWithCursor:
            description: A blueprint with a cursor
            properties:
                blueprint:
                    properties:
                        autoSync:
                            $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/patch/requestBody/content/application~1json/schema/properties/autoSync'
                        branch:
                            type: string
                        id:
                            $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/parameters/0/schema'
                        lastSync:
                            format: date-time
                            type: string
                        name:
                            type: string
                        repo:
                            type: string
                        status:
                            $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/get/responses/200/content/application~1json/schema/properties/status'
                    required:
                        - id
                        - name
                        - status
                        - autoSync
                        - repo
                        - branch
                    type: object
                cursor:
                    $ref: '#/components/schemas/cursor'
            required:
                - blueprint
                - cursor
            type: object
        buildFilter:
            properties:
                ignoredPaths:
                    items:
                        type: string
                    type: array
                paths:
                    items:
                        type: string
                    type: array
            required:
                - paths
                - ignoredPaths
            type: object
        buildPlan:
            default: starter
            enum:
                - starter
                - performance
            type: string
        cidrBlockAndDescription:
            properties:
                cidrBlock:
                    type: string
                description:
                    description: User-provided description of the CIDR block
                    type: string
            required:
                - cidrBlock
                - description
            type: object
        cronJob:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsPOST'
                    type:
                        default: cron_job
                        type: string
                  type: object
            title: CronJob
        cronJobDetails:
            properties:
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                lastSuccessfulRunAt:
                    format: date-time
                    type: string
                plan:
                    $ref: '#/components/schemas/plan'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                schedule:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - schedule
                - buildPlan
            type: object
        cronJobDetailsOutput:
            properties:
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                lastSuccessfulRunAt:
                    format: date-time
                    type: string
                plan:
                    $ref: '#/components/schemas/plan'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                schedule:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - schedule
                - buildPlan
            type: object
        cronJobDetailsPATCH:
            properties:
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPATCH'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                schedule:
                    type: string
            type: object
        cronJobDetailsPOST:
            properties:
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                schedule:
                    type: string
            required:
                - runtime
                - schedule
            type: object
        cronJobOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsOutput'
                    type:
                        default: cron_job
                        type: string
                  type: object
            title: CronJob
        cronJobPatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/cronJobDetailsPATCH'
                    type:
                        default: cron_job
                        type: string
                  type: object
            title: CronJob
        cronJobRun:
            description: A run of a cron job
            properties:
                canceledBy:
                    description: user who cancelled the cron job run
                    type: string
                finishedAt:
                    example: "2021-07-15T07:20:05.777035-07:00"
                    format: date-time
                    type: string
                id:
                    description: The ID of the run
                    type: string
                startedAt:
                    example: "2021-07-15T07:20:05.777035-07:00"
                    format: date-time
                    type: string
                status:
                    enum:
                        - pending
                        - successful
                        - unsuccessful
                        - canceled
                    type: string
                triggeredBy:
                    description: user who triggered the cron job run
                    type: string
            required:
                - id
                - status
            type: object
        cursor:
            type: string
        customDomain:
            properties:
                createdAt:
                    format: date-time
                    type: string
                domainType:
                    enum:
                        - apex
                        - subdomain
                    type: string
                id:
                    type: string
                name:
                    type: string
                publicSuffix:
                    type: string
                redirectForName:
                    type: string
                server:
                    properties:
                        id:
                            type: string
                        name:
                            type: string
                    type: object
                verificationStatus:
                    enum:
                        - verified
                        - unverified
                    type: string
            required:
                - id
                - name
                - domainType
                - publicSuffix
                - verificationStatus
                - createdAt
                - redirectForName
            type: object
        customDomainWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                customDomain:
                    $ref: '#/components/schemas/customDomain'
            required:
                - customDomain
                - cursor
            type: object
        databaseRole:
            enum:
                - primary
                - replica
            type: string
        databaseStatus:
            enum:
                - creating
                - available
                - unavailable
                - config_restart
                - suspended
                - maintenance_scheduled
                - maintenance_in_progress
                - recovery_failed
                - recovery_in_progress
                - unknown
                - updating_instance
            type: string
        deploy:
            properties:
                commit:
                    properties:
                        createdAt:
                            format: date-time
                            type: string
                        id:
                            type: string
                        message:
                            type: string
                    type: object
                createdAt:
                    format: date-time
                    type: string
                finishedAt:
                    format: date-time
                    type: string
                id:
                    type: string
                image:
                    description: Image information used when creating the deploy. Not present for Git-backed deploys
                    properties:
                        ref:
                            description: Image reference used when creating the deploy
                            type: string
                        registryCredential:
                            description: Name of credential used to pull the image, if provided
                            type: string
                        sha:
                            description: SHA that the image reference was resolved to when creating the deploy
                            type: string
                    type: object
                status:
                    enum:
                        - created
                        - build_in_progress
                        - update_in_progress
                        - live
                        - deactivated
                        - build_failed
                        - update_failed
                        - canceled
                        - pre_deploy_in_progress
                        - pre_deploy_failed
                    type: string
                trigger:
                    enum:
                        - api
                        - blueprint_sync
                        - deploy_hook
                        - deployed_by_render
                        - manual
                        - other
                        - new_commit
                        - rollback
                        - service_resumed
                        - service_updated
                    type: string
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
            type: object
        deployList:
            items:
                $ref: '#/components/schemas/deployWithCursor'
            type: array
        deployWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                deploy:
                    $ref: '#/components/schemas/deploy'
            type: object
        diskSnapshot:
            properties:
                createdAt:
                    format: date-time
                    type: string
                instanceId:
                    $ref: '#/components/schemas/instanceId'
                snapshotKey:
                    type: string
            type: object
        diskWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                disk:
                    properties:
                        createdAt:
                            format: date-time
                            type: string
                        id:
                            $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                        mountPath:
                            type: string
                        name:
                            type: string
                        serviceId:
                            type: string
                        sizeGB:
                            type: integer
                        updatedAt:
                            format: date-time
                            type: string
                    required:
                        - id
                        - name
                        - sizeGB
                        - mountPath
                        - createdAt
                        - updatedAt
                    type: object
            required:
                - disk
                - cursor
            type: object
        dockerDetails:
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    type: string
                preDeployCommand:
                    type: string
                registryCredential:
                    $ref: '#/components/schemas/registryCredential'
            type: object
        dockerDetailsPATCH:
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    type: string
                registryCredentialId:
                    type: string
            type: object
        dockerDetailsPOST:
            properties:
                dockerCommand:
                    type: string
                dockerContext:
                    type: string
                dockerfilePath:
                    description: Defaults to "./Dockerfile"
                    type: string
                registryCredentialId:
                    type: string
            type: object
        envGroup:
            allOf:
                - $ref: '#/components/schemas/envGroupMeta'
                - properties:
                    envVars:
                        items:
                            $ref: '#/components/schemas/envVar'
                        type: array
                    secretFiles:
                        items:
                            $ref: '#/components/schemas/secretFile'
                        type: array
                  required:
                    - envVars
                    - secretFiles
                  type: object
        envGroupMeta:
            properties:
                createdAt:
                    format: date-time
                    type: string
                environmentId:
                    type: string
                id:
                    type: string
                name:
                    type: string
                ownerId:
                    type: string
                serviceLinks:
                    description: List of serviceIds linked to the envGroup
                    items:
                        $ref: '#/components/schemas/serviceLink'
                    type: array
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - name
                - ownerId
                - createdAt
                - updatedAt
                - serviceLinks
            type: object
        envGroupPATCHInput:
            properties:
                name:
                    type: string
            required:
                - name
            type: object
        envGroupPOSTInput:
            properties:
                envVars:
                    $ref: '#/components/schemas/envVarInputArray'
                environmentId:
                    type: string
                name:
                    type: string
                ownerId:
                    type: string
                secretFiles:
                    items:
                        $ref: '#/components/schemas/secretFileInput'
                    type: array
                serviceIds:
                    items:
                        description: List of serviceIds to link the envGroup to
                        type: string
                    type: array
            required:
                - name
                - ownerId
                - envVars
            type: object
        envSpecificDetails:
            allOf:
                - $ref: '#/components/schemas/dockerDetails'
                - $ref: '#/components/schemas/nativeEnvironmentDetails'
        envSpecificDetailsPATCH:
            allOf:
                - $ref: '#/components/schemas/dockerDetailsPATCH'
                - $ref: '#/components/schemas/nativeEnvironmentDetailsPATCH'
        envSpecificDetailsPOST:
            allOf:
                - $ref: '#/components/schemas/dockerDetailsPOST'
                - $ref: '#/components/schemas/nativeEnvironmentDetailsPOST'
        envVar:
            properties:
                key:
                    type: string
                value:
                    type: string
            required:
                - key
                - value
            type: object
        envVarGenerateValue:
            properties:
                generateValue:
                    type: boolean
            required:
                - generateValue
            type: object
        envVarInput:
            allOf:
                - $ref: '#/components/schemas/envVarKeyValue'
                - $ref: '#/components/schemas/envVarKeyGenerateValue'
            type: object
        envVarInputArray:
            items:
                $ref: '#/components/schemas/envVarInput'
            type: array
        envVarKeyGenerateValue:
            properties:
                generateValue:
                    type: boolean
                key:
                    type: string
            type: object
        envVarKeyValue:
            properties:
                key:
                    type: string
                value:
                    type: string
            type: object
        envVarValue:
            properties:
                value:
                    type: string
            required:
                - value
            type: object
        envVarWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                envVar:
                    $ref: '#/components/schemas/envVar'
            required:
                - envVar
                - cursor
            type: object
        environment:
            properties:
                databasesIds:
                    items:
                        type: string
                    type: array
                envGroupIds:
                    items:
                        type: string
                    type: array
                id:
                    type: string
                name:
                    type: string
                projectId:
                    type: string
                protectedStatus:
                    $ref: '#/components/schemas/protectedStatus'
                redisIds:
                    items:
                        type: string
                    type: array
                serviceIds:
                    items:
                        type: string
                    type: array
            required:
                - id
                - name
                - projectId
                - databasesIds
                - redisIds
                - serviceIds
                - envGroupIds
                - protectedStatus
            type: object
        environmentPATCHInput:
            properties:
                name:
                    type: string
                protectedStatus:
                    $ref: '#/components/schemas/protectedStatus'
            type: object
        environmentPOSTInput:
            properties:
                name:
                    type: string
                projectId:
                    type: string
                protectedStatus:
                    $ref: '#/components/schemas/protectedStatus'
            required:
                - name
                - projectId
            type: object
        environmentResourcesPOSTInput:
            properties:
                resourceIds:
                    items:
                        description: The ID of an env group, a service, a PostgreSQL database, or a Redis instance
                        type: string
                    type: array
            required:
                - resourceIds
            type: object
        environmentWithCursor:
            description: An environment with a cursor
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                environment:
                    $ref: '#/components/schemas/environment'
            required:
                - environment
                - cursor
            type: object
        error:
            properties:
                id:
                    type: string
                message:
                    type: string
            type: object
        header:
            properties:
                id:
                    type: string
                name:
                    type: string
                path:
                    type: string
                value:
                    type: string
            required:
                - id
                - path
                - name
                - value
            type: object
        headerInput:
            properties:
                name:
                    description: Header name
                    example: Cache-Control
                    type: string
                path:
                    description: The request path to add the header to. Wildcards will cause headers to be applied to all matching paths.
                    example: /static/*
                    type: string
                value:
                    description: Header value
                    example: public, max-age=604800
                    type: string
            required:
                - path
                - name
                - value
            type: object
        headerWithCursor:
            properties:
                cursor:
                    type: string
                header:
                    $ref: '#/components/schemas/header'
            required:
                - header
                - cursor
            type: object
        image:
            properties:
                imagePath:
                    description: Path to the image used for this server (e.g docker.io/library/nginx:latest).
                    type: string
                ownerId:
                    description: The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
                    type: string
                registryCredentialId:
                    description: Optional reference to the registry credential passed to the image repository to retrieve this image.
                    type: string
            required:
                - imagePath
                - ownerId
            type: object
        instanceId:
            description: When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
            type: string
        listServices:
            $ref: '#/components/schemas/serviceList'
        listServicesResponse:
            $ref: '#/components/schemas/serviceWithCursor'
        maintenanceMode:
            properties:
                enabled:
                    type: boolean
                uri:
                    description: The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served.
                    type: string
            required:
                - enabled
                - uri
            type: object
        maxShutdownDelaySeconds:
            default: 30
            description: The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.
            maximum: 300
            minimum: 1
            type: integer
        maxmemoryPolicy:
            description: The eviction policy for the Redis instance
            enum:
                - noeviction
                - allkeys_lfu
                - allkeys_lru
                - allkeys_random
                - volatile_lfu
                - volatile_lru
                - volatile_random
                - volatile_ttl
            type: string
        nativeEnvironmentDetails:
            properties:
                buildCommand:
                    type: string
                preDeployCommand:
                    type: string
                startCommand:
                    type: string
            type: object
        nativeEnvironmentDetailsPATCH:
            properties:
                buildCommand:
                    type: string
                startCommand:
                    type: string
            type: object
        nativeEnvironmentDetailsPOST:
            description: Fields for native environment (runtime) services
            properties:
                buildCommand:
                    type: string
                startCommand:
                    type: string
            type: object
        notificationOverrideWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                override:
                    properties:
                        notificationsToSend:
                            $ref: '#/paths/~1notification-settings~1overrides~1services~1%7BserviceId%7D/patch/requestBody/content/application~1json/schema/properties/notificationsToSend'
                        previewNotificationsEnabled:
                            $ref: '#/paths/~1notification-settings~1overrides~1services~1%7BserviceId%7D/patch/requestBody/content/application~1json/schema/properties/previewNotificationsEnabled'
                        serviceId:
                            type: string
                    required:
                        - type
                        - serviceId
                        - previewNotificationsEnabled
                        - notificationsToSend
                    type: object
            required:
                - override
                - cursor
            type: object
        notifySetting:
            enum:
                - default
                - notify
                - ignore
            type: string
        owner:
            properties:
                email:
                    type: string
                id:
                    type: string
                name:
                    type: string
                twoFactorAuthEnabled:
                    description: Whether two-factor authentication is enabled for the owner. Only present for user owners.
                    type: boolean
                type:
                    enum:
                        - user
                        - team
                    type: string
            required:
                - id
                - name
                - email
                - type
            type: object
        ownerWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                owner:
                    $ref: '#/components/schemas/owner'
            type: object
        paidPlan:
            default: starter
            description: Defaults to "starter"
            enum:
                - starter
                - standard
                - pro
                - pro_plus
                - pro_max
                - pro_ultra
            type: string
        plan:
            description: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
            enum:
                - starter
                - starter_plus
                - standard
                - standard_plus
                - pro
                - pro_plus
                - pro_max
                - pro_ultra
                - free
                - custom
            example: starter
            type: string
        postgres:
            properties:
                createdAt:
                    format: date-time
                    type: string
                dashboardUrl:
                    description: The URL to view the PostgreSQL instance in the Render Dashboard
                    type: string
                databaseName:
                    type: string
                databaseUser:
                    type: string
                diskSizeGB:
                    type: integer
                environmentId:
                    type: string
                expiresAt:
                    description: The time at which the database will be expire. Applies to free tier databases only.
                    format: date-time
                    type: string
                highAvailabilityEnabled:
                    type: boolean
                id:
                    type: string
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                name:
                    type: string
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    enum:
                        - free
                        - starter
                        - standard
                        - pro
                        - pro_plus
                        - custom
                        - basic_256mb
                        - basic_1gb
                        - basic_4gb
                        - pro_4gb
                        - pro_8gb
                        - pro_16gb
                        - pro_32gb
                        - pro_64gb
                        - pro_128gb
                        - pro_192gb
                        - pro_256gb
                        - pro_384gb
                        - pro_512gb
                        - accelerated_16gb
                        - accelerated_32gb
                        - accelerated_64gb
                        - accelerated_128gb
                        - accelerated_256gb
                        - accelerated_384gb
                        - accelerated_512gb
                        - accelerated_768gb
                        - accelerated_1024gb
                    type: string
                primaryPostgresID:
                    type: string
                readReplicas:
                    $ref: '#/components/schemas/readReplicas'
                region:
                    $ref: '#/components/schemas/region'
                role:
                    $ref: '#/components/schemas/databaseRole'
                status:
                    $ref: '#/components/schemas/databaseStatus'
                suspended:
                    enum:
                        - suspended
                        - not_suspended
                    type: string
                suspenders:
                    items:
                        $ref: '#/components/schemas/suspenderType'
                    type: array
                updatedAt:
                    format: date-time
                    type: string
                version:
                    $ref: '#/components/schemas/postgresVersion'
            required:
                - id
                - ipAllowList
                - createdAt
                - updatedAt
                - databaseName
                - databaseUser
                - highAvailabilityEnabled
                - name
                - owner
                - plan
                - region
                - readReplicas
                - role
                - status
                - version
                - suspended
                - suspenders
                - dashboardUrl
            type: object
        postgresConnectionInfo:
            properties:
                externalConnectionString:
                    format: password
                    type: string
                internalConnectionString:
                    format: password
                    type: string
                password:
                    format: password
                    type: string
                psqlCommand:
                    format: password
                    type: string
            required:
                - password
                - internalConnectionString
                - externalConnectionString
                - psqlCommand
            type: object
        postgresDetail:
            properties:
                createdAt:
                    format: date-time
                    type: string
                dashboardUrl:
                    description: The URL to view the PostgreSQL instance in the Render Dashboard
                    type: string
                databaseName:
                    type: string
                databaseUser:
                    type: string
                diskSizeGB:
                    type: integer
                environmentId:
                    type: string
                expiresAt:
                    description: The time at which the database will be expire. Applies to free tier databases only.
                    format: date-time
                    type: string
                highAvailabilityEnabled:
                    type: boolean
                id:
                    type: string
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                maintenance:
                    $ref: '#/components/schemas/redisDetail/properties/maintenance'
                name:
                    type: string
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    $ref: '#/components/schemas/postgres/properties/plan'
                primaryPostgresID:
                    type: string
                readReplicas:
                    $ref: '#/components/schemas/readReplicas'
                region:
                    $ref: '#/components/schemas/region'
                role:
                    $ref: '#/components/schemas/databaseRole'
                status:
                    $ref: '#/components/schemas/databaseStatus'
                suspended:
                    enum:
                        - suspended
                        - not_suspended
                    type: string
                suspenders:
                    items:
                        $ref: '#/components/schemas/suspenderType'
                    type: array
                updatedAt:
                    format: date-time
                    type: string
                version:
                    $ref: '#/components/schemas/postgresVersion'
            required:
                - id
                - ipAllowList
                - createdAt
                - updatedAt
                - dashboardUrl
                - databaseName
                - databaseUser
                - highAvailabilityEnabled
                - name
                - owner
                - plan
                - region
                - readReplicas
                - role
                - status
                - version
                - suspended
                - suspenders
            type: object
        postgresPATCHInput:
            properties:
                datadogAPIKey:
                    type: string
                diskSizeGB:
                    description: The number of gigabytes of disk space to allocate for the database
                    type: integer
                enableHighAvailability:
                    type: boolean
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                name:
                    type: string
                plan:
                    $ref: '#/components/schemas/postgres/properties/plan'
                readReplicas:
                    $ref: '#/components/schemas/readReplicasInput'
            type: object
        postgresPOSTInput:
            description: Input for creating a database
            properties:
                databaseName:
                    default: randomly generated
                    type: string
                databaseUser:
                    default: randomly generated
                    type: string
                datadogAPIKey:
                    type: string
                diskSizeGB:
                    description: The number of gigabytes of disk space to allocate for the database
                    type: integer
                enableHighAvailability:
                    default: false
                    type: boolean
                environmentId:
                    type: string
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                name:
                    description: The name of the database as it will appear in the Render Dashboard
                    type: string
                ownerId:
                    description: The ID of the owner (team or personal user) whose resources should be returned
                    type: string
                plan:
                    $ref: '#/components/schemas/postgres/properties/plan'
                readReplicas:
                    $ref: '#/components/schemas/readReplicasInput'
                region:
                    type: string
                version:
                    $ref: '#/components/schemas/postgresVersion'
            required:
                - name
                - plan
                - ownerId
                - version
            type: object
        postgresVersion:
            description: The PostgreSQL version
            enum:
                - "11"
                - "12"
                - "13"
                - "14"
                - "15"
                - "16"
            type: string
        postgresWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                postgres:
                    $ref: '#/components/schemas/postgres'
            required:
                - postgres
                - cursor
            type: object
        previewInput:
            properties:
                imagePath:
                    description: 'Must be either a full URL or the relative path to an image. If a relative path, Render uses the base service''s image URL as its root. For example, if the base service''s image URL is `docker.io/library/nginx:latest`, then valid values are: `docker.io/library/nginx:<any tag or SHA>`, `library/nginx:<any tag or SHA>`, or `nginx:<any tag or SHA>`. Note that the path must match (only the tag or SHA can vary).'
                    example: docker.io/library/nginx:latest
                    type: string
                name:
                    description: A name for the service preview instance. If not specified, Render generates the name using the base service's name and the specified tag or SHA.
                    example: preview
                    type: string
                plan:
                    $ref: '#/components/schemas/plan'
            required:
                - imagePath
            type: object
        previews:
            properties:
                generation:
                    default: "off"
                    description: Defaults to "off"
                    enum:
                        - "off"
                        - manual
                        - automatic
                    type: string
            type: object
        privateService:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsPOST'
                    type:
                        default: private_service
                        type: string
                  type: object
            title: PrivateService
        privateServiceDetails:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    $ref: '#/components/schemas/webServiceDetails/properties/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                openPorts:
                    items:
                        $ref: '#/components/schemas/serverPort'
                    type: array
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
                url:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
                - openPorts
                - url
            type: object
        privateServiceDetailsOutput:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    $ref: '#/components/schemas/webServiceDetails/properties/disk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                openPorts:
                    items:
                        $ref: '#/components/schemas/serverPort'
                    type: array
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
                url:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
                - openPorts
                - url
            type: object
        privateServiceDetailsPATCH:
            properties:
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPATCH'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            type: object
        privateServiceDetailsPOST:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                disk:
                    $ref: '#/components/schemas/serviceDisk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPOST'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    default: 1
                    description: Defaults to 1
                    minimum: 1
                    type: integer
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            required:
                - runtime
            type: object
        privateServiceOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsOutput'
                    type:
                        default: private_service
                        type: string
                  type: object
            title: PrivateService
        privateServicePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/privateServiceDetailsPATCH'
                    type:
                        default: private_service
                        type: string
                  type: object
            title: PrivateService
        project:
            description: A project is a collection of environments
            properties:
                createdAt:
                    format: date-time
                    type: string
                environmentIds:
                    description: The environments associated with the project
                    items:
                        description: The ID of the environment
                        type: string
                    type: array
                id:
                    description: The ID of the project
                    type: string
                name:
                    description: The name of the project
                    type: string
                owner:
                    $ref: '#/components/schemas/owner'
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - createdAt
                - updatedAt
                - name
                - owner
                - environmentIds
            type: object
        projectPATCHInput:
            description: Input type for updating a project
            properties:
                name:
                    type: string
            type: object
        projectPOSTEnvironmentInput:
            properties:
                name:
                    type: string
                protectedStatus:
                    $ref: '#/components/schemas/protectedStatus'
            required:
                - name
            type: object
        projectPOSTInput:
            properties:
                environments:
                    description: The environments to create when creating the project
                    items:
                        $ref: '#/components/schemas/projectPOSTEnvironmentInput'
                    type: array
                name:
                    description: The name of the project
                    type: string
                ownerId:
                    description: The ID of the owner that the project belongs to
                    type: string
            required:
                - name
                - ownerId
                - environments
            type: object
        projectWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                project:
                    $ref: '#/components/schemas/project'
            required:
                - project
                - cursor
            type: object
        protectedStatus:
            description: Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
            enum:
                - unprotected
                - protected
            type: string
        pullRequestPreviewsEnabled:
            default: "no"
            deprecated: true
            description: This field has been deprecated. previews.generation should be used in its place.
            enum:
                - "yes"
                - "no"
            type: string
        readReplica:
            properties:
                id:
                    description: The replica instance identifier.
                    type: string
                name:
                    description: The display name of the replica instance.
                    type: string
            required:
                - id
                - name
            type: object
        readReplicaInput:
            properties:
                name:
                    description: The display name of the replica instance.
                    type: string
            required:
                - name
            type: object
        readReplicas:
            items:
                $ref: '#/components/schemas/readReplica'
            type: array
        readReplicasInput:
            items:
                $ref: '#/components/schemas/readReplicaInput'
            type: array
        redis:
            description: A Redis instance
            properties:
                createdAt:
                    description: The creation time of the Redis instance
                    format: date-time
                    type: string
                dashboardUrl:
                    description: The URL to view the Redis instance in the Render Dashboard
                    type: string
                environmentId:
                    description: The ID of the environment the Redis instance is associated with
                    type: string
                id:
                    description: The ID of the Redis instance
                    type: string
                ipAllowList:
                    description: The IP allow list for the Redis instance
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                name:
                    description: The name of the Redis instance
                    type: string
                options:
                    $ref: '#/components/schemas/redisOptions'
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    $ref: '#/components/schemas/redisPlan'
                region:
                    $ref: '#/components/schemas/region'
                status:
                    $ref: '#/components/schemas/databaseStatus'
                updatedAt:
                    description: The last updated time of the Redis instance
                    format: date-time
                    type: string
                version:
                    description: The version of Redis
                    type: string
            required:
                - id
                - createdAt
                - updatedAt
                - status
                - region
                - plan
                - name
                - owner
                - options
                - ipAllowList
                - version
                - dashboardUrl
            type: object
        redisConnectionInfo:
            description: A Redis instance
            properties:
                externalConnectionString:
                    description: The connection string to use from outside Render
                    format: password
                    type: string
                internalConnectionString:
                    description: The connection string to use from within Render
                    type: string
                redisCLICommand:
                    description: The Redis CLI command to connect to the Redis instance
                    format: password
                    type: string
            required:
                - internalConnectionString
                - externalConnectionString
                - redisCLICommand
            type: object
        redisDetail:
            description: A Redis instance
            properties:
                createdAt:
                    description: The creation time of the Redis instance
                    format: date-time
                    type: string
                environmentId:
                    description: The ID of the environment the Redis instance is associated with
                    type: string
                id:
                    description: The ID of the Redis instance
                    type: string
                ipAllowList:
                    description: The IP allow list for the Redis instance
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                maintenance:
                    properties:
                        id:
                            $ref: '#/paths/~1maintenance~1%7BmaintenanceRunParam%7D/get/parameters/0/schema'
                        pendingMaintenanceBy:
                            description: If present, the maintenance run cannot be scheduled for later than this date-time.
                            format: date-time
                            type: string
                        scheduledAt:
                            format: date-time
                            type: string
                        state:
                            $ref: '#/paths/~1maintenance/get/parameters/2/schema/items'
                        type:
                            type: string
                    required:
                        - id
                        - type
                        - scheduledAt
                        - state
                    type: object
                name:
                    description: The name of the Redis instance
                    type: string
                options:
                    $ref: '#/components/schemas/redisOptions'
                owner:
                    $ref: '#/components/schemas/owner'
                plan:
                    $ref: '#/components/schemas/redisPlan'
                region:
                    $ref: '#/components/schemas/region'
                status:
                    $ref: '#/components/schemas/databaseStatus'
                updatedAt:
                    description: The last updated time of the Redis instance
                    format: date-time
                    type: string
                version:
                    description: The version of Redis
                    type: string
            required:
                - id
                - createdAt
                - updatedAt
                - status
                - region
                - plan
                - name
                - owner
                - options
                - ipAllowList
                - version
            type: object
        redisOptions:
            description: Options for a Redis instance
            properties:
                maxmemoryPolicy:
                    type: string
            type: object
        redisPATCHInput:
            description: Input type for updating a Redis instance
            properties:
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                maxmemoryPolicy:
                    $ref: '#/components/schemas/maxmemoryPolicy'
                name:
                    description: The name of the Redis instance
                    type: string
                plan:
                    $ref: '#/components/schemas/redisPlan'
            type: object
        redisPOSTInput:
            description: Input type for creating a Redis instance
            properties:
                environmentId:
                    type: string
                ipAllowList:
                    items:
                        $ref: '#/components/schemas/cidrBlockAndDescription'
                    type: array
                maxmemoryPolicy:
                    $ref: '#/components/schemas/maxmemoryPolicy'
                name:
                    description: The name of the Redis instance
                    type: string
                ownerId:
                    description: The ID of the owner of the Redis instance
                    type: string
                plan:
                    $ref: '#/components/schemas/redisPlan'
                region:
                    description: The region where the Redis instance is located
                    type: string
            required:
                - name
                - ownerId
                - plan
            type: object
        redisPlan:
            enum:
                - free
                - starter
                - standard
                - pro
                - pro_plus
                - custom
            type: string
        region:
            default: oregon
            description: Defaults to "oregon"
            enum:
                - frankfurt
                - oregon
                - ohio
                - singapore
                - virginia
            type: string
        registryCredential:
            properties:
                id:
                    description: Unique identifier for this credential
                    type: string
                name:
                    description: Descriptive name for this credential
                    type: string
                registry:
                    $ref: '#/components/schemas/registryCredentialRegistry'
                updatedAt:
                    description: Last updated time for the credential
                    format: date-time
                    type: string
                username:
                    description: The username associated with the credential
                    type: string
            required:
                - id
                - name
                - username
                - registry
                - updatedAt
            type: object
        registryCredentialRegistry:
            description: The registry to use this credential with
            enum:
                - GITHUB
                - GITLAB
                - DOCKER
                - GOOGLE_ARTIFACT
                - AWS_ECR
            type: string
        registryCredentialSummary:
            properties:
                id:
                    type: string
                name:
                    type: string
            required:
                - id
                - name
            type: object
        resource:
            properties:
                id:
                    type: string
                name:
                    type: string
            required:
                - id
                - name
            type: object
        route:
            properties:
                destination:
                    type: string
                id:
                    type: string
                priority:
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0
                    type: integer
                source:
                    type: string
                type:
                    $ref: '#/components/schemas/routeType'
            required:
                - id
                - type
                - source
                - destination
                - priority
            type: object
        routePatch:
            properties:
                priority:
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0. Moves this route to the specified priority and adjusts other route priorities accordingly.
                    type: integer
                    x-go-type: '*int'
            required:
                - priority
            type: object
        routePost:
            properties:
                destination:
                    example: /foo/:bar
                    type: string
                priority:
                    description: Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list.
                    type: integer
                source:
                    example: /:bar/foo
                    type: string
                type:
                    $ref: '#/components/schemas/routeType'
            required:
                - type
                - source
                - destination
            type: object
        routePut:
            properties:
                destination:
                    example: /foo/:bar
                    type: string
                source:
                    example: /:bar/foo
                    type: string
                type:
                    $ref: '#/components/schemas/routeType'
            required:
                - type
                - source
                - destination
            type: object
        routeType:
            enum:
                - redirect
                - rewrite
            type: string
        routeWithCursor:
            properties:
                cursor:
                    type: string
                route:
                    $ref: '#/components/schemas/route'
            required:
                - route
                - cursor
            type: object
        secretFile:
            properties:
                content:
                    type: string
                name:
                    type: string
            required:
                - name
                - content
            type: object
        secretFileInput:
            properties:
                content:
                    type: string
                name:
                    type: string
            required:
                - name
                - content
            type: object
        secretFileWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                secretFile:
                    $ref: '#/components/schemas/secretFile'
            required:
                - secretFile
                - cursor
            type: object
        serverPort:
            properties:
                port:
                    example: 10000
                    type: integer
                protocol:
                    enum:
                        - TCP
                        - UDP
                    type: string
            required:
                - port
                - protocol
            type: object
        service:
            properties:
                autoDeploy:
                    $ref: '#/components/schemas/autoDeploy'
                branch:
                    type: string
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                createdAt:
                    format: date-time
                    type: string
                dashboardUrl:
                    description: The URL to view the service in the Render Dashboard
                    type: string
                environmentId:
                    type: string
                id:
                    type: string
                imagePath:
                    type: string
                name:
                    type: string
                notifyOnFail:
                    $ref: '#/components/schemas/notifySetting'
                ownerId:
                    type: string
                registryCredential:
                    $ref: '#/components/schemas/registryCredentialSummary'
                repo:
                    example: https://github.com/render-examples/flask-hello-world
                    type: string
                rootDir:
                    type: string
                slug:
                    type: string
                suspended:
                    enum:
                        - suspended
                        - not_suspended
                    type: string
                suspenders:
                    items:
                        $ref: '#/components/schemas/suspenderType'
                    type: array
                updatedAt:
                    format: date-time
                    type: string
            required:
                - id
                - name
                - ownerId
                - type
                - createdAt
                - dashboardUrl
                - updatedAt
                - suspended
                - suspenders
                - autoDeploy
                - notifyOnFail
                - slug
                - serviceDetails
                - rootDir
            type: object
        serviceAndDeploy:
            properties:
                deployId:
                    type: string
                service:
                    $ref: '#/components/schemas/service'
            type: object
        serviceDisk:
            properties:
                mountPath:
                    type: string
                name:
                    type: string
                sizeGB:
                    description: Defaults to 1
                    minimum: 1
                    type: integer
            required:
                - name
                - mountPath
            type: object
        serviceEnv:
            deprecated: true
            description: This field has been deprecated, runtime should be used in its place.
            enum:
                - docker
                - elixir
                - go
                - node
                - python
                - ruby
                - rust
                - image
            type: string
        serviceEventWithCursor:
            description: A service event with a cursor
            properties:
                event:
                    properties:
                        details:
                            oneOf:
                                - properties:
                                    deployId:
                                        type: string
                                  required:
                                    - deployId
                                  type: object
                                - properties:
                                    fromConfig:
                                        $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                                    toConfig:
                                        $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                                  required:
                                    - toConfig
                                  type: object
                                - properties:
                                    fromInstances:
                                        type: integer
                                    toInstances:
                                        type: integer
                                  required:
                                    - fromInstances
                                    - toInstances
                                  type: object
                                - properties:
                                    currentCPU:
                                        type: integer
                                        x-go-type: int64
                                    currentMemory:
                                        type: integer
                                        x-go-type: int64
                                    fromInstances:
                                        type: integer
                                    targetCPU:
                                        type: integer
                                        x-go-type: int64
                                    targetMemory:
                                        type: integer
                                        x-go-type: int64
                                    toInstances:
                                        type: integer
                                  required:
                                    - fromInstances
                                    - toInstances
                                  type: object
                                - properties:
                                    deletedBranch:
                                        type: string
                                    newBranch:
                                        type: string
                                  required:
                                    - deletedBranch
                                    - newBranch
                                  type: object
                                - properties:
                                    buildId:
                                        type: string
                                    reason:
                                        properties:
                                            buildFailed:
                                                $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/5/properties/reason/properties/newBuild'
                                            failure:
                                                $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/reason'
                                            newBuild:
                                                properties:
                                                    id:
                                                        type: string
                                                required:
                                                    - id
                                                type: object
                                            newDeploy:
                                                $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/5/properties/reason/properties/newBuild'
                                        type: object
                                    status:
                                        type: integer
                                  required:
                                    - buildId
                                    - status
                                    - reason
                                  type: object
                                - properties:
                                    from:
                                        type: string
                                    to:
                                        type: string
                                  required:
                                    - from
                                    - to
                                  type: object
                                - properties:
                                    buildId:
                                        type: string
                                    trigger:
                                        properties:
                                            clearCache:
                                                description: Whether the cache was cleared for the deploy
                                                type: boolean
                                            deployedByRender:
                                                description: Deploy was triggered by Render
                                                type: boolean
                                            envUpdated:
                                                description: Deploy was triggered by an environment update
                                                type: boolean
                                            firstBuild:
                                                description: Deploy was triggered by service creation
                                                type: boolean
                                            manual:
                                                description: Deploy was triggered manually from the dashboard
                                                type: boolean
                                            newCommit:
                                                description: Commit that triggered the deploy
                                                type: string
                                            rollback:
                                                description: Whether the deploy was triggered by a rollback
                                                type: boolean
                                            rollbackTargetDeployId:
                                                description: Deploy ID that was rolled back to
                                                type: string
                                            updatedProperty:
                                                description: Updated property that triggered the deploy
                                                type: string
                                            user:
                                                $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/user'
                                        required:
                                            - firstBuild
                                            - envUpdated
                                            - manual
                                            - deployedByRender
                                            - clearCache
                                            - rollback
                                        type: object
                                  required:
                                    - buildId
                                    - trigger
                                  type: object
                                - properties:
                                    id:
                                        description: the commit id
                                        type: string
                                    url:
                                        description: the commit url
                                        type: string
                                  required:
                                    - id
                                    - url
                                  type: object
                                - properties:
                                    cronJobRunId:
                                        type: string
                                    reason:
                                        properties:
                                            evicted:
                                                type: boolean
                                            nonZeroExit:
                                                type: integer
                                            oomKilled:
                                                properties:
                                                    memoryLimit:
                                                        type: string
                                                required:
                                                    - memoryLimit
                                                type: object
                                            timedOutReason:
                                                type: string
                                            timedOutSeconds:
                                                format: int64
                                                type: integer
                                            unhealthy:
                                                type: string
                                        required:
                                            - evicted
                                        type: object
                                    status:
                                        enum:
                                            - canceled
                                            - pending
                                            - successful
                                            - unsuccessful
                                        type: string
                                    user:
                                        description: User who triggered the action
                                        properties:
                                            email:
                                                type: string
                                            id:
                                                type: string
                                        required:
                                            - id
                                            - email
                                        type: object
                                  required:
                                    - cronJobRunId
                                    - status
                                  type: object
                                - properties:
                                    cronJobRunId:
                                        type: string
                                  required:
                                    - cronJobRunId
                                  type: object
                                - properties:
                                    deployId:
                                        type: string
                                    reason:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/5/properties/reason'
                                    status:
                                        type: integer
                                  required:
                                    - deployId
                                    - reason
                                    - status
                                  type: object
                                - properties:
                                    deployId:
                                        type: string
                                    trigger:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/7/properties/trigger'
                                  required:
                                    - deployId
                                    - trigger
                                  type: object
                                - properties:
                                    diskId:
                                        $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                                    sizeGB:
                                        type: integer
                                  required:
                                    - diskId
                                    - sizeGB
                                  type: object
                                - properties:
                                    diskId:
                                        $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                                    fromSizeGB:
                                        type: integer
                                    toSizeGB:
                                        type: integer
                                  required:
                                    - diskId
                                    - fromSizeGB
                                    - toSizeGB
                                  type: object
                                - properties:
                                    diskId:
                                        $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                                  required:
                                    - diskId
                                  type: object
                                - properties:
                                    imageURL:
                                        type: string
                                    message:
                                        type: string
                                  required:
                                    - message
                                    - imageURL
                                  type: object
                                - properties:
                                    deployId:
                                        type: string
                                  required:
                                    - deployId
                                  type: object
                                - properties:
                                    fromInstances:
                                        type: integer
                                    toInstances:
                                        type: integer
                                  required:
                                    - fromInstances
                                    - toInstances
                                  type: object
                                - properties:
                                    jobId:
                                        $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs~1%7BjobId%7D/parameters/1/schema'
                                    reason:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/reason'
                                    status:
                                        $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs/post/responses/200/content/application~1json/schema/properties/status'
                                  required:
                                    - jobId
                                    - status
                                  type: object
                                - properties:
                                    enabled:
                                        type: boolean
                                  required:
                                    - enabled
                                  type: object
                                - properties:
                                    fromURI:
                                        type: string
                                    toURI:
                                        type: string
                                  required:
                                    - fromURI
                                    - toURI
                                  type: object
                                - type: object
                                - properties:
                                    trigger:
                                        properties:
                                            manual:
                                                description: Maintenance was triggered manually
                                                type: boolean
                                            startedByRender:
                                                description: Maintenance was triggered by Render
                                                type: boolean
                                            user:
                                                $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/user'
                                        required:
                                            - manual
                                            - startedByRender
                                        type: object
                                  required:
                                    - trigger
                                  type: object
                                - properties:
                                    from:
                                        type: string
                                    to:
                                        type: string
                                  required:
                                    - from
                                    - to
                                  type: object
                                - properties:
                                    deployCommandExecutionId:
                                        type: string
                                    deployId:
                                        type: string
                                    reason:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/5/properties/reason'
                                    status:
                                        type: integer
                                  required:
                                    - deployCommandExecutionId
                                    - deployId
                                    - status
                                    - reason
                                  type: object
                                - properties:
                                    deployCommandExecutionId:
                                        type: string
                                    deployId:
                                        type: string
                                  required:
                                    - deployCommandExecutionId
                                    - deployId
                                  type: object
                                - type: object
                                - properties:
                                    reason:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/reason'
                                  type: object
                                - type: object
                                - properties:
                                    triggeredByUser:
                                        nullable: true
                                        type: string
                                  required:
                                    - triggeredByUser
                                  type: object
                                - type: object
                                - type: object
                                - type: object
                                - properties:
                                    actor:
                                        type: string
                                    suspendedByUser:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/user'
                                  required:
                                    - actor
                                  type: object
                                - properties:
                                    actor:
                                        type: string
                                    resumedByUser:
                                        $ref: '#/components/schemas/serviceEventWithCursor/properties/event/properties/details/oneOf/9/properties/user'
                                  required:
                                    - actor
                                  type: object
                                - type: object
                                - properties:
                                    trigger:
                                        type: string
                                  required:
                                    - trigger
                                  type: object
                        id:
                            type: string
                        serviceId:
                            type: string
                        timestamp:
                            format: date-time
                            type: string
                        type:
                            $ref: '#/components/parameters/eventTypeParam/schema/anyOf/0'
                    required:
                        - id
                        - timestamp
                        - serviceId
                        - type
                        - details
                    type: object
            required:
                - event
                - cursor
            type: object
        serviceLink:
            properties:
                id:
                    type: string
                name:
                    type: string
                type:
                    $ref: '#/components/schemas/serviceTypeShort'
            required:
                - id
                - name
                - type
            type: object
        serviceList:
            items:
                $ref: '#/components/schemas/listServicesResponse'
            type: array
        servicePATCH:
            properties:
                autoDeploy:
                    $ref: '#/components/schemas/autoDeploy'
                branch:
                    type: string
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                image:
                    $ref: '#/components/schemas/image'
                name:
                    type: string
                repo:
                    type: string
                rootDir:
                    type: string
            type: object
        servicePOST:
            properties:
                autoDeploy:
                    $ref: '#/components/schemas/autoDeploy'
                branch:
                    description: If left empty, this will fall back to the default branch of the repository
                    type: string
                buildFilter:
                    $ref: '#/components/schemas/buildFilter'
                envVars:
                    $ref: '#/components/schemas/envVarInputArray'
                image:
                    $ref: '#/components/schemas/image'
                name:
                    type: string
                ownerId:
                    type: string
                repo:
                    description: Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
                    example: https://github.com/render-examples/flask-hello-world
                    type: string
                rootDir:
                    type: string
                secretFiles:
                    items:
                        $ref: '#/components/schemas/secretFileInput'
                    type: array
            required:
                - type
                - name
                - ownerId
            type: object
        serviceRuntime:
            description: Runtime
            enum:
                - docker
                - elixir
                - go
                - node
                - python
                - ruby
                - rust
                - image
            type: string
        serviceType:
            enum:
                - static_site
                - web_service
                - private_service
                - background_worker
                - cron_job
            type: string
        serviceTypeShort:
            enum:
                - static
                - web
                - pserv
                - worker
                - cron
            type: string
        serviceWithCursor:
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                service:
                    discriminator:
                        mapping:
                            background_worker: '#/components/schemas/backgroundWorkerOutput'
                            cron_job: '#/components/schemas/cronJobOutput'
                            private_service: '#/components/schemas/privateServiceOutput'
                            static_site: '#/components/schemas/staticSiteOutput'
                            web_service: '#/components/schemas/webServiceOutput'
                        propertyName: type
                    oneOf:
                        - $ref: '#/components/schemas/backgroundWorkerOutput'
                        - $ref: '#/components/schemas/cronJobOutput'
                        - $ref: '#/components/schemas/privateServiceOutput'
                        - $ref: '#/components/schemas/staticSiteOutput'
                        - $ref: '#/components/schemas/webServiceOutput'
            type: object
        snapshotRestorePOST:
            properties:
                instanceId:
                    $ref: '#/components/schemas/instanceId'
                snapshotKey:
                    type: string
            required:
                - snapshotKey
            type: object
        sshAddress:
            description: The SSH address for the service. Only present for services that have SSH enabled.
            type: string
        staticSite:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsPOST'
                    type:
                        default: static_site
                        type: string
                  type: object
            title: StaticSite
        staticSiteDetails:
            properties:
                buildCommand:
                    type: string
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                parentServer:
                    $ref: '#/components/schemas/resource'
                previews:
                    $ref: '#/components/schemas/previews'
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                url:
                    type: string
            required:
                - buildCommand
                - publishPath
                - url
                - buildPlan
            type: object
        staticSiteDetailsOutput:
            properties:
                buildCommand:
                    type: string
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                parentServer:
                    $ref: '#/components/schemas/resource'
                previews:
                    $ref: '#/components/schemas/previews'
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                url:
                    type: string
            required:
                - buildCommand
                - publishPath
                - url
                - buildPlan
            type: object
        staticSiteDetailsPATCH:
            properties:
                buildCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                publishPath:
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
            type: object
        staticSiteDetailsPOST:
            properties:
                buildCommand:
                    type: string
                headers:
                    items:
                        $ref: '#/components/schemas/headerInput'
                    type: array
                previews:
                    $ref: '#/components/schemas/previews'
                publishPath:
                    description: Defaults to "public"
                    type: string
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                routes:
                    items:
                        $ref: '#/components/schemas/routePost'
                    type: array
            type: object
        staticSiteOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsOutput'
                    type:
                        default: static_site
                        type: string
                  type: object
            title: StaticSite
        staticSitePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/staticSiteDetailsPATCH'
                    type:
                        default: static_site
                        type: string
                  type: object
            title: StaticSite
        suspenderType:
            enum:
                - admin
                - billing
                - user
                - parent_service
                - unknown
            type: string
        syncWithCursor:
            description: A blueprint sync with a cursor
            properties:
                cursor:
                    $ref: '#/components/schemas/cursor'
                sync:
                    properties:
                        commit:
                            properties:
                                id:
                                    type: string
                            required:
                                - id
                            type: object
                        completedAt:
                            format: date-time
                            type: string
                        id:
                            example: exe-cph1rs3idesc73a2b2mg
                            pattern: ^exe-[0-9a-z]{20}$
                            type: string
                        startedAt:
                            format: date-time
                            type: string
                        state:
                            enum:
                                - created
                                - pending
                                - running
                                - error
                                - success
                            type: string
                    required:
                        - id
                        - commit
                        - state
                    type: object
            required:
                - sync
                - cursor
            type: object
        webService:
            allOf:
                - $ref: '#/components/schemas/servicePOST'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsPOST'
                    type:
                        default: web_service
                        type: string
                  type: object
            title: WebService
        webServiceDetails:
            properties:
                autoscaling:
                    properties:
                        criteria:
                            properties:
                                cpu:
                                    properties:
                                        enabled:
                                            default: false
                                            type: boolean
                                        percentage:
                                            description: |
                                                Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
                                            type: integer
                                    required:
                                        - enabled
                                        - percentage
                                    type: object
                                memory:
                                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling/properties/criteria/properties/cpu'
                            required:
                                - cpu
                                - memory
                            type: object
                        enabled:
                            default: false
                            type: boolean
                        max:
                            description: The maximum number of instances for the service
                            type: integer
                        min:
                            description: The minimum number of instances for the service
                            type: integer
                    required:
                        - enabled
                        - min
                        - max
                        - criteria
                    type: object
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    properties:
                        id:
                            $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                        mountPath:
                            type: string
                        name:
                            type: string
                        sizeGB:
                            type: integer
                    required:
                        - id
                        - name
                        - sizeGB
                        - mountPath
                    type: object
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                healthCheckPath:
                    type: string
                maintenanceMode:
                    $ref: '#/components/schemas/maintenanceMode'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                openPorts:
                    items:
                        $ref: '#/components/schemas/serverPort'
                    type: array
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
                url:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
                - healthCheckPath
                - openPorts
                - url
            type: object
        webServiceDetailsOutput:
            properties:
                autoscaling:
                    properties:
                        criteria:
                            properties:
                                cpu:
                                    properties:
                                        enabled:
                                            default: false
                                            type: boolean
                                        percentage:
                                            description: |
                                                Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
                                            type: integer
                                    required:
                                        - enabled
                                        - percentage
                                    type: object
                                memory:
                                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling/properties/criteria/properties/cpu'
                            required:
                                - cpu
                                - memory
                            type: object
                        enabled:
                            default: false
                            type: boolean
                        max:
                            description: The maximum number of instances for the service
                            type: integer
                        min:
                            description: The minimum number of instances for the service
                            type: integer
                    required:
                        - enabled
                        - min
                        - max
                        - criteria
                    type: object
                buildPlan:
                    $ref: '#/components/schemas/buildPlan'
                disk:
                    properties:
                        id:
                            $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                        mountPath:
                            type: string
                        name:
                            type: string
                        sizeGB:
                            type: integer
                    required:
                        - id
                        - name
                        - sizeGB
                        - mountPath
                    type: object
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetails'
                healthCheckPath:
                    type: string
                maintenanceMode:
                    $ref: '#/components/schemas/maintenanceMode'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
                    type: integer
                openPorts:
                    items:
                        $ref: '#/components/schemas/serverPort'
                    type: array
                parentServer:
                    $ref: '#/components/schemas/resource'
                plan:
                    $ref: '#/components/schemas/plan'
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
                sshAddress:
                    $ref: '#/components/schemas/sshAddress'
                url:
                    type: string
            required:
                - env
                - runtime
                - envSpecificDetails
                - plan
                - region
                - numInstances
                - buildPlan
                - healthCheckPath
                - openPorts
                - url
            type: object
        webServiceDetailsPATCH:
            properties:
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPATCH'
                healthCheckPath:
                    type: string
                maintenanceMode:
                    $ref: '#/components/schemas/maintenanceMode'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            type: object
        webServiceDetailsPOST:
            properties:
                autoscaling:
                    $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                disk:
                    $ref: '#/components/schemas/serviceDisk'
                env:
                    $ref: '#/components/schemas/serviceEnv'
                envSpecificDetails:
                    $ref: '#/components/schemas/envSpecificDetailsPOST'
                healthCheckPath:
                    type: string
                maintenanceMode:
                    $ref: '#/components/schemas/maintenanceMode'
                maxShutdownDelaySeconds:
                    $ref: '#/components/schemas/maxShutdownDelaySeconds'
                numInstances:
                    description: Defaults to 1
                    minimum: 1
                    type: integer
                plan:
                    $ref: '#/components/schemas/paidPlan'
                preDeployCommand:
                    type: string
                previews:
                    $ref: '#/components/schemas/previews'
                pullRequestPreviewsEnabled:
                    $ref: '#/components/schemas/pullRequestPreviewsEnabled'
                region:
                    $ref: '#/components/schemas/region'
                runtime:
                    $ref: '#/components/schemas/serviceRuntime'
            required:
                - runtime
            type: object
        webServiceOutput:
            allOf:
                - $ref: '#/components/schemas/service'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsOutput'
                    type:
                        default: web_service
                        type: string
                  type: object
            title: WebService
        webServicePatch:
            allOf:
                - $ref: '#/components/schemas/servicePATCH'
                - properties:
                    serviceDetails:
                        $ref: '#/components/schemas/webServiceDetailsPATCH'
                    type:
                        default: web_service
                        type: string
                  type: object
            title: WebService
    securitySchemes:
        BearerAuth:
            scheme: bearer
            type: http
info:
    contact:
        email: support@render.com
        name: Render API
        url: https://community.render.com
    description: Manage everything about your Render services
    title: Render Public API
    version: 1.0.0
paths:
    /blueprints:
        get:
            description: |
                List blueprints for the provided owners. If no owners are provided, returns all blueprints you have permissions to view.
            operationId: list-blueprints
            parameters:
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/blueprintWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List blueprints
            tags:
                - Blueprints
    /blueprints/{blueprintId}:
        delete:
            description: |
                Disconnect the blueprint with the provided ID.

                Disconnecting a blueprint stops automatic resource syncing via the associated `render.yaml` file. It does not _delete_ any services or other resources that were managed by the blueprint.
            operationId: disconnect-blueprint
            responses:
                "204":
                    description: Blueprint disconnected
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Disconnect blueprint
            tags:
                - Blueprints
        get:
            description: |
                Retrieve the blueprint with the provided ID.
            operationId: retrieve-blueprint
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    autoSync:
                                        $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/patch/requestBody/content/application~1json/schema/properties/autoSync'
                                    branch:
                                        type: string
                                    id:
                                        $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/parameters/0/schema'
                                    lastSync:
                                        format: date-time
                                        type: string
                                    name:
                                        type: string
                                    repo:
                                        type: string
                                    resources:
                                        items:
                                            properties:
                                                id:
                                                    type: string
                                                name:
                                                    type: string
                                                type:
                                                    description: type of the resource (ex. web_service or postgres)
                                                    enum:
                                                        - static_site
                                                        - web_service
                                                        - private_service
                                                        - background_worker
                                                        - cron_job
                                                        - redis
                                                        - postgres
                                                        - environment_group
                                                    type: string
                                            required:
                                                - id
                                                - name
                                                - type
                                            type: object
                                        type: array
                                    status:
                                        enum:
                                            - created
                                            - paused
                                            - in_sync
                                            - syncing
                                            - error
                                        type: string
                                required:
                                    - id
                                    - name
                                    - status
                                    - autoSync
                                    - repo
                                    - branch
                                    - resources
                                type: object
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve blueprint
            tags:
                - Blueprints
        parameters:
            - description: The ID of the blueprint
              in: path
              name: blueprintId
              required: true
              schema:
                example: exs-cph1rs3idesc73a2b2mg
                pattern: ^exs-[0-9a-z]{20}$
                type: string
        patch:
            description: |
                Update the blueprint with the provided ID.
            operationId: update-blueprint
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                autoSync:
                                    description: Automatically sync changes to render.yaml
                                    type: boolean
                                name:
                                    type: string
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/blueprintWithCursor/properties/blueprint'
                    description: Updated
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update blueprint
            tags:
                - Blueprints
    /blueprints/{blueprintId}/syncs:
        get:
            description: |
                List syncs for the blueprint with the provided ID.
            operationId: list-blueprint-syncs
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/syncWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List blueprint syncs
            tags:
                - Blueprints
        parameters:
            - $ref: '#/paths/~1blueprints~1%7BblueprintId%7D/parameters/0'
            - $ref: '#/components/parameters/cursorParam'
            - $ref: '#/components/parameters/limitParam'
    /cron-jobs/{cronJobId}/runs:
        delete:
            description: Cancel a currently running cron job.
            operationId: cancel-cron-job-run
            responses:
                "204":
                    description: Cancelled
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Cancel running cron job
            tags:
                - Services - Cron Jobs
        parameters:
            - $ref: '#/components/parameters/cronJobIdParam'
        post:
            description: Trigger a run for a cron job and cancel any active runs.
            operationId: run-cron-job
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/cronJobRun'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Trigger cron job run
            tags:
                - Services - Cron Jobs
    /disks:
        get:
            description: |
                List persistent disks matching the provided filters. If no filters are provided, returns all disks you have permissions to view.
            operationId: list-disks
            parameters:
                - $ref: '#/components/parameters/ownerIdParam'
                - description: Filter by disk IDs
                  in: query
                  name: diskId
                  schema:
                    items:
                        $ref: '#/paths/~1disks~1%7BdiskId%7D/parameters/0/schema'
                    type: array
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/serviceIdsParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/diskWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List disks
            tags:
                - Disks
        post:
            description: |
                Attach a persistent disk to a web service, private service, or background worker.

                The service must be redeployed for the disk to be attached.
            operationId: add-disk
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                mountPath:
                                    type: string
                                name:
                                    type: string
                                serviceId:
                                    type: string
                                sizeGB:
                                    type: integer
                            required:
                                - name
                                - sizeGB
                                - mountPath
                                - serviceId
                            type: object
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/diskWithCursor/properties/disk'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add disk
            tags:
                - Disks
    /disks/{diskId}:
        delete:
            description: |
                Delete a persistent disk attached to a service.

                **All data on the disk will be lost.** The disk's associated service will immediately lose access to it.
            operationId: delete-disk
            responses:
                "204":
                    description: Disk deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete disk
            tags:
                - Disks
        get:
            description: |
                Retrieve the persistent disk with the provided ID.
            operationId: retrieve-disk
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/diskWithCursor/properties/disk'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve disk
            tags:
                - Disks
        parameters:
            - description: The ID of the disk
              in: path
              name: diskId
              required: true
              schema:
                example: dsk-cph1rs3idesc73a2b2mg
                pattern: ^dsk-[0-9a-z]{20}$
                type: string
        patch:
            description: |
                Update the persistent disk with the provided ID.

                The disk's associated service must be deployed and active for updates to take effect.

                When resizing a disk, the new size must be greater than the current size.
            operationId: update-disk
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                mountPath:
                                    type: string
                                name:
                                    type: string
                                sizeGB:
                                    type: integer
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/diskWithCursor/properties/disk'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update disk
            tags:
                - Disks
    /disks/{diskId}/snapshots:
        get:
            description: |
                List snapshots for the persistent disk with the provided ID. Each snapshot is a point-in-time copy of the disk's data.
            operationId: list-snapshots
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/diskSnapshot'
                                type: array
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List snapshots
            tags:
                - Disks
        parameters:
            - description: The ID of the disk
              in: path
              name: diskId
              required: true
              schema:
                type: string
    /disks/{diskId}/snapshots/restore:
        parameters:
            - description: The ID of the disk
              in: path
              name: diskId
              required: true
              schema:
                type: string
        post:
            description: |
                Restore a persistent disk to an available snapshot.

                **This operation is irreversible.** It will overwrite the current disk data. It might also trigger a service deploy.

                Snapshot keys returned from the [List snapshots](https://api-docs.render.com/reference/list-snapshots) endpoint expire after 24 hours. If a snapshot key has expired, query the endpoint again for a new key.
            operationId: restore-snapshot
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/snapshotRestorePOST'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/diskWithCursor/properties/disk'
                    description: Restored
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Restore snapshot
            tags:
                - Disks
    /env-groups:
        get:
            description: |
                List environment groups matching the provided filters. If no filters are provided, all environment groups are returned.
            operationId: list-env-groups
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/environmentIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/envGroupMeta'
                                type: array
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List environment groups
            tags:
                - Environment Groups
        post:
            description: |
                Create a new environment group.
            operationId: create-env-group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/envGroupPOSTInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create environment group
            tags:
                - Environment Groups
    /env-groups/{envGroupId}:
        delete:
            description: Delete the environment group with the provided ID, including all environment variables and secret files it contains.
            operationId: delete-env-group
            parameters:
                - in: path
                  name: envGroupId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: environment group deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete environment group
            tags:
                - Environment Groups
        get:
            description: |
                Retrieve an environment group by ID.
            operationId: retrieve-env-group
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve environment group
            tags:
                - Environment Groups
        patch:
            description: Update the attributes of an environment group.
            operationId: update-env-group
            parameters:
                - in: path
                  name: envGroupId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/envGroupPATCHInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update environment group
            tags:
                - Environment Groups
    /env-groups/{envGroupId}/env-vars/{envVarKey}:
        delete:
            description: |
                Remove a particular environment variable from a particular environment group.
            operationId: delete-env-group-env-var
            parameters:
                - in: path
                  name: envGroupId
                  required: true
                  schema:
                    type: string
                - $ref: '#/components/parameters/envVarKeyParam'
            responses:
                "204":
                    description: environment variable removed from environment group
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Remove environment variable
            tags:
                - Environment Groups
        get:
            description: |
                Retrieve a particular environment variable in a particular environment group.
            operationId: retrieve-env-group-env-var
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
                - $ref: '#/components/parameters/envVarKeyParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envVar'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve environment variable
            tags:
                - Environment Groups
        put:
            description: |
                Add or update a particular environment variable in a particular environment group.
            operationId: update-env-group-env-var
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
                - $ref: '#/components/parameters/envVarKeyParam'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/addUpdateEnvVarInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add or update environment variable
            tags:
                - Environment Groups
    /env-groups/{envGroupId}/secret-files/{secretFileName}:
        delete:
            description: |
                Remove a particular secret file from a particular environment group.
            operationId: delete-env-group-secret-file
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
                - $ref: '#/components/parameters/secretFileNameParam'
            responses:
                "204":
                    description: secret file removed from environment group
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Remove secret file
            tags:
                - Environment Groups
        get:
            description: |
                Retrieve a particular secret file in a particular environment group.
            operationId: retrieve-env-group-secret-file
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
                - $ref: '#/components/parameters/secretFileNameParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/secretFile'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve secret file
            tags:
                - Environment Groups
        put:
            description: |
                Add or update a particular secret file in an particular environment group.
            operationId: update-env-group-secret-file
            parameters:
                - in: path
                  name: envGroupId
                  required: true
                  schema:
                    type: string
                - in: path
                  name: secretFileName
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                content:
                                    type: string
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add or update secret file
            tags:
                - Environment Groups
    /env-groups/{envGroupId}/services/{serviceId}:
        delete:
            description: |
                Unlink a particular service from a particular environment group.

                The service will lose access to the environment variables and secret files in the group.
            operationId: unlink-service-from-env-group
            parameters:
                - in: path
                  name: envGroupId
                  required: true
                  schema:
                    type: string
                - in: path
                  name: serviceId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: service unlinked from environment group
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Unlink service
            tags:
                - Environment Groups
        post:
            description: |
                Link a particular service to a particular environment group.

                The linked service will have access to the environment variables and secret files in the group.
            operationId: link-service-to-env-group
            parameters:
                - $ref: '#/components/parameters/envGroupIdParam'
                - $ref: '#/components/parameters/serviceIdParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envGroup'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Link service
            tags:
                - Environment Groups
    /environments:
        get:
            description: |
                List a particular project's environments matching the provided filters. If no filters are provided, all environments are returned.
            operationId: list-environments
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/projectIdParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/environmentIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/environmentWithCursor'
                                type: array
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List environments
            tags:
                - Projects & Environments
        post:
            description: |
                Create a new environment belonging to the project with the provided ID.
            operationId: create-environment
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/environmentPOSTInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/environment'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create environment
            tags:
                - Projects & Environments
    /environments/{environmentId}:
        delete:
            description: |
                Delete the environment with the provided ID, along with all resources that belong to it.

                **This operation is irreversible.** All services and other resources belonging to the environment will be deleted.
            operationId: delete-environment
            parameters:
                - in: path
                  name: environmentId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Environment deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete environment
            tags:
                - Projects & Environments
        get:
            description: Retrieve the environment with the provided ID.
            operationId: retrieve-environment
            parameters:
                - in: path
                  name: environmentId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/environment'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve environment
            tags:
                - Projects & Environments
        patch:
            description: Update the details of the environment with the provided ID.
            operationId: update-environment
            parameters:
                - in: path
                  name: environmentId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/environmentPATCHInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/environment'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update environment
            tags:
                - Projects & Environments
    /environments/{environmentId}/resources:
        delete:
            description: |
                Remove resources from the environment with the provided ID.
            operationId: remove-resources-from-environment
            parameters:
                - in: path
                  name: environmentId
                  required: true
                  schema:
                    type: string
                - in: query
                  name: resourceIds
                  required: true
                  schema:
                    items:
                        description: The ID of an env group, a service, a PostgreSQL database, or a Redis instance
                        type: string
                    type: array
            responses:
                "204":
                    description: Resources removed from environment
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Remove resources from environment
            tags:
                - Projects & Environments
        post:
            description: |
                Add resources to the environment with the provided ID.
            operationId: add-resources-to-environment
            parameters:
                - in: path
                  name: environmentId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/environmentResourcesPOSTInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/environment'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add resources to environment
            tags:
                - Projects & Environments
    /logs:
        get:
            description: |
                List logs matching the provided filters. Logs are paginated by start and end timestamps.
                There are more logs to fetch if `hasMore` is true in the response. Provide the `nextStartTime`
                and `nextEndTime` timestamps as the `startTime` and `endTime` query parameters to fetch the next page of logs.

                You can query for logs across multiple resources, but all resources must be in the same region and belong to the same owner.
            operationId: list-logs
            parameters:
                - description: The ID of the owner (team or personal user) whose resources should be returned
                  in: query
                  name: ownerId
                  required: true
                  schema:
                    type: string
                - $ref: '#/components/parameters/startTimeParam'
                - $ref: '#/components/parameters/endTimeParam'
                - description: |
                    The direction to query logs for. Backward will return most recent logs first.
                    Forward will start with the oldest logs in the time range.
                  in: query
                  name: direction
                  schema:
                    default: backward
                    enum:
                        - forward
                        - backward
                    type: string
                - description: Filter logs by their resource. A resource is the id of a server, cronjob, job, postgres, or redis.
                  in: query
                  name: resource
                  required: true
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter logs by the instance they were emitted from. An instance is the id of a specific running server.
                  in: query
                  name: instance
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter request logs by their host. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: host
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter request logs by their status code. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: statusCode
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter request logs by their requests method. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: method
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter logs by their severity level. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: level
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter logs by their type. Types include `app` for application logs, `request` for request logs, and `build` for build logs. You can find the full set of types available for a query by using the `GET /logs/values` endpoint.
                  in: query
                  name: type
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter by the text of the logs. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: text
                  schema:
                    items:
                        type: string
                    type: array
                - description: Filter request logs by their path. [Wildcards and regex](https://docs.render.com/logging#wildcards-and-regular-expressions) are supported.
                  in: query
                  name: path
                  schema:
                    items:
                        type: string
                    type: array
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    $ref: '#/components/responses/Logs200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List logs
            tags:
                - Logs
    /logs/streams/owner/{ownerId}:
        delete:
            description: Remove the log stream information for the provided owner.
            operationId: delete-owner-log-stream
            parameters:
                - description: The ID of the owner (team or personal user) whose log streams should be returned
                  in: path
                  name: ownerId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Log stream setting deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete owner log stream
            tags:
                - Logs
        get:
            description: Get log stream information for the provided owner.
            operationId: get-owner-log-stream
            parameters:
                - description: The ID of the owner (team or personal user) whose log streams should be returned
                  in: path
                  name: ownerId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: Owner log stream settings
                                properties:
                                    endpoint:
                                        description: The endpoint to stream logs to.
                                        type: string
                                    ownerId:
                                        description: The ID of the owner.
                                        type: string
                                    preview:
                                        $ref: '#/paths/~1logs~1streams~1owner~1%7BownerId%7D/put/requestBody/content/application~1json/schema/properties/preview'
                                type: object
                    description: Owner log stream setting
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Get owner log stream
            tags:
                - Logs
        put:
            description: Update default log stream information for the provided owner. All logs for resources owned by this owner will be sent to this log stream unless overridden by a resource log stream.
            operationId: update-owner-log-stream
            parameters:
                - description: The ID of the owner (team or personal user) whose log streams should be returned
                  in: path
                  name: ownerId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                endpoint:
                                    description: The endpoint to stream logs to.
                                    type: string
                                preview:
                                    description: Whether to send logs or drop them.
                                    enum:
                                        - send
                                        - drop
                                    type: string
                                token:
                                    description: The optional token to authenticate the log stream.
                                    type: string
                            required:
                                - preview
                            type: object
                required: true
            responses:
                "200":
                    $ref: '#/paths/~1logs~1streams~1owner~1%7BownerId%7D/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update owner log stream
            tags:
                - Logs
    /logs/streams/resource:
        get:
            description: List resource log stream overrides for the provided filters. These overrides take precedence over any existing owner log streams.
            operationId: list-resource-log-streams
            parameters:
                - $ref: '#/components/parameters/ownerIdParam'
                - description: Filter log streams by their id.
                  in: query
                  name: logStreamId
                  schema:
                    items:
                        type: string
                    type: array
                - $ref: '#/components/parameters/resourceIdParam'
                - description: Filter log streams by their setting.
                  in: query
                  name: setting
                  schema:
                    items:
                        description: Whether to send logs or drop them.
                        enum:
                            - send
                            - drop
                        type: string
                    type: array
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/paths/~1logs~1streams~1resource~1%7BresourceId%7D/get/responses/200/content/application~1json/schema'
                                type: array
                    description: Resource log stream override
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List resource log stream overrides
            tags:
                - Logs
    /logs/streams/resource/{resourceId}:
        delete:
            description: Remove the resource log stream override for the provided resource. This resource will now use the owner log stream if it exists.
            operationId: delete-resource-log-stream
            parameters:
                - description: The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned
                  in: path
                  name: resourceId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Log stream setting deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete resource log stream override
            tags:
                - Logs
        get:
            description: Get resource log stream override information for the provided resource. A resource log stream override takes precedence over a owner log stream if it exists.
            operationId: get-resource-log-stream
            parameters:
                - description: The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned
                  in: path
                  name: resourceId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: Resource log stream overrides
                                properties:
                                    endpoint:
                                        description: The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop.
                                        type: string
                                    resourceId:
                                        description: The ID of the resource.
                                        type: string
                                    setting:
                                        $ref: '#/paths/~1logs~1streams~1resource/get/parameters/3/schema/items'
                                type: object
                    description: Resource log stream override
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Get resource log stream override
            tags:
                - Logs
        put:
            description: Update resource log stream override information for the provided resource. A resource log stream override takes precedence over a owner log stream if it exists.
            operationId: update-resource-log-stream
            parameters:
                - description: The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned
                  in: path
                  name: resourceId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                endpoint:
                                    $ref: '#/paths/~1logs~1streams~1owner~1%7BownerId%7D/put/requestBody/content/application~1json/schema/properties/endpoint'
                                setting:
                                    $ref: '#/paths/~1logs~1streams~1resource/get/parameters/3/schema/items'
                                token:
                                    $ref: '#/paths/~1logs~1streams~1owner~1%7BownerId%7D/put/requestBody/content/application~1json/schema/properties/token'
                            required:
                                - setting
                            type: object
                required: true
            responses:
                "200":
                    $ref: '#/paths/~1logs~1streams~1resource~1%7BresourceId%7D/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update resource log stream override
            tags:
                - Logs
    /logs/subscribe:
        get:
            description: |
                Open a websocket connection to subscribe to logs matching the provided filters. Logs are streamed in real-time as they are generated.

                You can query for logs across multiple resources, but all resources must be in the same region and belong to the same owner.
            operationId: subscribe-logs
            parameters:
                - description: The ID of the owner (team or personal user) whose resources should be returned
                  in: query
                  name: ownerId
                  required: true
                  schema:
                    type: string
                - $ref: '#/components/parameters/startTimeParam'
                - $ref: '#/components/parameters/endTimeParam'
                - $ref: '#/paths/~1logs/get/parameters/3'
                - $ref: '#/paths/~1logs/get/parameters/4'
                - $ref: '#/paths/~1logs/get/parameters/5'
                - $ref: '#/paths/~1logs/get/parameters/6'
                - $ref: '#/paths/~1logs/get/parameters/7'
                - $ref: '#/paths/~1logs/get/parameters/8'
                - $ref: '#/paths/~1logs/get/parameters/9'
                - $ref: '#/paths/~1logs/get/parameters/10'
                - $ref: '#/paths/~1logs/get/parameters/11'
                - $ref: '#/paths/~1logs/get/parameters/12'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "101":
                    content:
                        application/json:
                            schema:
                                description: A log entry with metadata
                                properties:
                                    id:
                                        description: A unique ID of the log entry
                                        type: string
                                    labels:
                                        items:
                                            description: A log label
                                            properties:
                                                name:
                                                    description: The name of the log label
                                                    enum:
                                                        - resource
                                                        - instance
                                                        - host
                                                        - statusCode
                                                        - method
                                                        - level
                                                        - type
                                                        - text
                                                        - path
                                                    type: string
                                                value:
                                                    description: The value of the log label
                                                    type: string
                                            required:
                                                - name
                                                - value
                                            type: object
                                        type: array
                                    message:
                                        description: The message of the log entry
                                        type: string
                                    timestamp:
                                        description: The timestamp of the log entry
                                        format: date-time
                                        type: string
                                required:
                                    - id
                                    - message
                                    - timestamp
                                    - labels
                                type: object
                    description: The connection has been upgraded to a websocket. The server will send log messages as they are generated in the format defined below.
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Subscribe to new logs
            tags:
                - Logs
    /logs/values:
        get:
            description: List all values for a given log label in the logs matching the provided filters.
            operationId: list-logs-values
            parameters:
                - description: The ID of the owner (team or personal user) whose resources should be returned
                  in: query
                  name: ownerId
                  required: true
                  schema:
                    type: string
                - description: The label to query logs for
                  in: query
                  name: label
                  required: true
                  schema:
                    enum:
                        - instance
                        - host
                        - statusCode
                        - method
                        - level
                        - type
                    type: string
                - $ref: '#/components/parameters/startTimeParam'
                - $ref: '#/components/parameters/endTimeParam'
                - $ref: '#/paths/~1logs/get/parameters/3'
                - $ref: '#/paths/~1logs/get/parameters/4'
                - $ref: '#/paths/~1logs/get/parameters/5'
                - $ref: '#/paths/~1logs/get/parameters/6'
                - $ref: '#/paths/~1logs/get/parameters/7'
                - $ref: '#/paths/~1logs/get/parameters/8'
                - $ref: '#/paths/~1logs/get/parameters/9'
                - $ref: '#/paths/~1logs/get/parameters/10'
                - $ref: '#/paths/~1logs/get/parameters/11'
                - $ref: '#/paths/~1logs/get/parameters/12'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    $ref: '#/components/responses/LogsValues200Response'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List log label values
            tags:
                - Logs
    /maintenance:
        get:
            description: |
                List scheduled and/or recent maintenance runs for specified resources.
            operationId: list-maintenance
            parameters:
                - explode: false
                  in: query
                  name: resourceId
                  schema:
                    items:
                        description: The Id of a resource that can undergo maintenance (Id of a service, a Postgres instance, or a Redis instance)
                        type: string
                    type: array
                  style: form
                - $ref: '#/components/parameters/ownerIdParam'
                - in: query
                  name: state
                  schema:
                    items:
                        enum:
                            - scheduled
                            - in_progress
                            - user_fix_required
                            - cancelled
                            - succeeded
                            - failed
                        type: string
                    type: array
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/paths/~1maintenance~1%7BmaintenanceRunParam%7D/get/responses/200/content/application~1json/schema'
                                type: array
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List maintenance runs
            tags:
                - Maintenance
    /maintenance/{maintenanceRunParam}:
        get:
            description: Retrieve the maintenance run with the provided ID.
            operationId: retrieve-maintenance
            parameters:
                - in: path
                  name: maintenanceRunParam
                  required: true
                  schema:
                    example: mrn-cph1rs3idesc73a2b2mg
                    pattern: ^mrn-[0-9a-z]{20}$
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    id:
                                        $ref: '#/paths/~1maintenance~1%7BmaintenanceRunParam%7D/get/parameters/0/schema'
                                    pendingMaintenanceBy:
                                        description: If present, the maintenance run cannot be scheduled for later than this date-time.
                                        format: date-time
                                        type: string
                                    resourceId:
                                        $ref: '#/paths/~1maintenance/get/parameters/0/schema/items'
                                    scheduledAt:
                                        format: date-time
                                        type: string
                                    state:
                                        $ref: '#/paths/~1maintenance/get/parameters/2/schema/items'
                                    type:
                                        type: string
                                required:
                                    - id
                                    - type
                                    - scheduledAt
                                    - state
                                    - resourceId
                                type: object
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve maintenance run
            tags:
                - Maintenance
        patch:
            description: |
                Update the maintenance run with the provided ID.

                Updates from this endpoint are asynchronous. To check your update's status, use the [Retrieve maintenance run](https://api-docs.render.com/reference/retrieve-maintenance) endpoint.
            operationId: update-maintenance
            parameters:
                - $ref: '#/paths/~1maintenance~1%7BmaintenanceRunParam%7D/get/parameters/0'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                scheduledAt:
                                    description: The date-time at which the maintenance is scheduled to start. This must be before the pendingMaintenanceBy date-time.
                                    format: date-time
                                    type: string
                            type: object
                required: true
            responses:
                "202":
                    description: Maintenance run updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update maintenance run
            tags:
                - Maintenance
    /maintenance/{maintenanceRunParam}/trigger:
        post:
            description: |
                Trigger the scheduled maintenance run with the provided ID.

                Triggering maintenance is asynchronous. To check whether maintenance has started, use the [Retrieve maintenance run](https://api-docs.render.com/reference/retrieve-maintenance) endpoint.

                As maintenance progresses, the run's `state` will change from `scheduled` to other values, such as `in_progress` and `succeeded`.
            operationId: trigger-maintenance
            parameters:
                - $ref: '#/paths/~1maintenance~1%7BmaintenanceRunParam%7D/get/parameters/0'
            responses:
                "202":
                    description: Maintenance run triggered
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Trigger maintenance run
            tags:
                - Maintenance
    /metrics/active-connections:
        get:
            description: |
                Get the number of active connections for one or more PostgreSQL databases or Redis instances.
            operationId: get-active-connections
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get active connection count
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - description: Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources Postgres ids or Redis ids
              in: query
              name: resource
              schema:
                example: dpg-xxxxx,red-xxxxx
                type: string
    /metrics/bandwidth:
        get:
            description: |
                Get bandwidth usage for one or more resources.
            operationId: get-bandwidth
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get bandwidth usage
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - description: Service ID to query. When multiple service ids are provided, they are ORed together
              in: query
              name: resource
              schema:
                example: srv-xxxxx
                type: string
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
    /metrics/cpu:
        get:
            description: |
                Get CPU usage for one or more resources.
            operationId: get-cpu
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: A collection of time series
                                items:
                                    description: A time series data point
                                    properties:
                                        labels:
                                            description: List of labels describing the time series
                                            items:
                                                description: A time series datapoint label
                                                properties:
                                                    field:
                                                        example: service
                                                        type: string
                                                    value:
                                                        example: srv-xxxxx
                                                        type: string
                                                required:
                                                    - field
                                                    - value
                                                type: object
                                            type: array
                                        unit:
                                            example: GB
                                            type: string
                                        values:
                                            description: The values of the time series
                                            items:
                                                description: A time series datapoint value
                                                properties:
                                                    timestamp:
                                                        example: "2021-06-17T08:15:30Z"
                                                        format: date-time
                                                        type: string
                                                    value:
                                                        example: 1
                                                        type: number
                                                required:
                                                    - timestamp
                                                    - value
                                                    - unit
                                                type: object
                                            type: array
                                    required:
                                        - labels
                                        - values
                                        - unit
                                    type: object
                                required:
                                    - items
                                type: array
                    description: A successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get CPU usage
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - description: The resolution of the returned data
              in: query
              name: resolutionSeconds
              schema:
                default: 60
                example: 60
                minimum: 30
                type: number
            - description: Resource ID to query. When multiple resource query params are provided, they are ORed together. Resources can be service ids, Postgres ids, or Redis ids
              in: query
              name: resource
              schema:
                example: srv-xxxxx,dpg-xxxxx,red-xxxxx
                type: string
            - deprecated: true
              description: This parameter is deprecated. Please use `resource` instead
              in: query
              name: service
              schema:
                example: srv-xxxxx
                type: string
            - description: Instance ID to query. When multiple instance ID query params are provided, they are ORed together
              in: query
              name: instance
              schema:
                example: srv-xxxxx-yyyy
                type: string
            - description: The aggregation method to apply to multiple time series
              in: query
              name: aggregationMethod
              schema:
                enum:
                    - AVG
                    - MAX
                    - MIN
                type: string
    /metrics/cpu-limit:
        get:
            description: |
                Get the CPU limit for one or more resources.
            operationId: get-cpu-limit
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get CPU limit
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1cpu/parameters/5'
    /metrics/cpu-target:
        get:
            description: |
                Get CPU target for one or more resources.
            operationId: get-cpu-target
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get CPU target
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1cpu/parameters/5'
    /metrics/disk-capacity:
        get:
            description: |
                Get persistent disk capacity for one or more resources.
            operationId: get-disk-capacity
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get disk capacity
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
    /metrics/disk-usage:
        get:
            description: |
                Get persistent disk usage for one or more resources.
            operationId: get-disk-usage
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get disk usage
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
    /metrics/filters/application:
        get:
            description: |
                List instance values to filter by for one or more resources.
            operationId: list-application-filter-values
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: A collection of filter values for application metrics
                                items:
                                    properties:
                                        filter:
                                            enum:
                                                - instance
                                            type: string
                                        values:
                                            items:
                                                example: srv-xxxxx-yyyy
                                                type: string
                                            type: array
                                    type: object
                                required:
                                    - items
                                type: array
                    description: A successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: List queryable instance values
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1bandwidth/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
    /metrics/filters/http:
        get:
            description: |
                List status codes and host values to filter by for one or more resources.
            operationId: list-http-filter-values
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: A collection of filter values for HTTP metrics
                                items:
                                    properties:
                                        filter:
                                            enum:
                                                - host
                                                - statusCode
                                            type: string
                                        values:
                                            items:
                                                example: api.example.com
                                                type: string
                                            type: array
                                    type: object
                                required:
                                    - items
                                type: array
                    description: A successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: List queryable status codes and host values
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1bandwidth/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1http-latency/parameters/5'
            - description: The status codes of HTTP requests to filter to. When multiple status code query params are provided, they are ORed together
              in: query
              name: statusCode
              schema:
                example: "200"
                type: string
    /metrics/filters/path:
        get:
            description: The path suggestions are based on the most recent 5000 log lines as filtered by the provided filters
            operationId: list-path-filter-values
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                description: A collection of suggested paths to filter by
                                items:
                                    example: /user/*
                                    type: string
                                required:
                                    - items
                                type: array
                    description: A successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: List queryable paths
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1bandwidth/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1http-latency/parameters/5'
            - $ref: '#/paths/~1metrics~1filters~1http/parameters/6'
            - $ref: '#/paths/~1metrics~1http-latency/parameters/6'
    /metrics/http-latency:
        get:
            description: |
                Get HTTP latency metrics for one or more resources.
            operationId: get-http-latency
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get HTTP latency
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1bandwidth/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - description: The hosts of HTTP requests to filter to. When multiple host query params are provided, they are ORed together
              in: query
              name: host
              schema:
                example: example.com
                type: string
            - description: The paths of HTTP requests to filter to. When multiple path query params are provided, they are ORed together
              in: query
              name: path
              schema:
                example: /graphql
                type: string
            - description: The quantile of latencies to fetch. When multiple quantile query params are provided, they are ORed together
              in: query
              name: quantile
              schema:
                example: 0.99
                format: float
                type: number
    /metrics/http-requests:
        get:
            description: |
                Get the HTTP request count for one or more resources.
            operationId: get-http-requests
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get HTTP request count
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1bandwidth/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1http-latency/parameters/5'
            - $ref: '#/paths/~1metrics~1http-latency/parameters/6'
            - description: The field to aggregate by
              in: query
              name: aggregateBy
              schema:
                enum:
                    - statusCode
                    - host
                type: string
    /metrics/instance-count:
        get:
            description: |
                Get the instance count for one or more resources.
            operationId: get-instance-count
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get instance count
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
    /metrics/memory:
        get:
            description: |
                Get memory usage for one or more resources.
            operationId: get-memory
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get memory usage
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1cpu/parameters/5'
    /metrics/memory-limit:
        get:
            description: |
                Get the memory limit for one or more resources.
            operationId: get-memory-limit
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get memory limit
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1cpu/parameters/5'
    /metrics/memory-target:
        get:
            description: |
                Get memory target for one or more resources.
            operationId: get-memory-target
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get memory target
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - $ref: '#/paths/~1metrics~1cpu/parameters/3'
            - $ref: '#/paths/~1metrics~1cpu/parameters/4'
            - $ref: '#/paths/~1metrics~1cpu/parameters/5'
    /metrics/replication-lag:
        get:
            description: |
                Get milliseconds of replica lag of a PostgreSQL replica.
            operationId: get-replication-lag
            responses:
                "200":
                    $ref: '#/paths/~1metrics~1cpu/get/responses/200'
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
            summary: Get replica lag
            tags:
                - Metrics
        parameters:
            - $ref: '#/components/parameters/startTimeParam'
            - $ref: '#/components/parameters/endTimeParam'
            - $ref: '#/paths/~1metrics~1cpu/parameters/2'
            - description: Postgres ID to query. When multiple resource query params are provided, they are ORed together
              in: query
              name: resource
              schema:
                example: dpg-xxxxx
                type: string
    /notification-settings/overrides:
        get:
            description: |
                List notification overrides matching the provided filters. If no filters are provided, returns all notification overrides for all teams the user belongs to.
            operationId: list-notification-overrides
            parameters:
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/serviceIdsParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/notificationOverrideWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List notification overrides
            tags:
                - Notification Settings
    /notification-settings/overrides/services/{serviceId}:
        get:
            description: |
                Retrieve the notification override for the service with the provided ID.

                Note that you provide a service ID to this endpoint, not the ID for a particular override.
            operationId: retrieve-service-notification-overrides
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    notificationsToSend:
                                        $ref: '#/paths/~1notification-settings~1overrides~1services~1%7BserviceId%7D/patch/requestBody/content/application~1json/schema/properties/notificationsToSend'
                                    previewNotificationsEnabled:
                                        $ref: '#/paths/~1notification-settings~1overrides~1services~1%7BserviceId%7D/patch/requestBody/content/application~1json/schema/properties/previewNotificationsEnabled'
                                    serviceId:
                                        type: string
                                required:
                                    - serviceId
                                    - previewNotificationsEnabled
                                    - notificationsToSend
                                type: object
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve notification override
            tags:
                - Notification Settings
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        patch:
            description: |
                Update the notification override for the service with the provided ID.
            operationId: patch-service-notification-overrides
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                notificationsToSend:
                                    enum:
                                        - default
                                        - none
                                        - failure
                                        - all
                                    type: string
                                previewNotificationsEnabled:
                                    enum:
                                        - default
                                        - "false"
                                        - "true"
                                    type: string
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/paths/~1notification-settings~1overrides~1services~1%7BserviceId%7D/get/responses/200/content/application~1json/schema'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update notification override
            tags:
                - Notification Settings
    /notification-settings/owners/{ownerId}:
        get:
            description: |
                Retrieve notification settings for the owner with the provided ID.

                Note that you provide an owner ID to this endpoint, not the ID for a particular resource.
            operationId: retrieve-owner-notification-settings
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    emailEnabled:
                                        type: boolean
                                    notificationsToSend:
                                        $ref: '#/paths/~1notification-settings~1owners~1%7BownerId%7D/patch/requestBody/content/application~1json/schema/properties/notificationsToSend'
                                    ownerId:
                                        type: string
                                    previewNotificationsEnabled:
                                        type: boolean
                                    slackEnabled:
                                        type: boolean
                                required:
                                    - ownerId
                                    - slackEnabled
                                    - emailEnabled
                                    - previewNotificationsEnabled
                                    - notificationsToSend
                                type: object
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve notification settings
            tags:
                - Notification Settings
        parameters:
            - $ref: '#/components/parameters/ownerIdPathParam'
        patch:
            description: |
                Update notification settings for the owner with the provided ID.
            operationId: patch-owner-notification-settings
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                emailEnabled:
                                    type: boolean
                                notificationsToSend:
                                    enum:
                                        - none
                                        - failure
                                        - all
                                    type: string
                                previewNotificationsEnabled:
                                    type: boolean
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/paths/~1notification-settings~1owners~1%7BownerId%7D/get/responses/200/content/application~1json/schema'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update notification settings
            tags:
                - Notification Settings
    /owners:
        get:
            description: |
                List the users and teams matching the provided filters. If no filters are provided, return all users and teams you have permissions to view.
            operationId: list-owners
            parameters:
                - in: query
                  name: name
                  schema:
                    items:
                        type: string
                    type: array
                - in: query
                  name: email
                  schema:
                    items:
                        type: string
                    type: array
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/ownerWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List authorized users and teams
            tags:
                - Owners
    /owners/{ownerId}:
        get:
            description: |
                Retrieve a user or team given the user or team id.
            operationId: retrieve-owner
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/owner'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve user or team
            tags:
                - Owners
        parameters:
            - description: The ID of the user or team
              in: path
              name: ownerId
              required: true
              schema:
                type: string
    /postgres:
        get:
            description: |
                List PostgreSQL instances matching the provided filters. If no filters are provided, all PostgreSQL instances are returned.
            operationId: list-postgres
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/regionParam'
                - $ref: '#/components/parameters/suspendedParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/environmentIdParam'
                - $ref: '#/components/parameters/includeReplicasParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/postgresWithCursor'
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List PostgreSQL instances
            tags:
                - PostgreSQL
        post:
            description: |
                Create a new PostgreSQL instance.
            operationId: create-postgres
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/postgresPOSTInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/postgresDetail'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create PostgreSQL instance
            tags:
                - PostgreSQL
    /postgres/{postgresId}:
        delete:
            description: |
                Delete a PostgreSQL instance by ID. This operation is irreversible, and
                all data will be lost.
            operationId: delete-postgres
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: PostgreSQL instance deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete PostgreSQL instance
            tags:
                - PostgreSQL
        get:
            description: |
                Retrieve a PostgreSQL instance by ID.
            operationId: retrieve-postgres
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/postgresDetail'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve PostgreSQL instance
            tags:
                - PostgreSQL
        patch:
            description: |
                Update a PostgreSQL instance by ID.
            operationId: update-postgres
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/postgresPATCHInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/postgresDetail'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update PostgreSQL instance
            tags:
                - PostgreSQL
    /postgres/{postgresId}/backup:
        get:
            description: |
                List [backups](https://docs.render.com/postgresql-backups#standard-backups) for a PostgreSQL instance by ID. Returns a URL to download the backup.
            operationId: list-postgres-backup
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    properties:
                                        createdAt:
                                            format: date-time
                                            type: string
                                        id:
                                            type: string
                                        url:
                                            description: URL to download the Postgres backup
                                            type: string
                                    required:
                                        - id
                                        - createdAt
                                    type: object
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List PostgreSQL backups
            tags:
                - PostgreSQL
        parameters:
            - in: path
              name: postgresId
              required: true
              schema:
                type: string
        post:
            description: |
                Create a [backup](https://docs.render.com/postgresql-backups#standard-backups) of a PostgreSQL instance by ID.
            operationId: create-postgres-backup
            responses:
                "202":
                    description: Backup started successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create PostgreSQL backup
            tags:
                - PostgreSQL
    /postgres/{postgresId}/connection-info:
        get:
            description: |
                Retrieve connection info for a PostgreSQL instance by ID. Connection info includes sensitive information.
            operationId: retrieve-postgres-connection-info
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/postgresConnectionInfo'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve PostgreSQL connection info
            tags:
                - PostgreSQL
    /postgres/{postgresId}/failover:
        parameters:
            - in: path
              name: postgresId
              required: true
              schema:
                type: string
        post:
            description: |
                Failover a [highly available PostgreSQL](https://docs.render.com/postgresql-high-availability) instance.
            operationId: failover-postgres
            responses:
                "202":
                    description: Service failed over successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Failover PostgreSQL instance
            tags:
                - PostgreSQL
    /postgres/{postgresId}/recovery:
        get:
            description: |
                Retrieve information on the availability of PostgreSQL point-in-time recovery for a PostgreSQL instance by ID.
            operationId: retrieve-postgres-recovery-info
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    recoveryStatus:
                                        description: Availability of point-in-time recovery.
                                        enum:
                                            - AVAILABLE
                                            - BACKUP_NOT_READY
                                            - NOT_AVAILABLE
                                        type: string
                                    startsAt:
                                        format: date-time
                                        type: string
                                required:
                                    - recoveryStatus
                                type: object
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve point-in-time recovery status
            tags:
                - PostgreSQL
        post:
            description: |
                Trigger [point-in-time recovery](https://docs.render.com/postgresql-backups#point-in-time-recovery) on the PostgreSQL instance with the provided ID.
            operationId: recover-postgres
            parameters:
                - in: path
                  name: postgresId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                datadogApiKey:
                                    description: Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
                                    type: string
                                environmentId:
                                    description: The environment to create the new database in. Defaults to the environment of the original database.
                                    type: string
                                plan:
                                    description: The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database.
                                    type: string
                                restoreName:
                                    description: Name of the new database.
                                    type: string
                                restoreTime:
                                    description: The point in time to restore the database to. See `/recovery-info` for restore availability
                                    format: date-time
                                    type: string
                            required:
                                - restoreTime
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/postgresDetail'
                    description: Recovery initiated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Trigger point-in-time recovery
            tags:
                - PostgreSQL
    /postgres/{postgresId}/restart:
        parameters:
            - in: path
              name: postgresId
              required: true
              schema:
                type: string
        post:
            description: |
                Restart a PostgreSQL instance by ID.
            operationId: restart-postgres
            responses:
                "202":
                    description: Service restarted successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Restart PostgreSQL instance
            tags:
                - PostgreSQL
    /postgres/{postgresId}/resume:
        parameters:
            - in: path
              name: postgresId
              required: true
              schema:
                type: string
        post:
            description: |
                Resume a PostgreSQL instance by ID.
            operationId: resume-postgres
            responses:
                "202":
                    description: Service resumed successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Resume PostgreSQL instance
            tags:
                - PostgreSQL
    /postgres/{postgresId}/suspend:
        parameters:
            - in: path
              name: postgresId
              required: true
              schema:
                type: string
        post:
            description: |
                Suspend a PostgreSQL instance by ID.
            operationId: suspend-postgres
            responses:
                "202":
                    description: Service suspended successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Suspend PostgreSQL instance
            tags:
                - PostgreSQL
    /projects:
        get:
            description: |
                List projects matching the provided filters. If no filters are provided, all projects are returned.
            operationId: list-projects
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/projectWithCursor'
                                type: array
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List projects
            tags:
                - Projects & Environments
        post:
            description: |
                Create a new project.
            operationId: create-project
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/projectPOSTInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/project'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create project
            tags:
                - Projects & Environments
    /projects/{projectId}:
        delete:
            description: |
                Delete the project with the provided ID, along with all environments and services in that project.

                **This operation is irreversible.** All services and other resources belonging to the project will be deleted.
            operationId: delete-project
            parameters:
                - in: path
                  name: projectId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Project deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete project
            tags:
                - Projects & Environments
        get:
            description: |
                Retrieve the project with the provided ID.
            operationId: retrieve-project
            parameters:
                - in: path
                  name: projectId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/project'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve Project
            tags:
                - Projects & Environments
        patch:
            description: |
                Update the details of a project.

                To update the details of a particular _environment_ in the project, instead use the [Update environment](https://api-docs.render.com/reference/update-environment) endpoint.
            operationId: update-project
            parameters:
                - in: path
                  name: projectId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/projectPATCHInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/project'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update project
            tags:
                - Projects & Environments
    /redis:
        get:
            description: |
                List Redis instances matching the provided filters. If no filters are provided, all Redis instances are returned.
            operationId: list-redis
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/regionParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/environmentIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        redis:
                                            $ref: '#/components/schemas/redis'
                                    type: object
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List Redis instances
            tags:
                - Redis
        post:
            description: |
                Create a new Redis instance.
            operationId: create-redis
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/redisPOSTInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/redisDetail'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create Redis instance
            tags:
                - Redis
    /redis/{redisId}:
        delete:
            description: |
                Delete a Redis instance by ID.
            operationId: delete-redis
            parameters:
                - in: path
                  name: redisId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Redis instance deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete Redis instance
            tags:
                - Redis
        get:
            description: |
                Retrieve a Redis instance by ID.
            operationId: retrieve-redis
            parameters:
                - in: path
                  name: redisId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/redisDetail'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve Redis instance
            tags:
                - Redis
        patch:
            description: |
                Update a Redis instance by ID.
            operationId: update-redis
            parameters:
                - in: path
                  name: redisId
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/redisPATCHInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/redisDetail'
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update Redis instance
            tags:
                - Redis
    /redis/{redisId}/connection-info:
        get:
            description: |
                Retrieve connection info for a Redis instance by ID. Connection info includes sensitive information.
            operationId: retrieve-redis-connection-info
            parameters:
                - in: path
                  name: redisId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/redisConnectionInfo'
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve Redis connection info
            tags:
                - Redis
    /registrycredentials:
        get:
            description: |
                List registry credentials matching the provided filters. If no filters are provided, returns all registry credentials you have permissions to view.
            operationId: list-registry-credentials
            parameters:
                - description: Filter for the name of a credential
                  explode: false
                  in: query
                  name: name
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for the username of a credential
                  explode: false
                  in: query
                  name: username
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for the registry type for the credential
                  explode: false
                  in: query
                  name: type
                  schema:
                    items:
                        $ref: '#/components/schemas/registryCredentialRegistry'
                    type: array
                  style: form
                - description: Filter for services created before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: createdBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for services created after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: createdAfter
                  schema:
                    format: date-time
                    type: string
                - description: Filter for services updated before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: updatedBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for services updated after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: updatedAfter
                  schema:
                    format: date-time
                    type: string
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/registryCredential'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List registry credentials
            tags:
                - Registry Credentials
        post:
            description: Create a new registry credential.
            operationId: create-registry-credential
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                authToken:
                                    type: string
                                name:
                                    type: string
                                ownerId:
                                    type: string
                                registry:
                                    $ref: '#/components/schemas/registryCredentialRegistry'
                                username:
                                    type: string
                            required:
                                - name
                                - registry
                                - username
                                - authToken
                                - ownerId
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create registry credential
            tags:
                - Registry Credentials
    /registrycredentials/{registryCredentialId}:
        delete:
            description: Delete the registry credential with the provided ID.
            operationId: delete-registry-credential
            responses:
                "204":
                    description: Registry credential deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete registry credential
            tags:
                - Registry Credentials
        get:
            description: Retrieve the registry credential with the provided ID.
            operationId: retrieve-registry-credential
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve registry credential
            tags:
                - Registry Credentials
        parameters:
            - description: The ID of the registry credential
              in: path
              name: registryCredentialId
              required: true
              schema:
                type: string
        patch:
            description: Update the registry credential with the provided ID. Services that use this credential must be redeployed to use updated values.
            operationId: update-registry-credential
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                authToken:
                                    type: string
                                name:
                                    type: string
                                registry:
                                    $ref: '#/components/schemas/registryCredentialRegistry'
                                username:
                                    type: string
                            required:
                                - name
                                - registry
                                - username
                                - authToken
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/registryCredential'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update registry credential
            tags:
                - Registry Credentials
    /services:
        get:
            description: |
                List services matching the provided filters. If no filters are provided, returns all services you have permissions to view.
            operationId: list-services
            parameters:
                - $ref: '#/components/parameters/nameParam'
                - $ref: '#/components/parameters/serviceTypeParam'
                - $ref: '#/components/parameters/envParam'
                - $ref: '#/components/parameters/regionParam'
                - $ref: '#/components/parameters/suspendedParam'
                - $ref: '#/components/parameters/createdBeforeParam'
                - $ref: '#/components/parameters/createdAfterParam'
                - $ref: '#/components/parameters/updatedBeforeParam'
                - $ref: '#/components/parameters/updatedAfterParam'
                - $ref: '#/components/parameters/ownerIdParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/listServices'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List services
            tags:
                - Services
        post:
            description: |
                Create a service.
            operationId: create-service
            requestBody:
                content:
                    application/json:
                        schema:
                            discriminator:
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorker'
                                    cron_job: '#/components/schemas/cronJob'
                                    private_service: '#/components/schemas/privateService'
                                    static_site: '#/components/schemas/staticSite'
                                    web_service: '#/components/schemas/webService'
                                propertyName: type
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorker'
                                - $ref: '#/components/schemas/cronJob'
                                - $ref: '#/components/schemas/privateService'
                                - $ref: '#/components/schemas/staticSite'
                                - $ref: '#/components/schemas/webService'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                discriminator:
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                                    propertyName: type
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create service
            tags:
                - Services
    /services/{serviceId}:
        delete:
            description: |
                Delete the service with the provided ID.
            operationId: delete-service
            requestBody:
                content:
                    application/json:
                        schema:
                            discriminator:
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorker'
                                    cron_job: '#/components/schemas/cronJob'
                                    private_service: '#/components/schemas/privateService'
                                    static_site: '#/components/schemas/staticSite'
                                    web_service: '#/components/schemas/webService'
                                propertyName: type
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorker'
                                - $ref: '#/components/schemas/cronJob'
                                - $ref: '#/components/schemas/privateService'
                                - $ref: '#/components/schemas/staticSite'
                                - $ref: '#/components/schemas/webService'
            responses:
                "204":
                    description: Service deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete service
            tags:
                - Services
        get:
            description: |
                Retrieve the service with the provided ID.
            operationId: retrieve-service
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                discriminator:
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                                    propertyName: type
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve service
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        patch:
            description: |
                Update the service with the provided ID.
            operationId: update-service
            requestBody:
                content:
                    application/json:
                        schema:
                            discriminator:
                                mapping:
                                    background_worker: '#/components/schemas/backgroundWorkerPatch'
                                    cron_job: '#/components/schemas/cronJobPatch'
                                    private_service: '#/components/schemas/privateServicePatch'
                                    static_site: '#/components/schemas/staticSitePatch'
                                    web_service: '#/components/schemas/webServicePatch'
                                propertyName: type
                            oneOf:
                                - $ref: '#/components/schemas/backgroundWorkerPatch'
                                - $ref: '#/components/schemas/cronJobPatch'
                                - $ref: '#/components/schemas/privateServicePatch'
                                - $ref: '#/components/schemas/staticSitePatch'
                                - $ref: '#/components/schemas/webServicePatch'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                discriminator:
                                    mapping:
                                        background_worker: '#/components/schemas/backgroundWorkerOutput'
                                        cron_job: '#/components/schemas/cronJobOutput'
                                        private_service: '#/components/schemas/privateServiceOutput'
                                        static_site: '#/components/schemas/staticSiteOutput'
                                        web_service: '#/components/schemas/webServiceOutput'
                                    propertyName: type
                                oneOf:
                                    - $ref: '#/components/schemas/backgroundWorkerOutput'
                                    - $ref: '#/components/schemas/cronJobOutput'
                                    - $ref: '#/components/schemas/privateServiceOutput'
                                    - $ref: '#/components/schemas/staticSiteOutput'
                                    - $ref: '#/components/schemas/webServiceOutput'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update service
            tags:
                - Services
    /services/{serviceId}/autoscaling:
        delete:
            description: |
                Delete the autoscaling config for a service given the service id.
            operationId: delete-autoscaling-config
            responses:
                "204":
                    description: Autoscaling config deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete autoscaling config
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        put:
            description: |
                Update the [autoscaling](https://docs.render.com/scaling#autoscaling) config for the service with the provided ID.
            operationId: autoscale-service
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/webServiceDetails/properties/autoscaling'
                    description: Autoscaling configuration updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update autoscaling config
            tags:
                - Services
    /services/{serviceId}/custom-domains:
        get:
            description: |
                List a particular service's custom domains that match the provided filters. If no filters are provided, all custom domains for the service are returned.
            operationId: list-custom-domains
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
                - description: Filter for the names of custom domain
                  explode: false
                  in: query
                  name: name
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for domain type
                  in: query
                  name: domainType
                  schema:
                    enum:
                        - apex
                        - subdomain
                    type: string
                - description: Filter for domain verification status (`verified` or `unverified`)
                  in: query
                  name: verificationStatus
                  schema:
                    enum:
                        - verified
                        - unverified
                    type: string
                - description: Filter for custom domains created before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: createdBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for custom domains created after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: createdAfter
                  schema:
                    format: date-time
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customDomainWithCursor'
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List custom domains
            tags:
                - Custom Domains
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Add a custom domain to the service with the provided ID.
            operationId: create-custom-domain
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    type: string
                            required:
                                - name
                            type: object
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customDomain'
                                type: array
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "402":
                    $ref: '#/components/responses/402PaymentRequired'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add custom domain
            tags:
                - Custom Domains
    /services/{serviceId}/custom-domains/{customDomainIdOrName}:
        delete:
            description: |
                Delete a custom domain for a service given the service id and custom domain id or name.
            operationId: delete-custom-domain
            responses:
                "204":
                    description: Custom domain deleted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete custom domain
            tags:
                - Custom Domains
        get:
            description: |
                Retrieve a particular custom domain for a particular service.
            operationId: retrieve-custom-domain
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/customDomain'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve custom domain
            tags:
                - Custom Domains
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/customDomainIdOrNameParam'
    /services/{serviceId}/custom-domains/{customDomainIdOrName}/verify:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/customDomainIdOrNameParam'
        post:
            description: |
                Verify the DNS configuration for a custom domain.
            operationId: refresh-custom-domain
            responses:
                "202":
                    description: Custom domain verification triggered
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Verify DNS configuration
            tags:
                - Custom Domains
    /services/{serviceId}/deploys:
        get:
            description: |
                List deploys matching the provided filters. If no filters are provided, all deploys for the service are returned.
            operationId: list-deploys
            parameters:
                - description: Filter for deploys created before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: createdBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for deploys created after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: createdAfter
                  schema:
                    format: date-time
                    type: string
                - description: Filter for deploys updated before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: updatedBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for deploys updated after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: updatedAfter
                  schema:
                    format: date-time
                    type: string
                - description: Filter for deploys finished before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: finishedBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for deploys finished after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: finishedAfter
                  schema:
                    format: date-time
                    type: string
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deployList'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List deploys
            tags:
                - Deploys
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Trigger a deploy for the service with the provided ID.
            operationId: create-deploy
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                clearCache:
                                    default: do_not_clear
                                    description: If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.
                                    enum:
                                        - clear
                                        - do_not_clear
                                    type: string
                                commitId:
                                    description: |
                                        The SHA of a specific Git commit to deploy for a service. Defaults to the latest commit on the service's connected branch.

                                        Note that deploying a specific commit with this endpoint does not disable autodeploys for the service.

                                        You can toggle autodeploys for your service with the [Update service](https://api-docs.render.com/reference/update-service) endpoint or in the Render Dashboard.

                                        Not supported for cron jobs.
                                    type: string
                                imageUrl:
                                    description: |
                                        The URL of the image to deploy for an image-backed service.

                                        The host, repository, and image name all must match the currently configured image for the service.
                                    type: string
                            type: object
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "409":
                    $ref: '#/components/responses/409Conflict'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Trigger deploy
            tags:
                - Deploys
    /services/{serviceId}/deploys/{deployId}:
        get:
            description: |
                Retrieve the details of a particular deploy for a particular service.
            operationId: retrieve-deploy
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve deploy
            tags:
                - Deploys
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/deployIdParam'
    /services/{serviceId}/deploys/{deployId}/cancel:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/deployIdParam'
        post:
            description: |
                Cancel an in-progress deploy for a service.

                Not supported for cron jobs.
            operationId: cancel-deploy
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Cancel deploy
            tags:
                - Deploys
    /services/{serviceId}/env-vars:
        get:
            description: |
                List all environment variables for the service with the provided ID.
            operationId: get-env-vars-for-service
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/envVarWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List environment variables
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        put:
            description: Replace all environment variables for a service with the provided list of environment variables.
            operationId: update-env-vars-for-service
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                envVars:
                                    items:
                                        $ref: '#/components/schemas/envVarInput'
                                    type: array
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/envVarWithCursor'
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update environment variables
            tags:
                - Services
    /services/{serviceId}/env-vars/{envVarKey}:
        delete:
            description: |
                Delete a particular environment variable from a particular service.

                This only applies to environment variables set directly on the service, not to environment variables in a linked environment group.
            operationId: delete-env-var
            responses:
                "204":
                    description: Environment variable deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete environment variable
            tags:
                - Services
        get:
            description: |
                Retrieve a particular environment variable for a particular service.

                This only applies to environment variables set directly on the service, not to environment variables in a linked environment group.
            operationId: retrieve-env-var
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envVar'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve environment variable
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/components/parameters/envVarKeyParam'
        put:
            description: |
                Add or update a particular environment variable for a particular service.

                This only applies to environment variables set directly on the service, not to environment variables in a linked environment group.
            operationId: update-env-var
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/addUpdateEnvVarInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/envVar'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add or update environment variable
            tags:
                - Services
    /services/{serviceId}/events:
        get:
            description: List recent events that occurred for the service with the provided ID.
            operationId: list-events
            parameters:
                - $ref: '#/components/parameters/serviceIdParam'
                - $ref: '#/components/parameters/eventTypeParam'
                - $ref: '#/components/parameters/startTimeParam'
                - $ref: '#/components/parameters/endTimeParam'
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/serviceEventWithCursor'
                                type: array
                    description: Successful response
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List events
            tags:
                - Services
    /services/{serviceId}/headers:
        get:
            description: |
                List a particular service's response header rules that match the provided filters. If no filters are provided, all rules for the service are returned.
            operationId: list-headers
            parameters:
                - description: Filter for specific paths that headers apply to
                  explode: false
                  in: query
                  name: path
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for header names
                  explode: false
                  in: query
                  name: name
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for header values
                  explode: false
                  in: query
                  name: value
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/headerWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List header rules
            tags:
                - Services - Headers
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Add a response header rule to the service with the provided ID.
            operationId: add-headers
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/headerInput'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                properties:
                                    headers:
                                        $ref: '#/components/schemas/header'
                                type: object
                    description: Created
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add header rule
            tags:
                - Services - Headers
        put:
            description: |
                Replace all header rules for a particular service with the provided list.

                **This deletes all existing header rules for the service that aren't included in the request.**
            operationId: update-headers
            requestBody:
                content:
                    application/json:
                        schema:
                            items:
                                $ref: '#/components/schemas/headerInput'
                            type: array
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/header'
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Replace header rules
            tags:
                - Services - Headers
    /services/{serviceId}/headers/{headerId}:
        delete:
            description: |
                Delete a particular response header rule for a particular service.
            operationId: delete-header
            responses:
                "204":
                    description: Header deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete header rule
            tags:
                - Services - Headers
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - description: The id of the header
              in: path
              name: headerId
              required: true
              schema:
                type: string
    /services/{serviceId}/jobs:
        get:
            description: |
                List jobs for the provided service that match the provided filters. If no filters are provided, all jobs for the service are returned.
            operationId: list-job
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
                - description: Filter for the status of the job (`pending`, `running`, `succeeded`, or `failed`)
                  explode: false
                  in: query
                  name: status
                  schema:
                    items:
                        enum:
                            - pending
                            - running
                            - succeeded
                            - failed
                        type: string
                    type: array
                  style: form
                - description: Filter for jobs created before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: createdBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for jobs created after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: createdAfter
                  schema:
                    format: date-time
                    type: string
                - description: Filter for jobs started before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: startedBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for jobs started after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: startedAfter
                  schema:
                    format: date-time
                    type: string
                - description: Filter for jobs finished before a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-06-17T08:15:30Z"
                  in: query
                  name: finishedBefore
                  schema:
                    format: date-time
                    type: string
                - description: Filter for jobs finished after a certain time (specified as an ISO 8601 timestamp)
                  example: "2021-02-17T08:15:30Z"
                  in: query
                  name: finishedAfter
                  schema:
                    format: date-time
                    type: string
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    properties:
                                        cursor:
                                            $ref: '#/components/schemas/cursor'
                                        job:
                                            $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs/post/responses/200/content/application~1json/schema'
                                    type: object
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List jobs
            tags:
                - One-Off Jobs
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Create a one-off job using the provided service. For details, see [One-Off Jobs](https://docs.render.com/jobs).
            operationId: post-job
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                planId:
                                    type: string
                                startCommand:
                                    type: string
                            required:
                                - startCommand
                            type: object
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create job
            tags:
                - One-Off Jobs
    /services/{serviceId}/jobs/{jobId}:
        get:
            description: |
                Retrieve the details of a particular one-off job for a particular service.
            operationId: retrieve-job
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Job'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve job
            tags:
                - One-Off Jobs
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - description: The ID of the job
              in: path
              name: jobId
              required: true
              schema:
                example: job-cph1rs3idesc73a2b2mg
                pattern: ^job-[0-9a-z]{20}$
                type: string
    /services/{serviceId}/jobs/{jobId}/cancel:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs~1%7BjobId%7D/parameters/1'
        post:
            description: |
                Cancel a particular one-off job for a particular service.
            operationId: cancel-job
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/paths/~1services~1%7BserviceId%7D~1jobs/post/responses/200/content/application~1json/schema'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Cancel running job
            tags:
                - One-Off Jobs
    /services/{serviceId}/preview:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Create a preview instance for an image-backed service. The preview uses the settings of the base service (referenced by `serviceId`), except settings overridden via provided parameters.

                View all active previews from your service's Previews tab in the Render Dashboard.

                Note that you can't create previews for Git-backed services using the Render API.
            operationId: preview-service
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/previewInput'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/serviceAndDeploy'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Create service preview (image-backed)
            tags:
                - Services
    /services/{serviceId}/restart:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Restart the service with the provided ID.

                Not supported for cron jobs.
            operationId: restart-service
            responses:
                "200":
                    description: Service restarted
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Restart service
            tags:
                - Services
    /services/{serviceId}/resume:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Resume the service with the provided ID (if it's currently suspended).
            operationId: resume-service
            responses:
                "202":
                    description: Service resumed successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Resume service
            tags:
                - Services
    /services/{serviceId}/rollback:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Trigger a rollback to a previous deploy of the specified service.

                Triggering a rollback with this endpoint does not disable autodeploys for the service. This means an autodeploy might restore changes you had intentionally rolled back.

                You can toggle autodeploys for your service with the [Update service](https://api-docs.render.com/reference/update-service) endpoint or in the Render Dashboard.
            operationId: rollback-deploy
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                deployId:
                                    description: The ID of the deploy to roll back to
                                    type: string
                            required:
                                - deployId
                            type: object
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/deploy'
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Roll back deploy
            tags:
                - Deploys
    /services/{serviceId}/routes:
        get:
            description: |
                List a particular service's redirect/rewrite rules that match the provided filters. If no filters are provided, all rules for the service are returned.
            operationId: list-routes
            parameters:
                - description: Filter for the type of route rule
                  explode: false
                  in: query
                  name: type
                  schema:
                    items:
                        enum:
                            - redirect
                            - rewrite
                        type: string
                    type: array
                  style: form
                - description: Filter for the source path of the route
                  explode: false
                  in: query
                  name: source
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - description: Filter for the destination path of the route
                  explode: false
                  in: query
                  name: destination
                  schema:
                    items:
                        type: string
                    type: array
                  style: form
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/routeWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List redirect/rewrite rules
            tags:
                - Services - Routes
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        patch:
            description: |
                Update the priority for a particular redirect/rewrite rule.

                To apply redirect/rewrite rules to an incoming request, Render starts from the rule with priority `0` and applies the first encountered rule that matches the request's path (if any).

                Render increments the priority of other rules by `1` as necessary to make space for the updated rule.
            operationId: patch-route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/routePatch'
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    headers:
                                        $ref: '#/components/schemas/route'
                                type: object
                    description: Updated
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update redirect/rewrite rule priority
            tags:
                - Services - Routes
        post:
            description: |
                Add redirect/rewrite rules to the service with the provided ID.
            operationId: add-route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/routePost'
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/route'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add redirect/rewrite rules
            tags:
                - Services - Routes
        put:
            description: |
                Replace all redirect/rewrite rules for a particular service with the provided list.

                **This deletes all existing redirect/rewrite rules for the service that aren't included in the request.**

                Rule priority is assigned according to list order (the first rule in the list has the highest priority).
            operationId: put-routes
            requestBody:
                content:
                    application/json:
                        schema:
                            items:
                                $ref: '#/components/schemas/routePut'
                            type: array
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/route'
                                type: array
                    description: Updated
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update redirect/rewrite rules
            tags:
                - Services - Routes
    /services/{serviceId}/routes/{routeId}:
        delete:
            description: |
                Delete a particular redirect/rewrite rule for a particular service.
            operationId: delete-route
            responses:
                "204":
                    description: Route deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete redirect/rewrite rule
            tags:
                - Services - Routes
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - description: The id of the route
              in: path
              name: routeId
              required: true
              schema:
                type: string
    /services/{serviceId}/scale:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                [Scale](https://docs.render.com/scaling#manual-scaling) the service with the provided ID to a fixed number of instances.

                Render ignores this value as long as autoscaling is enabled for the service.
            operationId: scale-service
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                numInstances:
                                    example: 3
                                    type: integer
                            required:
                                - numInstances
                            type: object
                required: true
            responses:
                "202":
                    description: Service scaled successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Scale instance count
            tags:
                - Services
    /services/{serviceId}/secret-files:
        get:
            description: |
                List all secret files for the service with the provided ID.
            operationId: list-secret-files-for-service
            parameters:
                - $ref: '#/components/parameters/cursorParam'
                - $ref: '#/components/parameters/limitParam'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/secretFileWithCursor'
                                type: array
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: List secret files
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        put:
            description: |
                Replace all secret files for a service with the provided list of secret files.

                **Any of the service's existing secret files not included in this request will be deleted.**

                This only applies to secret files set directly on the service, not to secret files in a linked environment group.
            operationId: update-secret-files-for-service
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                secretFiles:
                                    items:
                                        $ref: '#/components/schemas/secretFileInput'
                                    type: array
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/secretFileWithCursor'
                                type: array
                    description: OK
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Update secret files
            tags:
                - Services
    /services/{serviceId}/secret-files/{secretFileName}:
        delete:
            description: |
                Delete a particular secret file from a particular service.

                This only applies to secret files set directly on the service, not to secret files in a linked environment group.
            operationId: delete-secret-file
            responses:
                "204":
                    description: Secret file deleted
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Delete secret file
            tags:
                - Services
        get:
            description: |
                Retrieve a particular secret file for a particular service.

                This only applies to secret files set directly on the service, not to secret files in a linked environment group.
            operationId: retrieve-secret-file
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/secretFile'
                    description: OK
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Retrieve secret file
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
            - description: The file name of the secret file
              in: path
              name: secretFileName
              required: true
              schema:
                type: string
        put:
            description: |
                Add or update a particular secret file for a particular service.

                This only applies to secret files set directly on the service, not to secret files in a linked environment group.
            operationId: add-or-update-secret-file
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                content:
                                    type: string
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/secretFile'
                    description: Created
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Add or update secret file
            tags:
                - Services
    /services/{serviceId}/suspend:
        parameters:
            - $ref: '#/components/parameters/serviceIdParam'
        post:
            description: |
                Suspend the service with the provided ID.
            operationId: suspend-service
            responses:
                "202":
                    description: Service suspended successfully
                "400":
                    $ref: '#/components/responses/400BadRequest'
                "401":
                    $ref: '#/components/responses/401Unauthorized'
                "403":
                    $ref: '#/components/responses/403Forbidden'
                "404":
                    $ref: '#/components/responses/404NotFound'
                "406":
                    $ref: '#/components/responses/406NotAcceptable'
                "410":
                    $ref: '#/components/responses/410Gone'
                "429":
                    $ref: '#/components/responses/429RateLimit'
                "500":
                    $ref: '#/components/responses/500InternalServerError'
                "503":
                    $ref: '#/components/responses/503ServiceUnavailable'
            summary: Suspend service
            tags:
                - Services
security:
    - BearerAuth: []
servers:
    - url: https://api.render.com/v1
tags:
    - description: |
        [Blueprints](https://docs.render.com/infrastructure-as-code) allow you to define your resources in a `render.yaml` file and automatically sync changes to your Render services.
        The API gives control over how your blueprints are used to create and manage resources.
      name: Blueprints
    - description: |
        [Custom Domains](https://docs.render.com/custom-domains) allow you to associate domain names with your Render services.
      name: Custom Domains
    - description: |
        [Deploys](https://docs.render.com/deploys) are the process of updating your service with new code or configuration.
        These endpoints allow you to retrieve data on the deploys of your services
        as well as trigger new deploys and rollbacks. Most changes to your service
        will require a new deploy to take effect.

        To create and manage services, use the `Services` endpoints.
      name: Deploys
    - description: |
        [Disks](https://docs.render.com/disks) allow you to attach persistent storage to your services.
      name: Disks
    - description: Collections of environment variables and secret files that can be shared between multiple services
      name: Environment Groups
    - description: |
        [Logs](https://docs.render.com/logging) allow you to retrieve logs for your services, PostgreSQL databases, and redis instances.
        You can query for logs or subscribe to logs in real-time via a websocket.
      name: Logs
    - description: The `Maintenance` endpoints allow you to retrieve the latest maintenance runs for your Render services. You can also reschedule maintenance or trigger it to start immediately.
      name: Maintenance
    - description: The `Metrics` endpoints allow you to retrieve metrics for your services, PostgreSQL databases, and redis instances.
      name: Metrics
    - description: |
        [Notification Settings](https://docs.render.com/notifications) allow you to configure which notifications you want to recieve, and
        where you will receive them.
      name: Notification Settings
    - description: |
        [One-off jobs](https://docs.render.com/jobs) are standalone tasks that run to completion using the most recent successful build of an existing service.
      name: One-Off Jobs
    - description: The `Owners` endpoints supply more information about the users and teams that your API key has access to.
      name: Owners
    - description: |
        [PostgreSQL](https://docs.render.com/databases) endpoints enable you to interact with your Render PostgreSQL databases.
        You can manage databases, backups, recoveries, and failovers.
      name: PostgreSQL
    - description: Collections of services and other resources organized by environment (staging, production, etc.)
      name: Projects & Environments
    - description: |
        [Redis](https://docs.render.com/redis) allows you to interact with your Render Redis instances.
      name: Redis
    - description: |
        [Registry Credentials](https://docs.render.com/deploy-an-image#credentials-for-private-images) allows you to manage credentials for private Docker images.
      name: Registry Credentials
    - description: |
        [Services](https://docs.render.com/services) allow you to manage your web services, private services, background workers, cron jobs, and static sites.
      name: Services
    - description: |
        [Cron Jobs](https://docs.render.com/cronjobs) allow you to interact with runs of your cron jobs.
      name: Services - Cron Jobs
    - description: Use HTTP headers to inject response headers in static site responses. You can also use wildcards like /path/* to add headers to responses for all matching request paths.
      name: Services - Headers
    - description: Add Redirect or Rewrite Rules to modify requests to your site without writing code. You can use URL parameters to capture path segments, and wildcards to redirect everything under a given path.
      name: Services - Routes
