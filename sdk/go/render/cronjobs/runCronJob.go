// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cronjobs

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RunCronJob struct {
	pulumi.CustomResourceState

	// user who cancelled the cron job run
	CanceledBy pulumi.StringPtrOutput `pulumi:"canceledBy"`
	FinishedAt pulumi.StringPtrOutput `pulumi:"finishedAt"`
	StartedAt  pulumi.StringPtrOutput `pulumi:"startedAt"`
	Status     StatusOutput           `pulumi:"status"`
	// user who triggered the cron job run
	TriggeredBy pulumi.StringPtrOutput `pulumi:"triggeredBy"`
}

// NewRunCronJob registers a new resource with the given unique name, arguments, and options.
func NewRunCronJob(ctx *pulumi.Context,
	name string, args *RunCronJobArgs, opts ...pulumi.ResourceOption) (*RunCronJob, error) {
	if args == nil {
		args = &RunCronJobArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RunCronJob
	err := ctx.RegisterResource("render:cron-jobs:RunCronJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunCronJob gets an existing RunCronJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunCronJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunCronJobState, opts ...pulumi.ResourceOption) (*RunCronJob, error) {
	var resource RunCronJob
	err := ctx.ReadResource("render:cron-jobs:RunCronJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RunCronJob resources.
type runCronJobState struct {
}

type RunCronJobState struct {
}

func (RunCronJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*runCronJobState)(nil)).Elem()
}

type runCronJobArgs struct {
	// The ID of the cron job
	CronJobId *string `pulumi:"cronJobId"`
}

// The set of arguments for constructing a RunCronJob resource.
type RunCronJobArgs struct {
	// The ID of the cron job
	CronJobId pulumi.StringPtrInput
}

func (RunCronJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*runCronJobArgs)(nil)).Elem()
}

type RunCronJobInput interface {
	pulumi.Input

	ToRunCronJobOutput() RunCronJobOutput
	ToRunCronJobOutputWithContext(ctx context.Context) RunCronJobOutput
}

func (*RunCronJob) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCronJob)(nil)).Elem()
}

func (i *RunCronJob) ToRunCronJobOutput() RunCronJobOutput {
	return i.ToRunCronJobOutputWithContext(context.Background())
}

func (i *RunCronJob) ToRunCronJobOutputWithContext(ctx context.Context) RunCronJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunCronJobOutput)
}

type RunCronJobOutput struct{ *pulumi.OutputState }

func (RunCronJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunCronJob)(nil)).Elem()
}

func (o RunCronJobOutput) ToRunCronJobOutput() RunCronJobOutput {
	return o
}

func (o RunCronJobOutput) ToRunCronJobOutputWithContext(ctx context.Context) RunCronJobOutput {
	return o
}

// user who cancelled the cron job run
func (o RunCronJobOutput) CanceledBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCronJob) pulumi.StringPtrOutput { return v.CanceledBy }).(pulumi.StringPtrOutput)
}

func (o RunCronJobOutput) FinishedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCronJob) pulumi.StringPtrOutput { return v.FinishedAt }).(pulumi.StringPtrOutput)
}

func (o RunCronJobOutput) StartedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCronJob) pulumi.StringPtrOutput { return v.StartedAt }).(pulumi.StringPtrOutput)
}

func (o RunCronJobOutput) Status() StatusOutput {
	return o.ApplyT(func(v *RunCronJob) StatusOutput { return v.Status }).(StatusOutput)
}

// user who triggered the cron job run
func (o RunCronJobOutput) TriggeredBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunCronJob) pulumi.StringPtrOutput { return v.TriggeredBy }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RunCronJobInput)(nil)).Elem(), &RunCronJob{})
	pulumi.RegisterOutputType(RunCronJobOutput{})
}
