// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class GetCustomDomain
    {
        public static Task<Outputs.CustomDomain> InvokeAsync(GetCustomDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<Outputs.CustomDomain>("render:services:getCustomDomain", args ?? new GetCustomDomainArgs(), options.WithDefaults());

        public static Output<Outputs.CustomDomain> Invoke(GetCustomDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<Outputs.CustomDomain>("render:services:getCustomDomain", args ?? new GetCustomDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or name of the custom domain
        /// </summary>
        [Input("customDomainIdOrName", required: true)]
        public string CustomDomainIdOrName { get; set; } = null!;

        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public GetCustomDomainArgs()
        {
        }
        public static new GetCustomDomainArgs Empty => new GetCustomDomainArgs();
    }

    public sealed class GetCustomDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID or name of the custom domain
        /// </summary>
        [Input("customDomainIdOrName", required: true)]
        public Input<string> CustomDomainIdOrName { get; set; } = null!;

        /// <summary>
        /// The ID of the service
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public GetCustomDomainInvokeArgs()
        {
        }
        public static new GetCustomDomainInvokeArgs Empty => new GetCustomDomainInvokeArgs();
    }
}
