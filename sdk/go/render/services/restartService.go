// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestartService struct {
	pulumi.CustomResourceState
}

// NewRestartService registers a new resource with the given unique name, arguments, and options.
func NewRestartService(ctx *pulumi.Context,
	name string, args *RestartServiceArgs, opts ...pulumi.ResourceOption) (*RestartService, error) {
	if args == nil {
		args = &RestartServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestartService
	err := ctx.RegisterResource("render:services:RestartService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartService gets an existing RestartService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartServiceState, opts ...pulumi.ResourceOption) (*RestartService, error) {
	var resource RestartService
	err := ctx.ReadResource("render:services:RestartService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartService resources.
type restartServiceState struct {
}

type RestartServiceState struct {
}

func (RestartServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartServiceState)(nil)).Elem()
}

type restartServiceArgs struct {
	// The ID of the service
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a RestartService resource.
type RestartServiceArgs struct {
	// The ID of the service
	ServiceId pulumi.StringPtrInput
}

func (RestartServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartServiceArgs)(nil)).Elem()
}

type RestartServiceInput interface {
	pulumi.Input

	ToRestartServiceOutput() RestartServiceOutput
	ToRestartServiceOutputWithContext(ctx context.Context) RestartServiceOutput
}

func (*RestartService) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartService)(nil)).Elem()
}

func (i *RestartService) ToRestartServiceOutput() RestartServiceOutput {
	return i.ToRestartServiceOutputWithContext(context.Background())
}

func (i *RestartService) ToRestartServiceOutputWithContext(ctx context.Context) RestartServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartServiceOutput)
}

type RestartServiceOutput struct{ *pulumi.OutputState }

func (RestartServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartService)(nil)).Elem()
}

func (o RestartServiceOutput) ToRestartServiceOutput() RestartServiceOutput {
	return o
}

func (o RestartServiceOutput) ToRestartServiceOutputWithContext(ctx context.Context) RestartServiceOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartServiceInput)(nil)).Elem(), &RestartService{})
	pulumi.RegisterOutputType(RestartServiceOutput{})
}
