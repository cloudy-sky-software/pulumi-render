# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'EnvGroupLink',
    'EnvGroupMeta',
    'EnvVar',
    'SecretFile',
]

@pulumi.output_type
class EnvGroupLink(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 type: 'EnvGroupLinkType'):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> 'EnvGroupLinkType':
        return pulumi.get(self, "type")


@pulumi.output_type
class EnvGroupMeta(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 owner_id: builtins.str,
                 service_links: Sequence['outputs.EnvGroupLink'],
                 updated_at: builtins.str,
                 environment_id: Optional[builtins.str] = None):
        """
        :param Sequence['EnvGroupLink'] service_links: List of serviceIds linked to the envGroup
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "service_links", service_links)
        pulumi.set(__self__, "updated_at", updated_at)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> builtins.str:
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter(name="serviceLinks")
    def service_links(self) -> Sequence['outputs.EnvGroupLink']:
        """
        List of serviceIds linked to the envGroup
        """
        return pulumi.get(self, "service_links")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "environment_id")


@pulumi.output_type
class EnvVar(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SecretFile(dict):
    def __init__(__self__, *,
                 content: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> builtins.str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


