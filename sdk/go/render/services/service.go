// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Service struct {
	pulumi.CustomResourceState

	AutoDeploy     ServiceAutoDeployOutput          `pulumi:"autoDeploy"`
	Branch         pulumi.StringPtrOutput           `pulumi:"branch"`
	BuildFilter    BuildFilterPtrOutput             `pulumi:"buildFilter"`
	CreatedAt      pulumi.StringOutput              `pulumi:"createdAt"`
	EnvVars        pulumi.ArrayOutput               `pulumi:"envVars"`
	Image          ImagePtrOutput                   `pulumi:"image"`
	ImagePath      pulumi.StringPtrOutput           `pulumi:"imagePath"`
	Name           pulumi.StringOutput              `pulumi:"name"`
	NotifyOnFail   ServiceNotifyOnFailOutput        `pulumi:"notifyOnFail"`
	OwnerId        pulumi.StringOutput              `pulumi:"ownerId"`
	Repo           pulumi.StringPtrOutput           `pulumi:"repo"`
	RootDir        pulumi.StringOutput              `pulumi:"rootDir"`
	SecretFiles    SecretFileArrayOutput            `pulumi:"secretFiles"`
	ServiceDetails pulumi.AnyOutput                 `pulumi:"serviceDetails"`
	Slug           pulumi.StringOutput              `pulumi:"slug"`
	Suspended      ServiceSuspendedOutput           `pulumi:"suspended"`
	Suspenders     ServiceSuspendersItemArrayOutput `pulumi:"suspenders"`
	Type           ServiceTypeEnumOutput            `pulumi:"type"`
	UpdatedAt      pulumi.StringOutput              `pulumi:"updatedAt"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.AutoDeploy == nil {
		args.AutoDeploy = ServiceAutoDeploy("yes")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("render:services:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("render:services:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Defaults to "yes"
	AutoDeploy *ServiceAutoDeploy `pulumi:"autoDeploy"`
	// If left empty, this will fall back to the default branch of the repository
	Branch      *string       `pulumi:"branch"`
	BuildFilter *BuildFilter  `pulumi:"buildFilter"`
	EnvVars     []interface{} `pulumi:"envVars"`
	Image       *Image        `pulumi:"image"`
	Name        *string       `pulumi:"name"`
	OwnerId     string        `pulumi:"ownerId"`
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           *string         `pulumi:"repo"`
	RootDir        *string         `pulumi:"rootDir"`
	SecretFiles    []SecretFile    `pulumi:"secretFiles"`
	ServiceDetails interface{}     `pulumi:"serviceDetails"`
	Type           ServiceTypeEnum `pulumi:"type"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Defaults to "yes"
	AutoDeploy ServiceAutoDeployPtrInput
	// If left empty, this will fall back to the default branch of the repository
	Branch      pulumi.StringPtrInput
	BuildFilter BuildFilterPtrInput
	EnvVars     pulumi.ArrayInput
	Image       ImagePtrInput
	Name        pulumi.StringPtrInput
	OwnerId     pulumi.StringInput
	// Do not include the branch in the repo string. You can instead supply a 'branch' parameter.
	Repo           pulumi.StringPtrInput
	RootDir        pulumi.StringPtrInput
	SecretFiles    SecretFileArrayInput
	ServiceDetails pulumi.Input
	Type           ServiceTypeEnumInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) AutoDeploy() ServiceAutoDeployOutput {
	return o.ApplyT(func(v *Service) ServiceAutoDeployOutput { return v.AutoDeploy }).(ServiceAutoDeployOutput)
}

func (o ServiceOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Branch }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) BuildFilter() BuildFilterPtrOutput {
	return o.ApplyT(func(v *Service) BuildFilterPtrOutput { return v.BuildFilter }).(BuildFilterPtrOutput)
}

func (o ServiceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ServiceOutput) EnvVars() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.ArrayOutput { return v.EnvVars }).(pulumi.ArrayOutput)
}

func (o ServiceOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v *Service) ImagePtrOutput { return v.Image }).(ImagePtrOutput)
}

func (o ServiceOutput) ImagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ImagePath }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceOutput) NotifyOnFail() ServiceNotifyOnFailOutput {
	return o.ApplyT(func(v *Service) ServiceNotifyOnFailOutput { return v.NotifyOnFail }).(ServiceNotifyOnFailOutput)
}

func (o ServiceOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Repo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Repo }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) RootDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.RootDir }).(pulumi.StringOutput)
}

func (o ServiceOutput) SecretFiles() SecretFileArrayOutput {
	return o.ApplyT(func(v *Service) SecretFileArrayOutput { return v.SecretFiles }).(SecretFileArrayOutput)
}

func (o ServiceOutput) ServiceDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v *Service) pulumi.AnyOutput { return v.ServiceDetails }).(pulumi.AnyOutput)
}

func (o ServiceOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o ServiceOutput) Suspended() ServiceSuspendedOutput {
	return o.ApplyT(func(v *Service) ServiceSuspendedOutput { return v.Suspended }).(ServiceSuspendedOutput)
}

func (o ServiceOutput) Suspenders() ServiceSuspendersItemArrayOutput {
	return o.ApplyT(func(v *Service) ServiceSuspendersItemArrayOutput { return v.Suspenders }).(ServiceSuspendersItemArrayOutput)
}

func (o ServiceOutput) Type() ServiceTypeEnumOutput {
	return o.ApplyT(func(v *Service) ServiceTypeEnumOutput { return v.Type }).(ServiceTypeEnumOutput)
}

func (o ServiceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
