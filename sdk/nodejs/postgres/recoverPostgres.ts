// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class RecoverPostgres extends pulumi.CustomResource {
    /**
     * Get an existing RecoverPostgres resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RecoverPostgres {
        return new RecoverPostgres(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:postgres:RecoverPostgres';

    /**
     * Returns true if the given object is an instance of RecoverPostgres.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RecoverPostgres {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecoverPostgres.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The URL to view the PostgreSQL instance in the Render Dashboard
     */
    public /*out*/ readonly dashboardUrl!: pulumi.Output<string>;
    public /*out*/ readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly databaseUser!: pulumi.Output<string>;
    /**
     * Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
     */
    public readonly datadogApiKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly diskSizeGB!: pulumi.Output<number | undefined>;
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * The time at which the database will be expire. Applies to free tier databases only.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string | undefined>;
    public /*out*/ readonly highAvailabilityEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly ipAllowList!: pulumi.Output<outputs.postgres.CidrBlockAndDescription[]>;
    public /*out*/ readonly maintenance!: pulumi.Output<outputs.postgres.RedisDetailpropertiesmaintenance | undefined>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<outputs.postgres.Owner>;
    public readonly plan!: pulumi.Output<enums.postgres.Plan>;
    public /*out*/ readonly primaryPostgresID!: pulumi.Output<string | undefined>;
    public /*out*/ readonly readReplicas!: pulumi.Output<outputs.postgres.ReadReplica[]>;
    /**
     * Defaults to "oregon"
     */
    public /*out*/ readonly region!: pulumi.Output<enums.postgres.Region>;
    /**
     * Name of the new database.
     */
    public readonly restoreName!: pulumi.Output<string | undefined>;
    /**
     * The point in time to restore the database to. See `/recovery-info` for restore availability
     */
    public readonly restoreTime!: pulumi.Output<string>;
    public /*out*/ readonly role!: pulumi.Output<enums.postgres.Role>;
    public /*out*/ readonly status!: pulumi.Output<enums.postgres.Status>;
    public /*out*/ readonly suspended!: pulumi.Output<enums.postgres.RecoverPostgresSuspended>;
    public /*out*/ readonly suspenders!: pulumi.Output<enums.postgres.SuspendersItem[]>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The PostgreSQL version
     */
    public /*out*/ readonly version!: pulumi.Output<enums.postgres.Version>;

    /**
     * Create a RecoverPostgres resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecoverPostgresArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.restoreTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restoreTime'");
            }
            resourceInputs["datadogApiKey"] = args ? args.datadogApiKey : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["postgresId"] = args ? args.postgresId : undefined;
            resourceInputs["restoreName"] = args ? args.restoreName : undefined;
            resourceInputs["restoreTime"] = args ? args.restoreTime : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseUser"] = undefined /*out*/;
            resourceInputs["diskSizeGB"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["highAvailabilityEnabled"] = undefined /*out*/;
            resourceInputs["ipAllowList"] = undefined /*out*/;
            resourceInputs["maintenance"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["primaryPostgresID"] = undefined /*out*/;
            resourceInputs["readReplicas"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["suspenders"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        } else {
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dashboardUrl"] = undefined /*out*/;
            resourceInputs["databaseName"] = undefined /*out*/;
            resourceInputs["databaseUser"] = undefined /*out*/;
            resourceInputs["datadogApiKey"] = undefined /*out*/;
            resourceInputs["diskSizeGB"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["highAvailabilityEnabled"] = undefined /*out*/;
            resourceInputs["ipAllowList"] = undefined /*out*/;
            resourceInputs["maintenance"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["plan"] = undefined /*out*/;
            resourceInputs["primaryPostgresID"] = undefined /*out*/;
            resourceInputs["readReplicas"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["restoreName"] = undefined /*out*/;
            resourceInputs["restoreTime"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["suspenders"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RecoverPostgres.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a RecoverPostgres resource.
 */
export interface RecoverPostgresArgs {
    /**
     * Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database.
     */
    datadogApiKey?: pulumi.Input<string>;
    /**
     * The environment to create the new database in. Defaults to the environment of the original database.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database.
     */
    plan?: pulumi.Input<string>;
    postgresId?: pulumi.Input<string>;
    /**
     * Name of the new database.
     */
    restoreName?: pulumi.Input<string>;
    /**
     * The point in time to restore the database to. See `/recovery-info` for restore availability
     */
    restoreTime: pulumi.Input<string>;
}
