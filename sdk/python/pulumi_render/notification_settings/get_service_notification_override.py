# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetServiceNotificationOverrideResult',
    'AwaitableGetServiceNotificationOverrideResult',
    'get_service_notification_override',
    'get_service_notification_override_output',
]

@pulumi.output_type
class GetServiceNotificationOverrideResult:
    def __init__(__self__, notifications_to_send=None, preview_notifications_enabled=None, service_id=None):
        if notifications_to_send and not isinstance(notifications_to_send, str):
            raise TypeError("Expected argument 'notifications_to_send' to be a str")
        pulumi.set(__self__, "notifications_to_send", notifications_to_send)
        if preview_notifications_enabled and not isinstance(preview_notifications_enabled, str):
            raise TypeError("Expected argument 'preview_notifications_enabled' to be a str")
        pulumi.set(__self__, "preview_notifications_enabled", preview_notifications_enabled)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="notificationsToSend")
    def notifications_to_send(self) -> 'GetServiceNotificationOverridePropertiesNotificationsToSend':
        return pulumi.get(self, "notifications_to_send")

    @property
    @pulumi.getter(name="previewNotificationsEnabled")
    def preview_notifications_enabled(self) -> 'GetServiceNotificationOverridePropertiesPreviewNotificationsEnabled':
        return pulumi.get(self, "preview_notifications_enabled")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> builtins.str:
        return pulumi.get(self, "service_id")


class AwaitableGetServiceNotificationOverrideResult(GetServiceNotificationOverrideResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceNotificationOverrideResult(
            notifications_to_send=self.notifications_to_send,
            preview_notifications_enabled=self.preview_notifications_enabled,
            service_id=self.service_id)


def get_service_notification_override(service_id: Optional[builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceNotificationOverrideResult:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str service_id: The ID of the service
    """
    __args__ = dict()
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('render:notification-settings:getServiceNotificationOverride', __args__, opts=opts, typ=GetServiceNotificationOverrideResult).value

    return AwaitableGetServiceNotificationOverrideResult(
        notifications_to_send=pulumi.get(__ret__, 'notifications_to_send'),
        preview_notifications_enabled=pulumi.get(__ret__, 'preview_notifications_enabled'),
        service_id=pulumi.get(__ret__, 'service_id'))
def get_service_notification_override_output(service_id: Optional[pulumi.Input[builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceNotificationOverrideResult]:
    """
    Use this data source to access information about an existing resource.

    :param builtins.str service_id: The ID of the service
    """
    __args__ = dict()
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('render:notification-settings:getServiceNotificationOverride', __args__, opts=opts, typ=GetServiceNotificationOverrideResult)
    return __ret__.apply(lambda __response__: GetServiceNotificationOverrideResult(
        notifications_to_send=pulumi.get(__response__, 'notifications_to_send'),
        preview_notifications_enabled=pulumi.get(__response__, 'preview_notifications_enabled'),
        service_id=pulumi.get(__response__, 'service_id')))
