// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package environments

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Environment struct {
	pulumi.CustomResourceState

	DatabasesIds pulumi.StringArrayOutput `pulumi:"databasesIds"`
	EnvGroupIds  pulumi.StringArrayOutput `pulumi:"envGroupIds"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	// Indicates whether network connections across environments are allowed.
	NetworkIsolationEnabled pulumi.BoolOutput   `pulumi:"networkIsolationEnabled"`
	ProjectId               pulumi.StringOutput `pulumi:"projectId"`
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus ProtectedStatusOutput    `pulumi:"protectedStatus"`
	RedisIds        pulumi.StringArrayOutput `pulumi:"redisIds"`
	ServiceIds      pulumi.StringArrayOutput `pulumi:"serviceIds"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOption) (*Environment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Environment
	err := ctx.RegisterResource("render:environments:Environment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnvironmentState, opts ...pulumi.ResourceOption) (*Environment, error) {
	var resource Environment
	err := ctx.ReadResource("render:environments:Environment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Environment resources.
type environmentState struct {
}

type EnvironmentState struct {
}

func (EnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentState)(nil)).Elem()
}

type environmentArgs struct {
	Name *string `pulumi:"name"`
	// Indicates whether network connections across environments are allowed.
	NetworkIsolationEnabled *bool  `pulumi:"networkIsolationEnabled"`
	ProjectId               string `pulumi:"projectId"`
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus *ProtectedStatus `pulumi:"protectedStatus"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	Name pulumi.StringPtrInput
	// Indicates whether network connections across environments are allowed.
	NetworkIsolationEnabled pulumi.BoolPtrInput
	ProjectId               pulumi.StringInput
	// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
	ProtectedStatus ProtectedStatusPtrInput
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*environmentArgs)(nil)).Elem()
}

type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput
}

func (*Environment) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *Environment) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i *Environment) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) DatabasesIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.DatabasesIds }).(pulumi.StringArrayOutput)
}

func (o EnvironmentOutput) EnvGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.EnvGroupIds }).(pulumi.StringArrayOutput)
}

func (o EnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether network connections across environments are allowed.
func (o EnvironmentOutput) NetworkIsolationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Environment) pulumi.BoolOutput { return v.NetworkIsolationEnabled }).(pulumi.BoolOutput)
}

func (o EnvironmentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
func (o EnvironmentOutput) ProtectedStatus() ProtectedStatusOutput {
	return o.ApplyT(func(v *Environment) ProtectedStatusOutput { return v.ProtectedStatus }).(ProtectedStatusOutput)
}

func (o EnvironmentOutput) RedisIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.RedisIds }).(pulumi.StringArrayOutput)
}

func (o EnvironmentOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), &Environment{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
}
