// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DiskArgs } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { GetDiskArgs, GetDiskResult, GetDiskOutputArgs } from "./getDisk";
export const getDisk: typeof import("./getDisk").getDisk = null as any;
export const getDiskOutput: typeof import("./getDisk").getDiskOutput = null as any;
utilities.lazyLoad(exports, ["getDisk","getDiskOutput"], () => require("./getDisk"));

export { ListDisksArgs, ListDisksResult } from "./listDisks";
export const listDisks: typeof import("./listDisks").listDisks = null as any;
export const listDisksOutput: typeof import("./listDisks").listDisksOutput = null as any;
utilities.lazyLoad(exports, ["listDisks","listDisksOutput"], () => require("./listDisks"));

export { RestoreSnapshotArgs } from "./restoreSnapshot";
export type RestoreSnapshot = import("./restoreSnapshot").RestoreSnapshot;
export const RestoreSnapshot: typeof import("./restoreSnapshot").RestoreSnapshot = null as any;
utilities.lazyLoad(exports, ["RestoreSnapshot"], () => require("./restoreSnapshot"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "render:disks:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "render:disks:RestoreSnapshot":
                return new RestoreSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("render", "disks", _module)
