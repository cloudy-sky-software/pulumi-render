// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupPostgres(ctx *pulumi.Context, args *LookupPostgresArgs, opts ...pulumi.InvokeOption) (*LookupPostgresResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPostgresResult
	err := ctx.Invoke("render:postgres:getPostgres", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupPostgresArgs struct {
	PostgresId string `pulumi:"postgresId"`
}

type LookupPostgresResult struct {
	Items PostgresDetail `pulumi:"items"`
}

// Defaults sets the appropriate defaults for LookupPostgresResult
func (val *LookupPostgresResult) Defaults() *LookupPostgresResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Items = *tmp.Items.Defaults()

	return &tmp
}

func LookupPostgresOutput(ctx *pulumi.Context, args LookupPostgresOutputArgs, opts ...pulumi.InvokeOption) LookupPostgresResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPostgresResult, error) {
			args := v.(LookupPostgresArgs)
			r, err := LookupPostgres(ctx, &args, opts...)
			var s LookupPostgresResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPostgresResultOutput)
}

type LookupPostgresOutputArgs struct {
	PostgresId pulumi.StringInput `pulumi:"postgresId"`
}

func (LookupPostgresOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPostgresArgs)(nil)).Elem()
}

type LookupPostgresResultOutput struct{ *pulumi.OutputState }

func (LookupPostgresResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPostgresResult)(nil)).Elem()
}

func (o LookupPostgresResultOutput) ToLookupPostgresResultOutput() LookupPostgresResultOutput {
	return o
}

func (o LookupPostgresResultOutput) ToLookupPostgresResultOutputWithContext(ctx context.Context) LookupPostgresResultOutput {
	return o
}

func (o LookupPostgresResultOutput) Items() PostgresDetailOutput {
	return o.ApplyT(func(v LookupPostgresResult) PostgresDetail { return v.Items }).(PostgresDetailOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPostgresResultOutput{})
}
