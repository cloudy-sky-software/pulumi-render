// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class ListJob
    {
        public static Task<ListJobResult> InvokeAsync(ListJobArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListJobResult>("render:services:listJob", args ?? new ListJobArgs(), options.WithDefaults());

        public static Output<ListJobResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListJobResult>("render:services:listJob", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListJobArgs : global::Pulumi.InvokeArgs
    {
        public ListJobArgs()
        {
        }
        public static new ListJobArgs Empty => new ListJobArgs();
    }


    [OutputType]
    public sealed class ListJobResult
    {
        public readonly ImmutableArray<Outputs.ListJobItemProperties> Items;

        [OutputConstructor]
        private ListJobResult(ImmutableArray<Outputs.ListJobItemProperties> items)
        {
            Items = items;
        }
    }
}
