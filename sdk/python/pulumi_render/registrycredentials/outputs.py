# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'RegistryCredential',
]

@pulumi.output_type
class RegistryCredential(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 registry: 'RegistryCredentialRegistry',
                 username: str):
        """
        :param str id: Unique identifier for this credential
        :param str name: Descriptive name for this credential
        :param 'RegistryCredentialRegistry' registry: The registry to use this credential with
        :param str username: The username associated with the credential
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier for this credential
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Descriptive name for this credential
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def registry(self) -> 'RegistryCredentialRegistry':
        """
        The registry to use this credential with
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username associated with the credential
        """
        return pulumi.get(self, "username")


