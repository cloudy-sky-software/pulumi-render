# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'WebhookEventWithCursor',
    'WebhookEventWithCursorWebhookEventProperties',
    'WebhookWithCursor',
    'WebhookWithCursorWebhookProperties',
]

@pulumi.output_type
class WebhookEventWithCursor(dict):
    def __init__(__self__, *,
                 cursor: str,
                 webhook_event: 'outputs.WebhookEventWithCursorWebhookEventProperties'):
        pulumi.set(__self__, "cursor", cursor)
        pulumi.set(__self__, "webhook_event", webhook_event)

    @property
    @pulumi.getter
    def cursor(self) -> str:
        return pulumi.get(self, "cursor")

    @property
    @pulumi.getter(name="webhookEvent")
    def webhook_event(self) -> 'outputs.WebhookEventWithCursorWebhookEventProperties':
        return pulumi.get(self, "webhook_event")


@pulumi.output_type
class WebhookEventWithCursorWebhookEventProperties(dict):
    def __init__(__self__, *,
                 event_id: str,
                 event_type: 'WebhookEventWithCursorWebhookEventPropertiesEventType',
                 id: str,
                 sent_at: str,
                 error: Optional[str] = None,
                 response_body: Optional[str] = None,
                 status_code: Optional[int] = None):
        """
        :param str event_id: the id of the event that triggered the webhook
        :param str id: the id of the webhook event
        :param str error: error is populated when an error occurs without a response such as a timeout
        """
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sent_at", sent_at)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if response_body is not None:
            pulumi.set(__self__, "response_body", response_body)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> str:
        """
        the id of the event that triggered the webhook
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> 'WebhookEventWithCursorWebhookEventPropertiesEventType':
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the id of the webhook event
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sentAt")
    def sent_at(self) -> str:
        return pulumi.get(self, "sent_at")

    @property
    @pulumi.getter
    def error(self) -> Optional[str]:
        """
        error is populated when an error occurs without a response such as a timeout
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> Optional[str]:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[int]:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class WebhookWithCursor(dict):
    def __init__(__self__, *,
                 cursor: str,
                 webhook: 'outputs.WebhookWithCursorWebhookProperties'):
        pulumi.set(__self__, "cursor", cursor)
        pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def cursor(self) -> str:
        return pulumi.get(self, "cursor")

    @property
    @pulumi.getter
    def webhook(self) -> 'outputs.WebhookWithCursorWebhookProperties':
        return pulumi.get(self, "webhook")


@pulumi.output_type
class WebhookWithCursorWebhookProperties(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 event_filter: Sequence['WebhookWithCursorWebhookPropertiesEventFilterItem'],
                 id: str,
                 name: str,
                 secret: str,
                 url: str):
        """
        :param Sequence['WebhookWithCursorWebhookPropertiesEventFilterItem'] event_filter: The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_filter", event_filter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventFilter")
    def event_filter(self) -> Sequence['WebhookWithCursorWebhookPropertiesEventFilterItem']:
        """
        The event types that will trigger the webhook. An empty list means all event types will trigger the webhook.
        """
        return pulumi.get(self, "event_filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


