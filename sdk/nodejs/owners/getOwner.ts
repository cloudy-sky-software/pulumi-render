// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getOwner(args: GetOwnerArgs, opts?: pulumi.InvokeOptions): Promise<GetOwnerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("render:owners:getOwner", {
        "ownerId": args.ownerId,
    }, opts);
}

export interface GetOwnerArgs {
    /**
     * The ID of the user or team
     */
    ownerId: string;
}

export interface GetOwnerResult {
    readonly email: string;
    readonly id: string;
    readonly name: string;
    /**
     * Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
     */
    readonly twoFactorAuthEnabled?: boolean;
    readonly type: enums.owners.OwnerType;
}
export function getOwnerOutput(args: GetOwnerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetOwnerResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("render:owners:getOwner", {
        "ownerId": args.ownerId,
    }, opts);
}

export interface GetOwnerOutputArgs {
    /**
     * The ID of the user or team
     */
    ownerId: pulumi.Input<string>;
}
