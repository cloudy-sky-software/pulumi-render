// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestartServer struct {
	pulumi.CustomResourceState
}

// NewRestartServer registers a new resource with the given unique name, arguments, and options.
func NewRestartServer(ctx *pulumi.Context,
	name string, args *RestartServerArgs, opts ...pulumi.ResourceOption) (*RestartServer, error) {
	if args == nil {
		args = &RestartServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestartServer
	err := ctx.RegisterResource("render:services:RestartServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartServer gets an existing RestartServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartServerState, opts ...pulumi.ResourceOption) (*RestartServer, error) {
	var resource RestartServer
	err := ctx.ReadResource("render:services:RestartServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartServer resources.
type restartServerState struct {
}

type RestartServerState struct {
}

func (RestartServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartServerState)(nil)).Elem()
}

type restartServerArgs struct {
}

// The set of arguments for constructing a RestartServer resource.
type RestartServerArgs struct {
}

func (RestartServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartServerArgs)(nil)).Elem()
}

type RestartServerInput interface {
	pulumi.Input

	ToRestartServerOutput() RestartServerOutput
	ToRestartServerOutputWithContext(ctx context.Context) RestartServerOutput
}

func (*RestartServer) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartServer)(nil)).Elem()
}

func (i *RestartServer) ToRestartServerOutput() RestartServerOutput {
	return i.ToRestartServerOutputWithContext(context.Background())
}

func (i *RestartServer) ToRestartServerOutputWithContext(ctx context.Context) RestartServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartServerOutput)
}

type RestartServerOutput struct{ *pulumi.OutputState }

func (RestartServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartServer)(nil)).Elem()
}

func (o RestartServerOutput) ToRestartServerOutput() RestartServerOutput {
	return o
}

func (o RestartServerOutput) ToRestartServerOutputWithContext(ctx context.Context) RestartServerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartServerInput)(nil)).Elem(), &RestartServer{})
	pulumi.RegisterOutputType(RestartServerOutput{})
}
