# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'Owner',
    'Project',
    'ProjectCreateEnvironmentInput',
    'ProjectWithCursor',
]

@pulumi.output_type
class Owner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "twoFactorAuthEnabled":
            suggest = "two_factor_auth_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Owner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Owner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Owner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: 'OwnerType',
                 two_factor_auth_enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool two_factor_auth_enabled: Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if two_factor_auth_enabled is not None:
            pulumi.set(__self__, "two_factor_auth_enabled", two_factor_auth_enabled)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> 'OwnerType':
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="twoFactorAuthEnabled")
    def two_factor_auth_enabled(self) -> Optional[_builtins.bool]:
        """
        Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
        """
        return pulumi.get(self, "two_factor_auth_enabled")


@pulumi.output_type
class Project(dict):
    """
    A project is a collection of environments
    """
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 environment_ids: Sequence[_builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 owner: 'outputs.Owner',
                 updated_at: _builtins.str):
        """
        A project is a collection of environments
        :param Sequence[_builtins.str] environment_ids: The environments associated with the project
        :param _builtins.str id: The ID of the project
        :param _builtins.str name: The name of the project
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "environment_ids", environment_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Sequence[_builtins.str]:
        """
        The environments associated with the project
        """
        return pulumi.get(self, "environment_ids")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the project
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the project
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> 'outputs.Owner':
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ProjectCreateEnvironmentInput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkIsolationEnabled":
            suggest = "network_isolation_enabled"
        elif key == "protectedStatus":
            suggest = "protected_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectCreateEnvironmentInput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectCreateEnvironmentInput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectCreateEnvironmentInput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 network_isolation_enabled: Optional[_builtins.bool] = None,
                 protected_status: Optional['ProjectCreateEnvironmentInputProtectedStatus'] = None):
        """
        :param _builtins.bool network_isolation_enabled: Indicates whether network connections across environments are allowed.
        :param 'ProjectCreateEnvironmentInputProtectedStatus' protected_status: Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
        """
        pulumi.set(__self__, "name", name)
        if network_isolation_enabled is not None:
            pulumi.set(__self__, "network_isolation_enabled", network_isolation_enabled)
        if protected_status is not None:
            pulumi.set(__self__, "protected_status", protected_status)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkIsolationEnabled")
    def network_isolation_enabled(self) -> Optional[_builtins.bool]:
        """
        Indicates whether network connections across environments are allowed.
        """
        return pulumi.get(self, "network_isolation_enabled")

    @_builtins.property
    @pulumi.getter(name="protectedStatus")
    def protected_status(self) -> Optional['ProjectCreateEnvironmentInputProtectedStatus']:
        """
        Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.
        """
        return pulumi.get(self, "protected_status")


@pulumi.output_type
class ProjectWithCursor(dict):
    def __init__(__self__, *,
                 cursor: _builtins.str,
                 project: 'outputs.Project'):
        """
        :param 'Project' project: A project is a collection of environments
        """
        pulumi.set(__self__, "cursor", cursor)
        pulumi.set(__self__, "project", project)

    @_builtins.property
    @pulumi.getter
    def cursor(self) -> _builtins.str:
        return pulumi.get(self, "cursor")

    @_builtins.property
    @pulumi.getter
    def project(self) -> 'outputs.Project':
        """
        A project is a collection of environments
        """
        return pulumi.get(self, "project")


