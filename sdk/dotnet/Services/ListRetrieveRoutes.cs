// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class ListRetrieveRoutes
    {
        public static Task<ListRetrieveRoutesResult> InvokeAsync(ListRetrieveRoutesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ListRetrieveRoutesResult>("render:services:listRetrieveRoutes", args ?? new ListRetrieveRoutesArgs(), options.WithDefaults());

        public static Output<ListRetrieveRoutesResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ListRetrieveRoutesResult>("render:services:listRetrieveRoutes", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class ListRetrieveRoutesArgs : global::Pulumi.InvokeArgs
    {
        public ListRetrieveRoutesArgs()
        {
        }
        public static new ListRetrieveRoutesArgs Empty => new ListRetrieveRoutesArgs();
    }


    [OutputType]
    public sealed class ListRetrieveRoutesResult
    {
        public readonly ImmutableArray<Outputs.ListRetrieveRoutesItemProperties> Items;

        [OutputConstructor]
        private ListRetrieveRoutesResult(ImmutableArray<Outputs.ListRetrieveRoutesItemProperties> items)
        {
            Items = items;
        }
    }
}
