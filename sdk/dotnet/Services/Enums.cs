// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Services
{
    [EnumType]
    public readonly struct BackgroundWorkerAutoDeploy : IEquatable<BackgroundWorkerAutoDeploy>
    {
        private readonly string _value;

        private BackgroundWorkerAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerAutoDeploy Yes { get; } = new BackgroundWorkerAutoDeploy("yes");
        public static BackgroundWorkerAutoDeploy No { get; } = new BackgroundWorkerAutoDeploy("no");

        public static bool operator ==(BackgroundWorkerAutoDeploy left, BackgroundWorkerAutoDeploy right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerAutoDeploy left, BackgroundWorkerAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerAutoDeploy other && Equals(other);
        public bool Equals(BackgroundWorkerAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsEnv : IEquatable<BackgroundWorkerDetailsEnv>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsEnv Docker { get; } = new BackgroundWorkerDetailsEnv("docker");
        public static BackgroundWorkerDetailsEnv Elixir { get; } = new BackgroundWorkerDetailsEnv("elixir");
        public static BackgroundWorkerDetailsEnv Go { get; } = new BackgroundWorkerDetailsEnv("go");
        public static BackgroundWorkerDetailsEnv Node { get; } = new BackgroundWorkerDetailsEnv("node");
        public static BackgroundWorkerDetailsEnv Python { get; } = new BackgroundWorkerDetailsEnv("python");
        public static BackgroundWorkerDetailsEnv Ruby { get; } = new BackgroundWorkerDetailsEnv("ruby");
        public static BackgroundWorkerDetailsEnv Rust { get; } = new BackgroundWorkerDetailsEnv("rust");
        public static BackgroundWorkerDetailsEnv Image { get; } = new BackgroundWorkerDetailsEnv("image");

        public static bool operator ==(BackgroundWorkerDetailsEnv left, BackgroundWorkerDetailsEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsEnv left, BackgroundWorkerDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsEnv other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerDetailsPlan : IEquatable<BackgroundWorkerDetailsPlan>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsPlan Starter { get; } = new BackgroundWorkerDetailsPlan("starter");
        public static BackgroundWorkerDetailsPlan StarterPlus { get; } = new BackgroundWorkerDetailsPlan("starter_plus");
        public static BackgroundWorkerDetailsPlan Standard { get; } = new BackgroundWorkerDetailsPlan("standard");
        public static BackgroundWorkerDetailsPlan StandardPlus { get; } = new BackgroundWorkerDetailsPlan("standard_plus");
        public static BackgroundWorkerDetailsPlan Pro { get; } = new BackgroundWorkerDetailsPlan("pro");
        public static BackgroundWorkerDetailsPlan ProPlus { get; } = new BackgroundWorkerDetailsPlan("pro_plus");
        public static BackgroundWorkerDetailsPlan ProMax { get; } = new BackgroundWorkerDetailsPlan("pro_max");
        public static BackgroundWorkerDetailsPlan ProUltra { get; } = new BackgroundWorkerDetailsPlan("pro_ultra");
        public static BackgroundWorkerDetailsPlan Free { get; } = new BackgroundWorkerDetailsPlan("free");
        public static BackgroundWorkerDetailsPlan Custom { get; } = new BackgroundWorkerDetailsPlan("custom");

        public static bool operator ==(BackgroundWorkerDetailsPlan left, BackgroundWorkerDetailsPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsPlan left, BackgroundWorkerDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsPlan other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerDetailsPullRequestPreviewsEnabled : IEquatable<BackgroundWorkerDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsPullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerDetailsPullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerDetailsPullRequestPreviewsEnabled No { get; } = new BackgroundWorkerDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerDetailsPullRequestPreviewsEnabled left, BackgroundWorkerDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsPullRequestPreviewsEnabled left, BackgroundWorkerDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerDetailsRegion : IEquatable<BackgroundWorkerDetailsRegion>
    {
        private readonly string _value;

        private BackgroundWorkerDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerDetailsRegion Frankfurt { get; } = new BackgroundWorkerDetailsRegion("frankfurt");
        public static BackgroundWorkerDetailsRegion Oregon { get; } = new BackgroundWorkerDetailsRegion("oregon");
        public static BackgroundWorkerDetailsRegion Ohio { get; } = new BackgroundWorkerDetailsRegion("ohio");
        public static BackgroundWorkerDetailsRegion Singapore { get; } = new BackgroundWorkerDetailsRegion("singapore");

        public static bool operator ==(BackgroundWorkerDetailsRegion left, BackgroundWorkerDetailsRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerDetailsRegion left, BackgroundWorkerDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerDetailsRegion other && Equals(other);
        public bool Equals(BackgroundWorkerDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerNotifyOnFail : IEquatable<BackgroundWorkerNotifyOnFail>
    {
        private readonly string _value;

        private BackgroundWorkerNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerNotifyOnFail Default { get; } = new BackgroundWorkerNotifyOnFail("default");
        public static BackgroundWorkerNotifyOnFail Notify { get; } = new BackgroundWorkerNotifyOnFail("notify");
        public static BackgroundWorkerNotifyOnFail Ignore { get; } = new BackgroundWorkerNotifyOnFail("ignore");

        public static bool operator ==(BackgroundWorkerNotifyOnFail left, BackgroundWorkerNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerNotifyOnFail left, BackgroundWorkerNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerNotifyOnFail other && Equals(other);
        public bool Equals(BackgroundWorkerNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "yes"
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerPropertiesAutoDeploy : IEquatable<BackgroundWorkerPropertiesAutoDeploy>
    {
        private readonly string _value;

        private BackgroundWorkerPropertiesAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerPropertiesAutoDeploy Yes { get; } = new BackgroundWorkerPropertiesAutoDeploy("yes");
        public static BackgroundWorkerPropertiesAutoDeploy No { get; } = new BackgroundWorkerPropertiesAutoDeploy("no");

        public static bool operator ==(BackgroundWorkerPropertiesAutoDeploy left, BackgroundWorkerPropertiesAutoDeploy right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerPropertiesAutoDeploy left, BackgroundWorkerPropertiesAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerPropertiesAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerPropertiesAutoDeploy other && Equals(other);
        public bool Equals(BackgroundWorkerPropertiesAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerPropertiesEnv : IEquatable<BackgroundWorkerPropertiesEnv>
    {
        private readonly string _value;

        private BackgroundWorkerPropertiesEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerPropertiesEnv Docker { get; } = new BackgroundWorkerPropertiesEnv("docker");
        public static BackgroundWorkerPropertiesEnv Elixir { get; } = new BackgroundWorkerPropertiesEnv("elixir");
        public static BackgroundWorkerPropertiesEnv Go { get; } = new BackgroundWorkerPropertiesEnv("go");
        public static BackgroundWorkerPropertiesEnv Node { get; } = new BackgroundWorkerPropertiesEnv("node");
        public static BackgroundWorkerPropertiesEnv Python { get; } = new BackgroundWorkerPropertiesEnv("python");
        public static BackgroundWorkerPropertiesEnv Ruby { get; } = new BackgroundWorkerPropertiesEnv("ruby");
        public static BackgroundWorkerPropertiesEnv Rust { get; } = new BackgroundWorkerPropertiesEnv("rust");
        public static BackgroundWorkerPropertiesEnv Image { get; } = new BackgroundWorkerPropertiesEnv("image");

        public static bool operator ==(BackgroundWorkerPropertiesEnv left, BackgroundWorkerPropertiesEnv right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerPropertiesEnv left, BackgroundWorkerPropertiesEnv right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerPropertiesEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerPropertiesEnv other && Equals(other);
        public bool Equals(BackgroundWorkerPropertiesEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerPropertiesPlan : IEquatable<BackgroundWorkerPropertiesPlan>
    {
        private readonly string _value;

        private BackgroundWorkerPropertiesPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerPropertiesPlan Starter { get; } = new BackgroundWorkerPropertiesPlan("starter");
        public static BackgroundWorkerPropertiesPlan Standard { get; } = new BackgroundWorkerPropertiesPlan("standard");
        public static BackgroundWorkerPropertiesPlan Pro { get; } = new BackgroundWorkerPropertiesPlan("pro");
        public static BackgroundWorkerPropertiesPlan ProPlus { get; } = new BackgroundWorkerPropertiesPlan("pro_plus");
        public static BackgroundWorkerPropertiesPlan ProMax { get; } = new BackgroundWorkerPropertiesPlan("pro_max");
        public static BackgroundWorkerPropertiesPlan ProUltra { get; } = new BackgroundWorkerPropertiesPlan("pro_ultra");

        public static bool operator ==(BackgroundWorkerPropertiesPlan left, BackgroundWorkerPropertiesPlan right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerPropertiesPlan left, BackgroundWorkerPropertiesPlan right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerPropertiesPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerPropertiesPlan other && Equals(other);
        public bool Equals(BackgroundWorkerPropertiesPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct BackgroundWorkerPropertiesPullRequestPreviewsEnabled : IEquatable<BackgroundWorkerPropertiesPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private BackgroundWorkerPropertiesPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerPropertiesPullRequestPreviewsEnabled Yes { get; } = new BackgroundWorkerPropertiesPullRequestPreviewsEnabled("yes");
        public static BackgroundWorkerPropertiesPullRequestPreviewsEnabled No { get; } = new BackgroundWorkerPropertiesPullRequestPreviewsEnabled("no");

        public static bool operator ==(BackgroundWorkerPropertiesPullRequestPreviewsEnabled left, BackgroundWorkerPropertiesPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerPropertiesPullRequestPreviewsEnabled left, BackgroundWorkerPropertiesPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerPropertiesPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerPropertiesPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(BackgroundWorkerPropertiesPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerPropertiesRegion : IEquatable<BackgroundWorkerPropertiesRegion>
    {
        private readonly string _value;

        private BackgroundWorkerPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerPropertiesRegion Frankfurt { get; } = new BackgroundWorkerPropertiesRegion("frankfurt");
        public static BackgroundWorkerPropertiesRegion Oregon { get; } = new BackgroundWorkerPropertiesRegion("oregon");
        public static BackgroundWorkerPropertiesRegion Ohio { get; } = new BackgroundWorkerPropertiesRegion("ohio");
        public static BackgroundWorkerPropertiesRegion Singapore { get; } = new BackgroundWorkerPropertiesRegion("singapore");

        public static bool operator ==(BackgroundWorkerPropertiesRegion left, BackgroundWorkerPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerPropertiesRegion left, BackgroundWorkerPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerPropertiesRegion other && Equals(other);
        public bool Equals(BackgroundWorkerPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerSuspended : IEquatable<BackgroundWorkerSuspended>
    {
        private readonly string _value;

        private BackgroundWorkerSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerSuspended Suspended { get; } = new BackgroundWorkerSuspended("suspended");
        public static BackgroundWorkerSuspended NotSuspended { get; } = new BackgroundWorkerSuspended("not_suspended");

        public static bool operator ==(BackgroundWorkerSuspended left, BackgroundWorkerSuspended right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerSuspended left, BackgroundWorkerSuspended right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerSuspended other && Equals(other);
        public bool Equals(BackgroundWorkerSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerSuspendersItem : IEquatable<BackgroundWorkerSuspendersItem>
    {
        private readonly string _value;

        private BackgroundWorkerSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerSuspendersItem Admin { get; } = new BackgroundWorkerSuspendersItem("admin");
        public static BackgroundWorkerSuspendersItem Billing { get; } = new BackgroundWorkerSuspendersItem("billing");
        public static BackgroundWorkerSuspendersItem User { get; } = new BackgroundWorkerSuspendersItem("user");
        public static BackgroundWorkerSuspendersItem ParentService { get; } = new BackgroundWorkerSuspendersItem("parent_service");
        public static BackgroundWorkerSuspendersItem Unknown { get; } = new BackgroundWorkerSuspendersItem("unknown");

        public static bool operator ==(BackgroundWorkerSuspendersItem left, BackgroundWorkerSuspendersItem right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerSuspendersItem left, BackgroundWorkerSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerSuspendersItem other && Equals(other);
        public bool Equals(BackgroundWorkerSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BackgroundWorkerType : IEquatable<BackgroundWorkerType>
    {
        private readonly string _value;

        private BackgroundWorkerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BackgroundWorkerType StaticSite { get; } = new BackgroundWorkerType("static_site");
        public static BackgroundWorkerType WebService { get; } = new BackgroundWorkerType("web_service");
        public static BackgroundWorkerType PrivateService { get; } = new BackgroundWorkerType("private_service");
        public static BackgroundWorkerType BackgroundWorker { get; } = new BackgroundWorkerType("background_worker");
        public static BackgroundWorkerType CronJob { get; } = new BackgroundWorkerType("cron_job");

        public static bool operator ==(BackgroundWorkerType left, BackgroundWorkerType right) => left.Equals(right);
        public static bool operator !=(BackgroundWorkerType left, BackgroundWorkerType right) => !left.Equals(right);

        public static explicit operator string(BackgroundWorkerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BackgroundWorkerType other && Equals(other);
        public bool Equals(BackgroundWorkerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CancelDeployStatus : IEquatable<CancelDeployStatus>
    {
        private readonly string _value;

        private CancelDeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelDeployStatus Created { get; } = new CancelDeployStatus("created");
        public static CancelDeployStatus BuildInProgress { get; } = new CancelDeployStatus("build_in_progress");
        public static CancelDeployStatus UpdateInProgress { get; } = new CancelDeployStatus("update_in_progress");
        public static CancelDeployStatus Live { get; } = new CancelDeployStatus("live");
        public static CancelDeployStatus Deactivated { get; } = new CancelDeployStatus("deactivated");
        public static CancelDeployStatus BuildFailed { get; } = new CancelDeployStatus("build_failed");
        public static CancelDeployStatus UpdateFailed { get; } = new CancelDeployStatus("update_failed");
        public static CancelDeployStatus Canceled { get; } = new CancelDeployStatus("canceled");
        public static CancelDeployStatus PreDeployInProgress { get; } = new CancelDeployStatus("pre_deploy_in_progress");
        public static CancelDeployStatus PreDeployFailed { get; } = new CancelDeployStatus("pre_deploy_failed");

        public static bool operator ==(CancelDeployStatus left, CancelDeployStatus right) => left.Equals(right);
        public static bool operator !=(CancelDeployStatus left, CancelDeployStatus right) => !left.Equals(right);

        public static explicit operator string(CancelDeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelDeployStatus other && Equals(other);
        public bool Equals(CancelDeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CancelDeployTrigger : IEquatable<CancelDeployTrigger>
    {
        private readonly string _value;

        private CancelDeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CancelDeployTrigger Api { get; } = new CancelDeployTrigger("api");
        public static CancelDeployTrigger BlueprintSync { get; } = new CancelDeployTrigger("blueprint_sync");
        public static CancelDeployTrigger DeployHook { get; } = new CancelDeployTrigger("deploy_hook");
        public static CancelDeployTrigger DeployedByRender { get; } = new CancelDeployTrigger("deployed_by_render");
        public static CancelDeployTrigger Manual { get; } = new CancelDeployTrigger("manual");
        public static CancelDeployTrigger Other { get; } = new CancelDeployTrigger("other");
        public static CancelDeployTrigger NewCommit { get; } = new CancelDeployTrigger("new_commit");
        public static CancelDeployTrigger Rollback { get; } = new CancelDeployTrigger("rollback");
        public static CancelDeployTrigger ServiceResumed { get; } = new CancelDeployTrigger("service_resumed");
        public static CancelDeployTrigger ServiceUpdated { get; } = new CancelDeployTrigger("service_updated");

        public static bool operator ==(CancelDeployTrigger left, CancelDeployTrigger right) => left.Equals(right);
        public static bool operator !=(CancelDeployTrigger left, CancelDeployTrigger right) => !left.Equals(right);

        public static explicit operator string(CancelDeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CancelDeployTrigger other && Equals(other);
        public bool Equals(CancelDeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobAutoDeploy : IEquatable<CronJobAutoDeploy>
    {
        private readonly string _value;

        private CronJobAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobAutoDeploy Yes { get; } = new CronJobAutoDeploy("yes");
        public static CronJobAutoDeploy No { get; } = new CronJobAutoDeploy("no");

        public static bool operator ==(CronJobAutoDeploy left, CronJobAutoDeploy right) => left.Equals(right);
        public static bool operator !=(CronJobAutoDeploy left, CronJobAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(CronJobAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobAutoDeploy other && Equals(other);
        public bool Equals(CronJobAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsEnv : IEquatable<CronJobDetailsEnv>
    {
        private readonly string _value;

        private CronJobDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsEnv Docker { get; } = new CronJobDetailsEnv("docker");
        public static CronJobDetailsEnv Elixir { get; } = new CronJobDetailsEnv("elixir");
        public static CronJobDetailsEnv Go { get; } = new CronJobDetailsEnv("go");
        public static CronJobDetailsEnv Node { get; } = new CronJobDetailsEnv("node");
        public static CronJobDetailsEnv Python { get; } = new CronJobDetailsEnv("python");
        public static CronJobDetailsEnv Ruby { get; } = new CronJobDetailsEnv("ruby");
        public static CronJobDetailsEnv Rust { get; } = new CronJobDetailsEnv("rust");
        public static CronJobDetailsEnv Image { get; } = new CronJobDetailsEnv("image");

        public static bool operator ==(CronJobDetailsEnv left, CronJobDetailsEnv right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsEnv left, CronJobDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsEnv other && Equals(other);
        public bool Equals(CronJobDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct CronJobDetailsPlan : IEquatable<CronJobDetailsPlan>
    {
        private readonly string _value;

        private CronJobDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsPlan Starter { get; } = new CronJobDetailsPlan("starter");
        public static CronJobDetailsPlan StarterPlus { get; } = new CronJobDetailsPlan("starter_plus");
        public static CronJobDetailsPlan Standard { get; } = new CronJobDetailsPlan("standard");
        public static CronJobDetailsPlan StandardPlus { get; } = new CronJobDetailsPlan("standard_plus");
        public static CronJobDetailsPlan Pro { get; } = new CronJobDetailsPlan("pro");
        public static CronJobDetailsPlan ProPlus { get; } = new CronJobDetailsPlan("pro_plus");
        public static CronJobDetailsPlan ProMax { get; } = new CronJobDetailsPlan("pro_max");
        public static CronJobDetailsPlan ProUltra { get; } = new CronJobDetailsPlan("pro_ultra");
        public static CronJobDetailsPlan Free { get; } = new CronJobDetailsPlan("free");
        public static CronJobDetailsPlan Custom { get; } = new CronJobDetailsPlan("custom");

        public static bool operator ==(CronJobDetailsPlan left, CronJobDetailsPlan right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsPlan left, CronJobDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsPlan other && Equals(other);
        public bool Equals(CronJobDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobDetailsRegion : IEquatable<CronJobDetailsRegion>
    {
        private readonly string _value;

        private CronJobDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobDetailsRegion Frankfurt { get; } = new CronJobDetailsRegion("frankfurt");
        public static CronJobDetailsRegion Oregon { get; } = new CronJobDetailsRegion("oregon");
        public static CronJobDetailsRegion Ohio { get; } = new CronJobDetailsRegion("ohio");
        public static CronJobDetailsRegion Singapore { get; } = new CronJobDetailsRegion("singapore");

        public static bool operator ==(CronJobDetailsRegion left, CronJobDetailsRegion right) => left.Equals(right);
        public static bool operator !=(CronJobDetailsRegion left, CronJobDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobDetailsRegion other && Equals(other);
        public bool Equals(CronJobDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobNotifyOnFail : IEquatable<CronJobNotifyOnFail>
    {
        private readonly string _value;

        private CronJobNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobNotifyOnFail Default { get; } = new CronJobNotifyOnFail("default");
        public static CronJobNotifyOnFail Notify { get; } = new CronJobNotifyOnFail("notify");
        public static CronJobNotifyOnFail Ignore { get; } = new CronJobNotifyOnFail("ignore");

        public static bool operator ==(CronJobNotifyOnFail left, CronJobNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(CronJobNotifyOnFail left, CronJobNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(CronJobNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobNotifyOnFail other && Equals(other);
        public bool Equals(CronJobNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "yes"
    /// </summary>
    [EnumType]
    public readonly struct CronJobPropertiesAutoDeploy : IEquatable<CronJobPropertiesAutoDeploy>
    {
        private readonly string _value;

        private CronJobPropertiesAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobPropertiesAutoDeploy Yes { get; } = new CronJobPropertiesAutoDeploy("yes");
        public static CronJobPropertiesAutoDeploy No { get; } = new CronJobPropertiesAutoDeploy("no");

        public static bool operator ==(CronJobPropertiesAutoDeploy left, CronJobPropertiesAutoDeploy right) => left.Equals(right);
        public static bool operator !=(CronJobPropertiesAutoDeploy left, CronJobPropertiesAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(CronJobPropertiesAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobPropertiesAutoDeploy other && Equals(other);
        public bool Equals(CronJobPropertiesAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct CronJobPropertiesEnv : IEquatable<CronJobPropertiesEnv>
    {
        private readonly string _value;

        private CronJobPropertiesEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobPropertiesEnv Docker { get; } = new CronJobPropertiesEnv("docker");
        public static CronJobPropertiesEnv Elixir { get; } = new CronJobPropertiesEnv("elixir");
        public static CronJobPropertiesEnv Go { get; } = new CronJobPropertiesEnv("go");
        public static CronJobPropertiesEnv Node { get; } = new CronJobPropertiesEnv("node");
        public static CronJobPropertiesEnv Python { get; } = new CronJobPropertiesEnv("python");
        public static CronJobPropertiesEnv Ruby { get; } = new CronJobPropertiesEnv("ruby");
        public static CronJobPropertiesEnv Rust { get; } = new CronJobPropertiesEnv("rust");
        public static CronJobPropertiesEnv Image { get; } = new CronJobPropertiesEnv("image");

        public static bool operator ==(CronJobPropertiesEnv left, CronJobPropertiesEnv right) => left.Equals(right);
        public static bool operator !=(CronJobPropertiesEnv left, CronJobPropertiesEnv right) => !left.Equals(right);

        public static explicit operator string(CronJobPropertiesEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobPropertiesEnv other && Equals(other);
        public bool Equals(CronJobPropertiesEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobPropertiesPlan : IEquatable<CronJobPropertiesPlan>
    {
        private readonly string _value;

        private CronJobPropertiesPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobPropertiesPlan Starter { get; } = new CronJobPropertiesPlan("starter");
        public static CronJobPropertiesPlan Standard { get; } = new CronJobPropertiesPlan("standard");
        public static CronJobPropertiesPlan Pro { get; } = new CronJobPropertiesPlan("pro");
        public static CronJobPropertiesPlan ProPlus { get; } = new CronJobPropertiesPlan("pro_plus");
        public static CronJobPropertiesPlan ProMax { get; } = new CronJobPropertiesPlan("pro_max");
        public static CronJobPropertiesPlan ProUltra { get; } = new CronJobPropertiesPlan("pro_ultra");

        public static bool operator ==(CronJobPropertiesPlan left, CronJobPropertiesPlan right) => left.Equals(right);
        public static bool operator !=(CronJobPropertiesPlan left, CronJobPropertiesPlan right) => !left.Equals(right);

        public static explicit operator string(CronJobPropertiesPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobPropertiesPlan other && Equals(other);
        public bool Equals(CronJobPropertiesPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobPropertiesRegion : IEquatable<CronJobPropertiesRegion>
    {
        private readonly string _value;

        private CronJobPropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobPropertiesRegion Frankfurt { get; } = new CronJobPropertiesRegion("frankfurt");
        public static CronJobPropertiesRegion Oregon { get; } = new CronJobPropertiesRegion("oregon");
        public static CronJobPropertiesRegion Ohio { get; } = new CronJobPropertiesRegion("ohio");
        public static CronJobPropertiesRegion Singapore { get; } = new CronJobPropertiesRegion("singapore");

        public static bool operator ==(CronJobPropertiesRegion left, CronJobPropertiesRegion right) => left.Equals(right);
        public static bool operator !=(CronJobPropertiesRegion left, CronJobPropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(CronJobPropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobPropertiesRegion other && Equals(other);
        public bool Equals(CronJobPropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobSuspended : IEquatable<CronJobSuspended>
    {
        private readonly string _value;

        private CronJobSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobSuspended Suspended { get; } = new CronJobSuspended("suspended");
        public static CronJobSuspended NotSuspended { get; } = new CronJobSuspended("not_suspended");

        public static bool operator ==(CronJobSuspended left, CronJobSuspended right) => left.Equals(right);
        public static bool operator !=(CronJobSuspended left, CronJobSuspended right) => !left.Equals(right);

        public static explicit operator string(CronJobSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobSuspended other && Equals(other);
        public bool Equals(CronJobSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobSuspendersItem : IEquatable<CronJobSuspendersItem>
    {
        private readonly string _value;

        private CronJobSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobSuspendersItem Admin { get; } = new CronJobSuspendersItem("admin");
        public static CronJobSuspendersItem Billing { get; } = new CronJobSuspendersItem("billing");
        public static CronJobSuspendersItem User { get; } = new CronJobSuspendersItem("user");
        public static CronJobSuspendersItem ParentService { get; } = new CronJobSuspendersItem("parent_service");
        public static CronJobSuspendersItem Unknown { get; } = new CronJobSuspendersItem("unknown");

        public static bool operator ==(CronJobSuspendersItem left, CronJobSuspendersItem right) => left.Equals(right);
        public static bool operator !=(CronJobSuspendersItem left, CronJobSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(CronJobSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobSuspendersItem other && Equals(other);
        public bool Equals(CronJobSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CronJobType : IEquatable<CronJobType>
    {
        private readonly string _value;

        private CronJobType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CronJobType StaticSite { get; } = new CronJobType("static_site");
        public static CronJobType WebService { get; } = new CronJobType("web_service");
        public static CronJobType PrivateService { get; } = new CronJobType("private_service");
        public static CronJobType BackgroundWorker { get; } = new CronJobType("background_worker");
        public static CronJobType CronJob { get; } = new CronJobType("cron_job");

        public static bool operator ==(CronJobType left, CronJobType right) => left.Equals(right);
        public static bool operator !=(CronJobType left, CronJobType right) => !left.Equals(right);

        public static explicit operator string(CronJobType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CronJobType other && Equals(other);
        public bool Equals(CronJobType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainDomainType : IEquatable<CustomDomainDomainType>
    {
        private readonly string _value;

        private CustomDomainDomainType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainDomainType Apex { get; } = new CustomDomainDomainType("apex");
        public static CustomDomainDomainType Subdomain { get; } = new CustomDomainDomainType("subdomain");

        public static bool operator ==(CustomDomainDomainType left, CustomDomainDomainType right) => left.Equals(right);
        public static bool operator !=(CustomDomainDomainType left, CustomDomainDomainType right) => !left.Equals(right);

        public static explicit operator string(CustomDomainDomainType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainDomainType other && Equals(other);
        public bool Equals(CustomDomainDomainType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct CustomDomainVerificationStatus : IEquatable<CustomDomainVerificationStatus>
    {
        private readonly string _value;

        private CustomDomainVerificationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static CustomDomainVerificationStatus Verified { get; } = new CustomDomainVerificationStatus("verified");
        public static CustomDomainVerificationStatus Unverified { get; } = new CustomDomainVerificationStatus("unverified");

        public static bool operator ==(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => left.Equals(right);
        public static bool operator !=(CustomDomainVerificationStatus left, CustomDomainVerificationStatus right) => !left.Equals(right);

        public static explicit operator string(CustomDomainVerificationStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is CustomDomainVerificationStatus other && Equals(other);
        public bool Equals(CustomDomainVerificationStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "do_not_clear"
    /// </summary>
    [EnumType]
    public readonly struct DeployClearCache : IEquatable<DeployClearCache>
    {
        private readonly string _value;

        private DeployClearCache(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployClearCache Clear { get; } = new DeployClearCache("clear");
        public static DeployClearCache DoNotClear { get; } = new DeployClearCache("do_not_clear");

        public static bool operator ==(DeployClearCache left, DeployClearCache right) => left.Equals(right);
        public static bool operator !=(DeployClearCache left, DeployClearCache right) => !left.Equals(right);

        public static explicit operator string(DeployClearCache value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployClearCache other && Equals(other);
        public bool Equals(DeployClearCache other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployStatus : IEquatable<DeployStatus>
    {
        private readonly string _value;

        private DeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployStatus Created { get; } = new DeployStatus("created");
        public static DeployStatus BuildInProgress { get; } = new DeployStatus("build_in_progress");
        public static DeployStatus UpdateInProgress { get; } = new DeployStatus("update_in_progress");
        public static DeployStatus Live { get; } = new DeployStatus("live");
        public static DeployStatus Deactivated { get; } = new DeployStatus("deactivated");
        public static DeployStatus BuildFailed { get; } = new DeployStatus("build_failed");
        public static DeployStatus UpdateFailed { get; } = new DeployStatus("update_failed");
        public static DeployStatus Canceled { get; } = new DeployStatus("canceled");
        public static DeployStatus PreDeployInProgress { get; } = new DeployStatus("pre_deploy_in_progress");
        public static DeployStatus PreDeployFailed { get; } = new DeployStatus("pre_deploy_failed");

        public static bool operator ==(DeployStatus left, DeployStatus right) => left.Equals(right);
        public static bool operator !=(DeployStatus left, DeployStatus right) => !left.Equals(right);

        public static explicit operator string(DeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployStatus other && Equals(other);
        public bool Equals(DeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct DeployTrigger : IEquatable<DeployTrigger>
    {
        private readonly string _value;

        private DeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static DeployTrigger Api { get; } = new DeployTrigger("api");
        public static DeployTrigger BlueprintSync { get; } = new DeployTrigger("blueprint_sync");
        public static DeployTrigger DeployHook { get; } = new DeployTrigger("deploy_hook");
        public static DeployTrigger DeployedByRender { get; } = new DeployTrigger("deployed_by_render");
        public static DeployTrigger Manual { get; } = new DeployTrigger("manual");
        public static DeployTrigger Other { get; } = new DeployTrigger("other");
        public static DeployTrigger NewCommit { get; } = new DeployTrigger("new_commit");
        public static DeployTrigger Rollback { get; } = new DeployTrigger("rollback");
        public static DeployTrigger ServiceResumed { get; } = new DeployTrigger("service_resumed");
        public static DeployTrigger ServiceUpdated { get; } = new DeployTrigger("service_updated");

        public static bool operator ==(DeployTrigger left, DeployTrigger right) => left.Equals(right);
        public static bool operator !=(DeployTrigger left, DeployTrigger right) => !left.Equals(right);

        public static explicit operator string(DeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is DeployTrigger other && Equals(other);
        public bool Equals(DeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct PreviewServicePlan : IEquatable<PreviewServicePlan>
    {
        private readonly string _value;

        private PreviewServicePlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PreviewServicePlan Starter { get; } = new PreviewServicePlan("starter");
        public static PreviewServicePlan StarterPlus { get; } = new PreviewServicePlan("starter_plus");
        public static PreviewServicePlan Standard { get; } = new PreviewServicePlan("standard");
        public static PreviewServicePlan StandardPlus { get; } = new PreviewServicePlan("standard_plus");
        public static PreviewServicePlan Pro { get; } = new PreviewServicePlan("pro");
        public static PreviewServicePlan ProPlus { get; } = new PreviewServicePlan("pro_plus");
        public static PreviewServicePlan ProMax { get; } = new PreviewServicePlan("pro_max");
        public static PreviewServicePlan ProUltra { get; } = new PreviewServicePlan("pro_ultra");
        public static PreviewServicePlan Free { get; } = new PreviewServicePlan("free");
        public static PreviewServicePlan Custom { get; } = new PreviewServicePlan("custom");

        public static bool operator ==(PreviewServicePlan left, PreviewServicePlan right) => left.Equals(right);
        public static bool operator !=(PreviewServicePlan left, PreviewServicePlan right) => !left.Equals(right);

        public static explicit operator string(PreviewServicePlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PreviewServicePlan other && Equals(other);
        public bool Equals(PreviewServicePlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceAutoDeploy : IEquatable<PrivateServiceAutoDeploy>
    {
        private readonly string _value;

        private PrivateServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceAutoDeploy Yes { get; } = new PrivateServiceAutoDeploy("yes");
        public static PrivateServiceAutoDeploy No { get; } = new PrivateServiceAutoDeploy("no");

        public static bool operator ==(PrivateServiceAutoDeploy left, PrivateServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(PrivateServiceAutoDeploy left, PrivateServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceAutoDeploy other && Equals(other);
        public bool Equals(PrivateServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsEnv : IEquatable<PrivateServiceDetailsEnv>
    {
        private readonly string _value;

        private PrivateServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsEnv Docker { get; } = new PrivateServiceDetailsEnv("docker");
        public static PrivateServiceDetailsEnv Elixir { get; } = new PrivateServiceDetailsEnv("elixir");
        public static PrivateServiceDetailsEnv Go { get; } = new PrivateServiceDetailsEnv("go");
        public static PrivateServiceDetailsEnv Node { get; } = new PrivateServiceDetailsEnv("node");
        public static PrivateServiceDetailsEnv Python { get; } = new PrivateServiceDetailsEnv("python");
        public static PrivateServiceDetailsEnv Ruby { get; } = new PrivateServiceDetailsEnv("ruby");
        public static PrivateServiceDetailsEnv Rust { get; } = new PrivateServiceDetailsEnv("rust");
        public static PrivateServiceDetailsEnv Image { get; } = new PrivateServiceDetailsEnv("image");

        public static bool operator ==(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsEnv left, PrivateServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsEnv other && Equals(other);
        public bool Equals(PrivateServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct PrivateServiceDetailsPlan : IEquatable<PrivateServiceDetailsPlan>
    {
        private readonly string _value;

        private PrivateServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPlan Starter { get; } = new PrivateServiceDetailsPlan("starter");
        public static PrivateServiceDetailsPlan StarterPlus { get; } = new PrivateServiceDetailsPlan("starter_plus");
        public static PrivateServiceDetailsPlan Standard { get; } = new PrivateServiceDetailsPlan("standard");
        public static PrivateServiceDetailsPlan StandardPlus { get; } = new PrivateServiceDetailsPlan("standard_plus");
        public static PrivateServiceDetailsPlan Pro { get; } = new PrivateServiceDetailsPlan("pro");
        public static PrivateServiceDetailsPlan ProPlus { get; } = new PrivateServiceDetailsPlan("pro_plus");
        public static PrivateServiceDetailsPlan ProMax { get; } = new PrivateServiceDetailsPlan("pro_max");
        public static PrivateServiceDetailsPlan ProUltra { get; } = new PrivateServiceDetailsPlan("pro_ultra");
        public static PrivateServiceDetailsPlan Free { get; } = new PrivateServiceDetailsPlan("free");
        public static PrivateServiceDetailsPlan Custom { get; } = new PrivateServiceDetailsPlan("custom");

        public static bool operator ==(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPlan left, PrivateServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPlan other && Equals(other);
        public bool Equals(PrivateServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsPullRequestPreviewsEnabled : IEquatable<PrivateServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("yes");
        public static PrivateServiceDetailsPullRequestPreviewsEnabled No { get; } = new PrivateServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsPullRequestPreviewsEnabled left, PrivateServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceDetailsRegion : IEquatable<PrivateServiceDetailsRegion>
    {
        private readonly string _value;

        private PrivateServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceDetailsRegion Frankfurt { get; } = new PrivateServiceDetailsRegion("frankfurt");
        public static PrivateServiceDetailsRegion Oregon { get; } = new PrivateServiceDetailsRegion("oregon");
        public static PrivateServiceDetailsRegion Ohio { get; } = new PrivateServiceDetailsRegion("ohio");
        public static PrivateServiceDetailsRegion Singapore { get; } = new PrivateServiceDetailsRegion("singapore");

        public static bool operator ==(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServiceDetailsRegion left, PrivateServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceDetailsRegion other && Equals(other);
        public bool Equals(PrivateServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceNotifyOnFail : IEquatable<PrivateServiceNotifyOnFail>
    {
        private readonly string _value;

        private PrivateServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceNotifyOnFail Default { get; } = new PrivateServiceNotifyOnFail("default");
        public static PrivateServiceNotifyOnFail Notify { get; } = new PrivateServiceNotifyOnFail("notify");
        public static PrivateServiceNotifyOnFail Ignore { get; } = new PrivateServiceNotifyOnFail("ignore");

        public static bool operator ==(PrivateServiceNotifyOnFail left, PrivateServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(PrivateServiceNotifyOnFail left, PrivateServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceNotifyOnFail other && Equals(other);
        public bool Equals(PrivateServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "yes"
    /// </summary>
    [EnumType]
    public readonly struct PrivateServicePropertiesAutoDeploy : IEquatable<PrivateServicePropertiesAutoDeploy>
    {
        private readonly string _value;

        private PrivateServicePropertiesAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServicePropertiesAutoDeploy Yes { get; } = new PrivateServicePropertiesAutoDeploy("yes");
        public static PrivateServicePropertiesAutoDeploy No { get; } = new PrivateServicePropertiesAutoDeploy("no");

        public static bool operator ==(PrivateServicePropertiesAutoDeploy left, PrivateServicePropertiesAutoDeploy right) => left.Equals(right);
        public static bool operator !=(PrivateServicePropertiesAutoDeploy left, PrivateServicePropertiesAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(PrivateServicePropertiesAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServicePropertiesAutoDeploy other && Equals(other);
        public bool Equals(PrivateServicePropertiesAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct PrivateServicePropertiesEnv : IEquatable<PrivateServicePropertiesEnv>
    {
        private readonly string _value;

        private PrivateServicePropertiesEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServicePropertiesEnv Docker { get; } = new PrivateServicePropertiesEnv("docker");
        public static PrivateServicePropertiesEnv Elixir { get; } = new PrivateServicePropertiesEnv("elixir");
        public static PrivateServicePropertiesEnv Go { get; } = new PrivateServicePropertiesEnv("go");
        public static PrivateServicePropertiesEnv Node { get; } = new PrivateServicePropertiesEnv("node");
        public static PrivateServicePropertiesEnv Python { get; } = new PrivateServicePropertiesEnv("python");
        public static PrivateServicePropertiesEnv Ruby { get; } = new PrivateServicePropertiesEnv("ruby");
        public static PrivateServicePropertiesEnv Rust { get; } = new PrivateServicePropertiesEnv("rust");
        public static PrivateServicePropertiesEnv Image { get; } = new PrivateServicePropertiesEnv("image");

        public static bool operator ==(PrivateServicePropertiesEnv left, PrivateServicePropertiesEnv right) => left.Equals(right);
        public static bool operator !=(PrivateServicePropertiesEnv left, PrivateServicePropertiesEnv right) => !left.Equals(right);

        public static explicit operator string(PrivateServicePropertiesEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServicePropertiesEnv other && Equals(other);
        public bool Equals(PrivateServicePropertiesEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServicePropertiesPlan : IEquatable<PrivateServicePropertiesPlan>
    {
        private readonly string _value;

        private PrivateServicePropertiesPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServicePropertiesPlan Starter { get; } = new PrivateServicePropertiesPlan("starter");
        public static PrivateServicePropertiesPlan Standard { get; } = new PrivateServicePropertiesPlan("standard");
        public static PrivateServicePropertiesPlan Pro { get; } = new PrivateServicePropertiesPlan("pro");
        public static PrivateServicePropertiesPlan ProPlus { get; } = new PrivateServicePropertiesPlan("pro_plus");
        public static PrivateServicePropertiesPlan ProMax { get; } = new PrivateServicePropertiesPlan("pro_max");
        public static PrivateServicePropertiesPlan ProUltra { get; } = new PrivateServicePropertiesPlan("pro_ultra");

        public static bool operator ==(PrivateServicePropertiesPlan left, PrivateServicePropertiesPlan right) => left.Equals(right);
        public static bool operator !=(PrivateServicePropertiesPlan left, PrivateServicePropertiesPlan right) => !left.Equals(right);

        public static explicit operator string(PrivateServicePropertiesPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServicePropertiesPlan other && Equals(other);
        public bool Equals(PrivateServicePropertiesPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct PrivateServicePropertiesPullRequestPreviewsEnabled : IEquatable<PrivateServicePropertiesPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private PrivateServicePropertiesPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServicePropertiesPullRequestPreviewsEnabled Yes { get; } = new PrivateServicePropertiesPullRequestPreviewsEnabled("yes");
        public static PrivateServicePropertiesPullRequestPreviewsEnabled No { get; } = new PrivateServicePropertiesPullRequestPreviewsEnabled("no");

        public static bool operator ==(PrivateServicePropertiesPullRequestPreviewsEnabled left, PrivateServicePropertiesPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(PrivateServicePropertiesPullRequestPreviewsEnabled left, PrivateServicePropertiesPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(PrivateServicePropertiesPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServicePropertiesPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(PrivateServicePropertiesPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServicePropertiesRegion : IEquatable<PrivateServicePropertiesRegion>
    {
        private readonly string _value;

        private PrivateServicePropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServicePropertiesRegion Frankfurt { get; } = new PrivateServicePropertiesRegion("frankfurt");
        public static PrivateServicePropertiesRegion Oregon { get; } = new PrivateServicePropertiesRegion("oregon");
        public static PrivateServicePropertiesRegion Ohio { get; } = new PrivateServicePropertiesRegion("ohio");
        public static PrivateServicePropertiesRegion Singapore { get; } = new PrivateServicePropertiesRegion("singapore");

        public static bool operator ==(PrivateServicePropertiesRegion left, PrivateServicePropertiesRegion right) => left.Equals(right);
        public static bool operator !=(PrivateServicePropertiesRegion left, PrivateServicePropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(PrivateServicePropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServicePropertiesRegion other && Equals(other);
        public bool Equals(PrivateServicePropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceSuspended : IEquatable<PrivateServiceSuspended>
    {
        private readonly string _value;

        private PrivateServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceSuspended Suspended { get; } = new PrivateServiceSuspended("suspended");
        public static PrivateServiceSuspended NotSuspended { get; } = new PrivateServiceSuspended("not_suspended");

        public static bool operator ==(PrivateServiceSuspended left, PrivateServiceSuspended right) => left.Equals(right);
        public static bool operator !=(PrivateServiceSuspended left, PrivateServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceSuspended other && Equals(other);
        public bool Equals(PrivateServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceSuspendersItem : IEquatable<PrivateServiceSuspendersItem>
    {
        private readonly string _value;

        private PrivateServiceSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceSuspendersItem Admin { get; } = new PrivateServiceSuspendersItem("admin");
        public static PrivateServiceSuspendersItem Billing { get; } = new PrivateServiceSuspendersItem("billing");
        public static PrivateServiceSuspendersItem User { get; } = new PrivateServiceSuspendersItem("user");
        public static PrivateServiceSuspendersItem ParentService { get; } = new PrivateServiceSuspendersItem("parent_service");
        public static PrivateServiceSuspendersItem Unknown { get; } = new PrivateServiceSuspendersItem("unknown");

        public static bool operator ==(PrivateServiceSuspendersItem left, PrivateServiceSuspendersItem right) => left.Equals(right);
        public static bool operator !=(PrivateServiceSuspendersItem left, PrivateServiceSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceSuspendersItem other && Equals(other);
        public bool Equals(PrivateServiceSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PrivateServiceType : IEquatable<PrivateServiceType>
    {
        private readonly string _value;

        private PrivateServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PrivateServiceType StaticSite { get; } = new PrivateServiceType("static_site");
        public static PrivateServiceType WebService { get; } = new PrivateServiceType("web_service");
        public static PrivateServiceType PrivateService { get; } = new PrivateServiceType("private_service");
        public static PrivateServiceType BackgroundWorker { get; } = new PrivateServiceType("background_worker");
        public static PrivateServiceType CronJob { get; } = new PrivateServiceType("cron_job");

        public static bool operator ==(PrivateServiceType left, PrivateServiceType right) => left.Equals(right);
        public static bool operator !=(PrivateServiceType left, PrivateServiceType right) => !left.Equals(right);

        public static explicit operator string(PrivateServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PrivateServiceType other && Equals(other);
        public bool Equals(PrivateServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The registry to use this credential with
    /// </summary>
    [EnumType]
    public readonly struct RegistryCredentialRegistry : IEquatable<RegistryCredentialRegistry>
    {
        private readonly string _value;

        private RegistryCredentialRegistry(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryCredentialRegistry Github { get; } = new RegistryCredentialRegistry("GITHUB");
        public static RegistryCredentialRegistry Gitlab { get; } = new RegistryCredentialRegistry("GITLAB");
        public static RegistryCredentialRegistry Docker { get; } = new RegistryCredentialRegistry("DOCKER");

        public static bool operator ==(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => left.Equals(right);
        public static bool operator !=(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => !left.Equals(right);

        public static explicit operator string(RegistryCredentialRegistry value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryCredentialRegistry other && Equals(other);
        public bool Equals(RegistryCredentialRegistry other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RollbackDeployStatus : IEquatable<RollbackDeployStatus>
    {
        private readonly string _value;

        private RollbackDeployStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RollbackDeployStatus Created { get; } = new RollbackDeployStatus("created");
        public static RollbackDeployStatus BuildInProgress { get; } = new RollbackDeployStatus("build_in_progress");
        public static RollbackDeployStatus UpdateInProgress { get; } = new RollbackDeployStatus("update_in_progress");
        public static RollbackDeployStatus Live { get; } = new RollbackDeployStatus("live");
        public static RollbackDeployStatus Deactivated { get; } = new RollbackDeployStatus("deactivated");
        public static RollbackDeployStatus BuildFailed { get; } = new RollbackDeployStatus("build_failed");
        public static RollbackDeployStatus UpdateFailed { get; } = new RollbackDeployStatus("update_failed");
        public static RollbackDeployStatus Canceled { get; } = new RollbackDeployStatus("canceled");
        public static RollbackDeployStatus PreDeployInProgress { get; } = new RollbackDeployStatus("pre_deploy_in_progress");
        public static RollbackDeployStatus PreDeployFailed { get; } = new RollbackDeployStatus("pre_deploy_failed");

        public static bool operator ==(RollbackDeployStatus left, RollbackDeployStatus right) => left.Equals(right);
        public static bool operator !=(RollbackDeployStatus left, RollbackDeployStatus right) => !left.Equals(right);

        public static explicit operator string(RollbackDeployStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RollbackDeployStatus other && Equals(other);
        public bool Equals(RollbackDeployStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RollbackDeployTrigger : IEquatable<RollbackDeployTrigger>
    {
        private readonly string _value;

        private RollbackDeployTrigger(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RollbackDeployTrigger Api { get; } = new RollbackDeployTrigger("api");
        public static RollbackDeployTrigger BlueprintSync { get; } = new RollbackDeployTrigger("blueprint_sync");
        public static RollbackDeployTrigger DeployHook { get; } = new RollbackDeployTrigger("deploy_hook");
        public static RollbackDeployTrigger DeployedByRender { get; } = new RollbackDeployTrigger("deployed_by_render");
        public static RollbackDeployTrigger Manual { get; } = new RollbackDeployTrigger("manual");
        public static RollbackDeployTrigger Other { get; } = new RollbackDeployTrigger("other");
        public static RollbackDeployTrigger NewCommit { get; } = new RollbackDeployTrigger("new_commit");
        public static RollbackDeployTrigger Rollback { get; } = new RollbackDeployTrigger("rollback");
        public static RollbackDeployTrigger ServiceResumed { get; } = new RollbackDeployTrigger("service_resumed");
        public static RollbackDeployTrigger ServiceUpdated { get; } = new RollbackDeployTrigger("service_updated");

        public static bool operator ==(RollbackDeployTrigger left, RollbackDeployTrigger right) => left.Equals(right);
        public static bool operator !=(RollbackDeployTrigger left, RollbackDeployTrigger right) => !left.Equals(right);

        public static explicit operator string(RollbackDeployTrigger value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RollbackDeployTrigger other && Equals(other);
        public bool Equals(RollbackDeployTrigger other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServerPortProtocol : IEquatable<ServerPortProtocol>
    {
        private readonly string _value;

        private ServerPortProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServerPortProtocol Tcp { get; } = new ServerPortProtocol("TCP");
        public static ServerPortProtocol Udp { get; } = new ServerPortProtocol("UDP");

        public static bool operator ==(ServerPortProtocol left, ServerPortProtocol right) => left.Equals(right);
        public static bool operator !=(ServerPortProtocol left, ServerPortProtocol right) => !left.Equals(right);

        public static explicit operator string(ServerPortProtocol value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServerPortProtocol other && Equals(other);
        public bool Equals(ServerPortProtocol other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceAutoDeploy : IEquatable<ServiceAutoDeploy>
    {
        private readonly string _value;

        private ServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceAutoDeploy Yes { get; } = new ServiceAutoDeploy("yes");
        public static ServiceAutoDeploy No { get; } = new ServiceAutoDeploy("no");

        public static bool operator ==(ServiceAutoDeploy left, ServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(ServiceAutoDeploy left, ServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(ServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceAutoDeploy other && Equals(other);
        public bool Equals(ServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceNotifyOnFail : IEquatable<ServiceNotifyOnFail>
    {
        private readonly string _value;

        private ServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceNotifyOnFail Default { get; } = new ServiceNotifyOnFail("default");
        public static ServiceNotifyOnFail Notify { get; } = new ServiceNotifyOnFail("notify");
        public static ServiceNotifyOnFail Ignore { get; } = new ServiceNotifyOnFail("ignore");

        public static bool operator ==(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(ServiceNotifyOnFail left, ServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(ServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceNotifyOnFail other && Equals(other);
        public bool Equals(ServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspended : IEquatable<ServiceSuspended>
    {
        private readonly string _value;

        private ServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspended Suspended { get; } = new ServiceSuspended("suspended");
        public static ServiceSuspended NotSuspended { get; } = new ServiceSuspended("not_suspended");

        public static bool operator ==(ServiceSuspended left, ServiceSuspended right) => left.Equals(right);
        public static bool operator !=(ServiceSuspended left, ServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspended other && Equals(other);
        public bool Equals(ServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceSuspendersItem : IEquatable<ServiceSuspendersItem>
    {
        private readonly string _value;

        private ServiceSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceSuspendersItem Admin { get; } = new ServiceSuspendersItem("admin");
        public static ServiceSuspendersItem Billing { get; } = new ServiceSuspendersItem("billing");
        public static ServiceSuspendersItem User { get; } = new ServiceSuspendersItem("user");
        public static ServiceSuspendersItem ParentService { get; } = new ServiceSuspendersItem("parent_service");
        public static ServiceSuspendersItem Unknown { get; } = new ServiceSuspendersItem("unknown");

        public static bool operator ==(ServiceSuspendersItem left, ServiceSuspendersItem right) => left.Equals(right);
        public static bool operator !=(ServiceSuspendersItem left, ServiceSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(ServiceSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceSuspendersItem other && Equals(other);
        public bool Equals(ServiceSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct ServiceType : IEquatable<ServiceType>
    {
        private readonly string _value;

        private ServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ServiceType StaticSite { get; } = new ServiceType("static_site");
        public static ServiceType WebService { get; } = new ServiceType("web_service");
        public static ServiceType PrivateService { get; } = new ServiceType("private_service");
        public static ServiceType BackgroundWorker { get; } = new ServiceType("background_worker");
        public static ServiceType CronJob { get; } = new ServiceType("cron_job");

        public static bool operator ==(ServiceType left, ServiceType right) => left.Equals(right);
        public static bool operator !=(ServiceType left, ServiceType right) => !left.Equals(right);

        public static explicit operator string(ServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ServiceType other && Equals(other);
        public bool Equals(ServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteAutoDeploy : IEquatable<StaticSiteAutoDeploy>
    {
        private readonly string _value;

        private StaticSiteAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteAutoDeploy Yes { get; } = new StaticSiteAutoDeploy("yes");
        public static StaticSiteAutoDeploy No { get; } = new StaticSiteAutoDeploy("no");

        public static bool operator ==(StaticSiteAutoDeploy left, StaticSiteAutoDeploy right) => left.Equals(right);
        public static bool operator !=(StaticSiteAutoDeploy left, StaticSiteAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(StaticSiteAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteAutoDeploy other && Equals(other);
        public bool Equals(StaticSiteAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteDetailsPullRequestPreviewsEnabled : IEquatable<StaticSiteDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSiteDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteDetailsPullRequestPreviewsEnabled Yes { get; } = new StaticSiteDetailsPullRequestPreviewsEnabled("yes");
        public static StaticSiteDetailsPullRequestPreviewsEnabled No { get; } = new StaticSiteDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSiteDetailsPullRequestPreviewsEnabled left, StaticSiteDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSiteDetailsPullRequestPreviewsEnabled left, StaticSiteDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSiteDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSiteDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteNotifyOnFail : IEquatable<StaticSiteNotifyOnFail>
    {
        private readonly string _value;

        private StaticSiteNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteNotifyOnFail Default { get; } = new StaticSiteNotifyOnFail("default");
        public static StaticSiteNotifyOnFail Notify { get; } = new StaticSiteNotifyOnFail("notify");
        public static StaticSiteNotifyOnFail Ignore { get; } = new StaticSiteNotifyOnFail("ignore");

        public static bool operator ==(StaticSiteNotifyOnFail left, StaticSiteNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(StaticSiteNotifyOnFail left, StaticSiteNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(StaticSiteNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteNotifyOnFail other && Equals(other);
        public bool Equals(StaticSiteNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "yes"
    /// </summary>
    [EnumType]
    public readonly struct StaticSitePropertiesAutoDeploy : IEquatable<StaticSitePropertiesAutoDeploy>
    {
        private readonly string _value;

        private StaticSitePropertiesAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSitePropertiesAutoDeploy Yes { get; } = new StaticSitePropertiesAutoDeploy("yes");
        public static StaticSitePropertiesAutoDeploy No { get; } = new StaticSitePropertiesAutoDeploy("no");

        public static bool operator ==(StaticSitePropertiesAutoDeploy left, StaticSitePropertiesAutoDeploy right) => left.Equals(right);
        public static bool operator !=(StaticSitePropertiesAutoDeploy left, StaticSitePropertiesAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(StaticSitePropertiesAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSitePropertiesAutoDeploy other && Equals(other);
        public bool Equals(StaticSitePropertiesAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct StaticSitePropertiesPullRequestPreviewsEnabled : IEquatable<StaticSitePropertiesPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private StaticSitePropertiesPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSitePropertiesPullRequestPreviewsEnabled Yes { get; } = new StaticSitePropertiesPullRequestPreviewsEnabled("yes");
        public static StaticSitePropertiesPullRequestPreviewsEnabled No { get; } = new StaticSitePropertiesPullRequestPreviewsEnabled("no");

        public static bool operator ==(StaticSitePropertiesPullRequestPreviewsEnabled left, StaticSitePropertiesPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(StaticSitePropertiesPullRequestPreviewsEnabled left, StaticSitePropertiesPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(StaticSitePropertiesPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSitePropertiesPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(StaticSitePropertiesPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteRouteType : IEquatable<StaticSiteRouteType>
    {
        private readonly string _value;

        private StaticSiteRouteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteRouteType Redirect { get; } = new StaticSiteRouteType("redirect");
        public static StaticSiteRouteType Rewrite { get; } = new StaticSiteRouteType("rewrite");

        public static bool operator ==(StaticSiteRouteType left, StaticSiteRouteType right) => left.Equals(right);
        public static bool operator !=(StaticSiteRouteType left, StaticSiteRouteType right) => !left.Equals(right);

        public static explicit operator string(StaticSiteRouteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteRouteType other && Equals(other);
        public bool Equals(StaticSiteRouteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteSuspended : IEquatable<StaticSiteSuspended>
    {
        private readonly string _value;

        private StaticSiteSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteSuspended Suspended { get; } = new StaticSiteSuspended("suspended");
        public static StaticSiteSuspended NotSuspended { get; } = new StaticSiteSuspended("not_suspended");

        public static bool operator ==(StaticSiteSuspended left, StaticSiteSuspended right) => left.Equals(right);
        public static bool operator !=(StaticSiteSuspended left, StaticSiteSuspended right) => !left.Equals(right);

        public static explicit operator string(StaticSiteSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteSuspended other && Equals(other);
        public bool Equals(StaticSiteSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteSuspendersItem : IEquatable<StaticSiteSuspendersItem>
    {
        private readonly string _value;

        private StaticSiteSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteSuspendersItem Admin { get; } = new StaticSiteSuspendersItem("admin");
        public static StaticSiteSuspendersItem Billing { get; } = new StaticSiteSuspendersItem("billing");
        public static StaticSiteSuspendersItem User { get; } = new StaticSiteSuspendersItem("user");
        public static StaticSiteSuspendersItem ParentService { get; } = new StaticSiteSuspendersItem("parent_service");
        public static StaticSiteSuspendersItem Unknown { get; } = new StaticSiteSuspendersItem("unknown");

        public static bool operator ==(StaticSiteSuspendersItem left, StaticSiteSuspendersItem right) => left.Equals(right);
        public static bool operator !=(StaticSiteSuspendersItem left, StaticSiteSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(StaticSiteSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteSuspendersItem other && Equals(other);
        public bool Equals(StaticSiteSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StaticSiteType : IEquatable<StaticSiteType>
    {
        private readonly string _value;

        private StaticSiteType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StaticSiteType StaticSite { get; } = new StaticSiteType("static_site");
        public static StaticSiteType WebService { get; } = new StaticSiteType("web_service");
        public static StaticSiteType PrivateService { get; } = new StaticSiteType("private_service");
        public static StaticSiteType BackgroundWorker { get; } = new StaticSiteType("background_worker");
        public static StaticSiteType CronJob { get; } = new StaticSiteType("cron_job");

        public static bool operator ==(StaticSiteType left, StaticSiteType right) => left.Equals(right);
        public static bool operator !=(StaticSiteType left, StaticSiteType right) => !left.Equals(right);

        public static explicit operator string(StaticSiteType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StaticSiteType other && Equals(other);
        public bool Equals(StaticSiteType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceAutoDeploy : IEquatable<WebServiceAutoDeploy>
    {
        private readonly string _value;

        private WebServiceAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceAutoDeploy Yes { get; } = new WebServiceAutoDeploy("yes");
        public static WebServiceAutoDeploy No { get; } = new WebServiceAutoDeploy("no");

        public static bool operator ==(WebServiceAutoDeploy left, WebServiceAutoDeploy right) => left.Equals(right);
        public static bool operator !=(WebServiceAutoDeploy left, WebServiceAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(WebServiceAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceAutoDeploy other && Equals(other);
        public bool Equals(WebServiceAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsEnv : IEquatable<WebServiceDetailsEnv>
    {
        private readonly string _value;

        private WebServiceDetailsEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsEnv Docker { get; } = new WebServiceDetailsEnv("docker");
        public static WebServiceDetailsEnv Elixir { get; } = new WebServiceDetailsEnv("elixir");
        public static WebServiceDetailsEnv Go { get; } = new WebServiceDetailsEnv("go");
        public static WebServiceDetailsEnv Node { get; } = new WebServiceDetailsEnv("node");
        public static WebServiceDetailsEnv Python { get; } = new WebServiceDetailsEnv("python");
        public static WebServiceDetailsEnv Ruby { get; } = new WebServiceDetailsEnv("ruby");
        public static WebServiceDetailsEnv Rust { get; } = new WebServiceDetailsEnv("rust");
        public static WebServiceDetailsEnv Image { get; } = new WebServiceDetailsEnv("image");

        public static bool operator ==(WebServiceDetailsEnv left, WebServiceDetailsEnv right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsEnv left, WebServiceDetailsEnv right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsEnv other && Equals(other);
        public bool Equals(WebServiceDetailsEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
    /// </summary>
    [EnumType]
    public readonly struct WebServiceDetailsPlan : IEquatable<WebServiceDetailsPlan>
    {
        private readonly string _value;

        private WebServiceDetailsPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsPlan Starter { get; } = new WebServiceDetailsPlan("starter");
        public static WebServiceDetailsPlan StarterPlus { get; } = new WebServiceDetailsPlan("starter_plus");
        public static WebServiceDetailsPlan Standard { get; } = new WebServiceDetailsPlan("standard");
        public static WebServiceDetailsPlan StandardPlus { get; } = new WebServiceDetailsPlan("standard_plus");
        public static WebServiceDetailsPlan Pro { get; } = new WebServiceDetailsPlan("pro");
        public static WebServiceDetailsPlan ProPlus { get; } = new WebServiceDetailsPlan("pro_plus");
        public static WebServiceDetailsPlan ProMax { get; } = new WebServiceDetailsPlan("pro_max");
        public static WebServiceDetailsPlan ProUltra { get; } = new WebServiceDetailsPlan("pro_ultra");
        public static WebServiceDetailsPlan Free { get; } = new WebServiceDetailsPlan("free");
        public static WebServiceDetailsPlan Custom { get; } = new WebServiceDetailsPlan("custom");

        public static bool operator ==(WebServiceDetailsPlan left, WebServiceDetailsPlan right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsPlan left, WebServiceDetailsPlan right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsPlan other && Equals(other);
        public bool Equals(WebServiceDetailsPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceDetailsPullRequestPreviewsEnabled : IEquatable<WebServiceDetailsPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServiceDetailsPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsPullRequestPreviewsEnabled Yes { get; } = new WebServiceDetailsPullRequestPreviewsEnabled("yes");
        public static WebServiceDetailsPullRequestPreviewsEnabled No { get; } = new WebServiceDetailsPullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServiceDetailsPullRequestPreviewsEnabled left, WebServiceDetailsPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsPullRequestPreviewsEnabled left, WebServiceDetailsPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServiceDetailsPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceDetailsRegion : IEquatable<WebServiceDetailsRegion>
    {
        private readonly string _value;

        private WebServiceDetailsRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceDetailsRegion Frankfurt { get; } = new WebServiceDetailsRegion("frankfurt");
        public static WebServiceDetailsRegion Oregon { get; } = new WebServiceDetailsRegion("oregon");
        public static WebServiceDetailsRegion Ohio { get; } = new WebServiceDetailsRegion("ohio");
        public static WebServiceDetailsRegion Singapore { get; } = new WebServiceDetailsRegion("singapore");

        public static bool operator ==(WebServiceDetailsRegion left, WebServiceDetailsRegion right) => left.Equals(right);
        public static bool operator !=(WebServiceDetailsRegion left, WebServiceDetailsRegion right) => !left.Equals(right);

        public static explicit operator string(WebServiceDetailsRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceDetailsRegion other && Equals(other);
        public bool Equals(WebServiceDetailsRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceNotifyOnFail : IEquatable<WebServiceNotifyOnFail>
    {
        private readonly string _value;

        private WebServiceNotifyOnFail(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceNotifyOnFail Default { get; } = new WebServiceNotifyOnFail("default");
        public static WebServiceNotifyOnFail Notify { get; } = new WebServiceNotifyOnFail("notify");
        public static WebServiceNotifyOnFail Ignore { get; } = new WebServiceNotifyOnFail("ignore");

        public static bool operator ==(WebServiceNotifyOnFail left, WebServiceNotifyOnFail right) => left.Equals(right);
        public static bool operator !=(WebServiceNotifyOnFail left, WebServiceNotifyOnFail right) => !left.Equals(right);

        public static explicit operator string(WebServiceNotifyOnFail value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceNotifyOnFail other && Equals(other);
        public bool Equals(WebServiceNotifyOnFail other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "yes"
    /// </summary>
    [EnumType]
    public readonly struct WebServicePropertiesAutoDeploy : IEquatable<WebServicePropertiesAutoDeploy>
    {
        private readonly string _value;

        private WebServicePropertiesAutoDeploy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServicePropertiesAutoDeploy Yes { get; } = new WebServicePropertiesAutoDeploy("yes");
        public static WebServicePropertiesAutoDeploy No { get; } = new WebServicePropertiesAutoDeploy("no");

        public static bool operator ==(WebServicePropertiesAutoDeploy left, WebServicePropertiesAutoDeploy right) => left.Equals(right);
        public static bool operator !=(WebServicePropertiesAutoDeploy left, WebServicePropertiesAutoDeploy right) => !left.Equals(right);

        public static explicit operator string(WebServicePropertiesAutoDeploy value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServicePropertiesAutoDeploy other && Equals(other);
        public bool Equals(WebServicePropertiesAutoDeploy other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Environment (runtime)
    /// </summary>
    [EnumType]
    public readonly struct WebServicePropertiesEnv : IEquatable<WebServicePropertiesEnv>
    {
        private readonly string _value;

        private WebServicePropertiesEnv(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServicePropertiesEnv Docker { get; } = new WebServicePropertiesEnv("docker");
        public static WebServicePropertiesEnv Elixir { get; } = new WebServicePropertiesEnv("elixir");
        public static WebServicePropertiesEnv Go { get; } = new WebServicePropertiesEnv("go");
        public static WebServicePropertiesEnv Node { get; } = new WebServicePropertiesEnv("node");
        public static WebServicePropertiesEnv Python { get; } = new WebServicePropertiesEnv("python");
        public static WebServicePropertiesEnv Ruby { get; } = new WebServicePropertiesEnv("ruby");
        public static WebServicePropertiesEnv Rust { get; } = new WebServicePropertiesEnv("rust");
        public static WebServicePropertiesEnv Image { get; } = new WebServicePropertiesEnv("image");

        public static bool operator ==(WebServicePropertiesEnv left, WebServicePropertiesEnv right) => left.Equals(right);
        public static bool operator !=(WebServicePropertiesEnv left, WebServicePropertiesEnv right) => !left.Equals(right);

        public static explicit operator string(WebServicePropertiesEnv value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServicePropertiesEnv other && Equals(other);
        public bool Equals(WebServicePropertiesEnv other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServicePropertiesPlan : IEquatable<WebServicePropertiesPlan>
    {
        private readonly string _value;

        private WebServicePropertiesPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServicePropertiesPlan Starter { get; } = new WebServicePropertiesPlan("starter");
        public static WebServicePropertiesPlan Standard { get; } = new WebServicePropertiesPlan("standard");
        public static WebServicePropertiesPlan Pro { get; } = new WebServicePropertiesPlan("pro");
        public static WebServicePropertiesPlan ProPlus { get; } = new WebServicePropertiesPlan("pro_plus");
        public static WebServicePropertiesPlan ProMax { get; } = new WebServicePropertiesPlan("pro_max");
        public static WebServicePropertiesPlan ProUltra { get; } = new WebServicePropertiesPlan("pro_ultra");

        public static bool operator ==(WebServicePropertiesPlan left, WebServicePropertiesPlan right) => left.Equals(right);
        public static bool operator !=(WebServicePropertiesPlan left, WebServicePropertiesPlan right) => !left.Equals(right);

        public static explicit operator string(WebServicePropertiesPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServicePropertiesPlan other && Equals(other);
        public bool Equals(WebServicePropertiesPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "no"
    /// </summary>
    [EnumType]
    public readonly struct WebServicePropertiesPullRequestPreviewsEnabled : IEquatable<WebServicePropertiesPullRequestPreviewsEnabled>
    {
        private readonly string _value;

        private WebServicePropertiesPullRequestPreviewsEnabled(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServicePropertiesPullRequestPreviewsEnabled Yes { get; } = new WebServicePropertiesPullRequestPreviewsEnabled("yes");
        public static WebServicePropertiesPullRequestPreviewsEnabled No { get; } = new WebServicePropertiesPullRequestPreviewsEnabled("no");

        public static bool operator ==(WebServicePropertiesPullRequestPreviewsEnabled left, WebServicePropertiesPullRequestPreviewsEnabled right) => left.Equals(right);
        public static bool operator !=(WebServicePropertiesPullRequestPreviewsEnabled left, WebServicePropertiesPullRequestPreviewsEnabled right) => !left.Equals(right);

        public static explicit operator string(WebServicePropertiesPullRequestPreviewsEnabled value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServicePropertiesPullRequestPreviewsEnabled other && Equals(other);
        public bool Equals(WebServicePropertiesPullRequestPreviewsEnabled other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServicePropertiesRegion : IEquatable<WebServicePropertiesRegion>
    {
        private readonly string _value;

        private WebServicePropertiesRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServicePropertiesRegion Frankfurt { get; } = new WebServicePropertiesRegion("frankfurt");
        public static WebServicePropertiesRegion Oregon { get; } = new WebServicePropertiesRegion("oregon");
        public static WebServicePropertiesRegion Ohio { get; } = new WebServicePropertiesRegion("ohio");
        public static WebServicePropertiesRegion Singapore { get; } = new WebServicePropertiesRegion("singapore");

        public static bool operator ==(WebServicePropertiesRegion left, WebServicePropertiesRegion right) => left.Equals(right);
        public static bool operator !=(WebServicePropertiesRegion left, WebServicePropertiesRegion right) => !left.Equals(right);

        public static explicit operator string(WebServicePropertiesRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServicePropertiesRegion other && Equals(other);
        public bool Equals(WebServicePropertiesRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceSuspended : IEquatable<WebServiceSuspended>
    {
        private readonly string _value;

        private WebServiceSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceSuspended Suspended { get; } = new WebServiceSuspended("suspended");
        public static WebServiceSuspended NotSuspended { get; } = new WebServiceSuspended("not_suspended");

        public static bool operator ==(WebServiceSuspended left, WebServiceSuspended right) => left.Equals(right);
        public static bool operator !=(WebServiceSuspended left, WebServiceSuspended right) => !left.Equals(right);

        public static explicit operator string(WebServiceSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceSuspended other && Equals(other);
        public bool Equals(WebServiceSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceSuspendersItem : IEquatable<WebServiceSuspendersItem>
    {
        private readonly string _value;

        private WebServiceSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceSuspendersItem Admin { get; } = new WebServiceSuspendersItem("admin");
        public static WebServiceSuspendersItem Billing { get; } = new WebServiceSuspendersItem("billing");
        public static WebServiceSuspendersItem User { get; } = new WebServiceSuspendersItem("user");
        public static WebServiceSuspendersItem ParentService { get; } = new WebServiceSuspendersItem("parent_service");
        public static WebServiceSuspendersItem Unknown { get; } = new WebServiceSuspendersItem("unknown");

        public static bool operator ==(WebServiceSuspendersItem left, WebServiceSuspendersItem right) => left.Equals(right);
        public static bool operator !=(WebServiceSuspendersItem left, WebServiceSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(WebServiceSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceSuspendersItem other && Equals(other);
        public bool Equals(WebServiceSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct WebServiceType : IEquatable<WebServiceType>
    {
        private readonly string _value;

        private WebServiceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static WebServiceType StaticSite { get; } = new WebServiceType("static_site");
        public static WebServiceType WebService { get; } = new WebServiceType("web_service");
        public static WebServiceType PrivateService { get; } = new WebServiceType("private_service");
        public static WebServiceType BackgroundWorker { get; } = new WebServiceType("background_worker");
        public static WebServiceType CronJob { get; } = new WebServiceType("cron_job");

        public static bool operator ==(WebServiceType left, WebServiceType right) => left.Equals(right);
        public static bool operator !=(WebServiceType left, WebServiceType right) => !left.Equals(right);

        public static explicit operator string(WebServiceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is WebServiceType other && Equals(other);
        public bool Equals(WebServiceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
