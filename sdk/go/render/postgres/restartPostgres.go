// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestartPostgres struct {
	pulumi.CustomResourceState
}

// NewRestartPostgres registers a new resource with the given unique name, arguments, and options.
func NewRestartPostgres(ctx *pulumi.Context,
	name string, args *RestartPostgresArgs, opts ...pulumi.ResourceOption) (*RestartPostgres, error) {
	if args == nil {
		args = &RestartPostgresArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestartPostgres
	err := ctx.RegisterResource("render:postgres:RestartPostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartPostgres gets an existing RestartPostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartPostgresState, opts ...pulumi.ResourceOption) (*RestartPostgres, error) {
	var resource RestartPostgres
	err := ctx.ReadResource("render:postgres:RestartPostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartPostgres resources.
type restartPostgresState struct {
}

type RestartPostgresState struct {
}

func (RestartPostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartPostgresState)(nil)).Elem()
}

type restartPostgresArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a RestartPostgres resource.
type RestartPostgresArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (RestartPostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartPostgresArgs)(nil)).Elem()
}

type RestartPostgresInput interface {
	pulumi.Input

	ToRestartPostgresOutput() RestartPostgresOutput
	ToRestartPostgresOutputWithContext(ctx context.Context) RestartPostgresOutput
}

func (*RestartPostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartPostgres)(nil)).Elem()
}

func (i *RestartPostgres) ToRestartPostgresOutput() RestartPostgresOutput {
	return i.ToRestartPostgresOutputWithContext(context.Background())
}

func (i *RestartPostgres) ToRestartPostgresOutputWithContext(ctx context.Context) RestartPostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartPostgresOutput)
}

type RestartPostgresOutput struct{ *pulumi.OutputState }

func (RestartPostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartPostgres)(nil)).Elem()
}

func (o RestartPostgresOutput) ToRestartPostgresOutput() RestartPostgresOutput {
	return o
}

func (o RestartPostgresOutput) ToRestartPostgresOutputWithContext(ctx context.Context) RestartPostgresOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartPostgresInput)(nil)).Elem(), &RestartPostgres{})
	pulumi.RegisterOutputType(RestartPostgresOutput{})
}
