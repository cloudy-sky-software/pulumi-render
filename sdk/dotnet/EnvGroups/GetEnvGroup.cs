// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.EnvGroups
{
    public static class GetEnvGroup
    {
        public static Task<GetEnvGroupResult> InvokeAsync(GetEnvGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEnvGroupResult>("render:env-groups:getEnvGroup", args ?? new GetEnvGroupArgs(), options.WithDefaults());

        public static Output<GetEnvGroupResult> Invoke(GetEnvGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvGroupResult>("render:env-groups:getEnvGroup", args ?? new GetEnvGroupInvokeArgs(), options.WithDefaults());

        public static Output<GetEnvGroupResult> Invoke(GetEnvGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEnvGroupResult>("render:env-groups:getEnvGroup", args ?? new GetEnvGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEnvGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter for resources that belong to an environment group
        /// </summary>
        [Input("envGroupId", required: true)]
        public string EnvGroupId { get; set; } = null!;

        public GetEnvGroupArgs()
        {
        }
        public static new GetEnvGroupArgs Empty => new GetEnvGroupArgs();
    }

    public sealed class GetEnvGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Filter for resources that belong to an environment group
        /// </summary>
        [Input("envGroupId", required: true)]
        public Input<string> EnvGroupId { get; set; } = null!;

        public GetEnvGroupInvokeArgs()
        {
        }
        public static new GetEnvGroupInvokeArgs Empty => new GetEnvGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetEnvGroupResult
    {
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.EnvVar> EnvVars;
        public readonly string? EnvironmentId;
        public readonly string Id;
        public readonly string Name;
        public readonly string OwnerId;
        public readonly ImmutableArray<Outputs.SecretFile> SecretFiles;
        /// <summary>
        /// List of serviceIds linked to the envGroup
        /// </summary>
        public readonly ImmutableArray<Outputs.EnvGroupLink> ServiceLinks;
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetEnvGroupResult(
            string createdAt,

            ImmutableArray<Outputs.EnvVar> envVars,

            string? environmentId,

            string id,

            string name,

            string ownerId,

            ImmutableArray<Outputs.SecretFile> secretFiles,

            ImmutableArray<Outputs.EnvGroupLink> serviceLinks,

            string updatedAt)
        {
            CreatedAt = createdAt;
            EnvVars = envVars;
            EnvironmentId = environmentId;
            Id = id;
            Name = name;
            OwnerId = ownerId;
            SecretFiles = secretFiles;
            ServiceLinks = serviceLinks;
            UpdatedAt = updatedAt;
        }
    }
}
