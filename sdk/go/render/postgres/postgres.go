// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Input for creating a database
type Postgres struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The URL to view the PostgreSQL instance in the Render Dashboard
	DashboardUrl           pulumi.StringOutput    `pulumi:"dashboardUrl"`
	DatabaseName           pulumi.StringOutput    `pulumi:"databaseName"`
	DatabaseUser           pulumi.StringOutput    `pulumi:"databaseUser"`
	DatadogAPIKey          pulumi.StringPtrOutput `pulumi:"datadogAPIKey"`
	DiskSizeGB             pulumi.IntPtrOutput    `pulumi:"diskSizeGB"`
	EnableHighAvailability pulumi.BoolPtrOutput   `pulumi:"enableHighAvailability"`
	EnvironmentId          pulumi.StringPtrOutput `pulumi:"environmentId"`
	// The time at which the database will be expire. Applies to free tier databases only.
	ExpiresAt               pulumi.StringPtrOutput                    `pulumi:"expiresAt"`
	HighAvailabilityEnabled pulumi.BoolOutput                         `pulumi:"highAvailabilityEnabled"`
	IpAllowList             CidrBlockAndDescriptionArrayOutput        `pulumi:"ipAllowList"`
	Maintenance             RedisDetailpropertiesmaintenancePtrOutput `pulumi:"maintenance"`
	Name                    pulumi.StringOutput                       `pulumi:"name"`
	Owner                   OwnerOutput                               `pulumi:"owner"`
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId           pulumi.StringOutput    `pulumi:"ownerId"`
	Plan              PlanOutput             `pulumi:"plan"`
	PrimaryPostgresID pulumi.StringPtrOutput `pulumi:"primaryPostgresID"`
	ReadReplicas      ReadReplicaArrayOutput `pulumi:"readReplicas"`
	// Defaults to "oregon"
	Region     RegionOutput              `pulumi:"region"`
	Role       RoleOutput                `pulumi:"role"`
	Status     StatusOutput              `pulumi:"status"`
	Suspended  SuspendedOutput           `pulumi:"suspended"`
	Suspenders SuspendersItemArrayOutput `pulumi:"suspenders"`
	UpdatedAt  pulumi.StringOutput       `pulumi:"updatedAt"`
	// The PostgreSQL version
	Version VersionOutput `pulumi:"version"`
}

// NewPostgres registers a new resource with the given unique name, arguments, and options.
func NewPostgres(ctx *pulumi.Context,
	name string, args *PostgresArgs, opts ...pulumi.ResourceOption) (*Postgres, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.DatabaseName == nil {
		args.DatabaseName = pulumi.StringPtr("randomly generated")
	}
	if args.DatabaseUser == nil {
		args.DatabaseUser = pulumi.StringPtr("randomly generated")
	}
	if args.EnableHighAvailability == nil {
		args.EnableHighAvailability = pulumi.BoolPtr(false)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Postgres
	err := ctx.RegisterResource("render:postgres:Postgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgres gets an existing Postgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresState, opts ...pulumi.ResourceOption) (*Postgres, error) {
	var resource Postgres
	err := ctx.ReadResource("render:postgres:Postgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Postgres resources.
type postgresState struct {
}

type PostgresState struct {
}

func (PostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresState)(nil)).Elem()
}

type postgresArgs struct {
	DatabaseName  *string `pulumi:"databaseName"`
	DatabaseUser  *string `pulumi:"databaseUser"`
	DatadogAPIKey *string `pulumi:"datadogAPIKey"`
	// The number of gigabytes of disk space to allocate for the database
	DiskSizeGB             *int                      `pulumi:"diskSizeGB"`
	EnableHighAvailability *bool                     `pulumi:"enableHighAvailability"`
	EnvironmentId          *string                   `pulumi:"environmentId"`
	IpAllowList            []CidrBlockAndDescription `pulumi:"ipAllowList"`
	// The name of the database as it will appear in the Render Dashboard
	Name *string `pulumi:"name"`
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId      string                 `pulumi:"ownerId"`
	Plan         Plan                   `pulumi:"plan"`
	ReadReplicas []ReadReplicaInputType `pulumi:"readReplicas"`
	Region       *string                `pulumi:"region"`
	// The PostgreSQL version
	Version Version `pulumi:"version"`
}

// The set of arguments for constructing a Postgres resource.
type PostgresArgs struct {
	DatabaseName  pulumi.StringPtrInput
	DatabaseUser  pulumi.StringPtrInput
	DatadogAPIKey pulumi.StringPtrInput
	// The number of gigabytes of disk space to allocate for the database
	DiskSizeGB             pulumi.IntPtrInput
	EnableHighAvailability pulumi.BoolPtrInput
	EnvironmentId          pulumi.StringPtrInput
	IpAllowList            CidrBlockAndDescriptionArrayInput
	// The name of the database as it will appear in the Render Dashboard
	Name pulumi.StringPtrInput
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId      pulumi.StringInput
	Plan         PlanInput
	ReadReplicas ReadReplicaInputTypeArrayInput
	Region       pulumi.StringPtrInput
	// The PostgreSQL version
	Version VersionInput
}

func (PostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresArgs)(nil)).Elem()
}

type PostgresInput interface {
	pulumi.Input

	ToPostgresOutput() PostgresOutput
	ToPostgresOutputWithContext(ctx context.Context) PostgresOutput
}

func (*Postgres) ElementType() reflect.Type {
	return reflect.TypeOf((**Postgres)(nil)).Elem()
}

func (i *Postgres) ToPostgresOutput() PostgresOutput {
	return i.ToPostgresOutputWithContext(context.Background())
}

func (i *Postgres) ToPostgresOutputWithContext(ctx context.Context) PostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresOutput)
}

type PostgresOutput struct{ *pulumi.OutputState }

func (PostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Postgres)(nil)).Elem()
}

func (o PostgresOutput) ToPostgresOutput() PostgresOutput {
	return o
}

func (o PostgresOutput) ToPostgresOutputWithContext(ctx context.Context) PostgresOutput {
	return o
}

func (o PostgresOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view the PostgreSQL instance in the Render Dashboard
func (o PostgresOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.DashboardUrl }).(pulumi.StringOutput)
}

func (o PostgresOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o PostgresOutput) DatabaseUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.DatabaseUser }).(pulumi.StringOutput)
}

func (o PostgresOutput) DatadogAPIKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringPtrOutput { return v.DatadogAPIKey }).(pulumi.StringPtrOutput)
}

func (o PostgresOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.IntPtrOutput { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

func (o PostgresOutput) EnableHighAvailability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.BoolPtrOutput { return v.EnableHighAvailability }).(pulumi.BoolPtrOutput)
}

func (o PostgresOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringPtrOutput { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// The time at which the database will be expire. Applies to free tier databases only.
func (o PostgresOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

func (o PostgresOutput) HighAvailabilityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Postgres) pulumi.BoolOutput { return v.HighAvailabilityEnabled }).(pulumi.BoolOutput)
}

func (o PostgresOutput) IpAllowList() CidrBlockAndDescriptionArrayOutput {
	return o.ApplyT(func(v *Postgres) CidrBlockAndDescriptionArrayOutput { return v.IpAllowList }).(CidrBlockAndDescriptionArrayOutput)
}

func (o PostgresOutput) Maintenance() RedisDetailpropertiesmaintenancePtrOutput {
	return o.ApplyT(func(v *Postgres) RedisDetailpropertiesmaintenancePtrOutput { return v.Maintenance }).(RedisDetailpropertiesmaintenancePtrOutput)
}

func (o PostgresOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PostgresOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v *Postgres) OwnerOutput { return v.Owner }).(OwnerOutput)
}

// The ID of the owner (team or personal user) whose resources should be returned
func (o PostgresOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o PostgresOutput) Plan() PlanOutput {
	return o.ApplyT(func(v *Postgres) PlanOutput { return v.Plan }).(PlanOutput)
}

func (o PostgresOutput) PrimaryPostgresID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringPtrOutput { return v.PrimaryPostgresID }).(pulumi.StringPtrOutput)
}

func (o PostgresOutput) ReadReplicas() ReadReplicaArrayOutput {
	return o.ApplyT(func(v *Postgres) ReadReplicaArrayOutput { return v.ReadReplicas }).(ReadReplicaArrayOutput)
}

// Defaults to "oregon"
func (o PostgresOutput) Region() RegionOutput {
	return o.ApplyT(func(v *Postgres) RegionOutput { return v.Region }).(RegionOutput)
}

func (o PostgresOutput) Role() RoleOutput {
	return o.ApplyT(func(v *Postgres) RoleOutput { return v.Role }).(RoleOutput)
}

func (o PostgresOutput) Status() StatusOutput {
	return o.ApplyT(func(v *Postgres) StatusOutput { return v.Status }).(StatusOutput)
}

func (o PostgresOutput) Suspended() SuspendedOutput {
	return o.ApplyT(func(v *Postgres) SuspendedOutput { return v.Suspended }).(SuspendedOutput)
}

func (o PostgresOutput) Suspenders() SuspendersItemArrayOutput {
	return o.ApplyT(func(v *Postgres) SuspendersItemArrayOutput { return v.Suspenders }).(SuspendersItemArrayOutput)
}

func (o PostgresOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Postgres) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The PostgreSQL version
func (o PostgresOutput) Version() VersionOutput {
	return o.ApplyT(func(v *Postgres) VersionOutput { return v.Version }).(VersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresInput)(nil)).Elem(), &Postgres{})
	pulumi.RegisterOutputType(PostgresOutput{})
}
