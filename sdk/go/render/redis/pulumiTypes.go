// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CidrBlockAndDescription struct {
	CidrBlock string `pulumi:"cidrBlock"`
	// User-provided description of the CIDR block
	Description string `pulumi:"description"`
}

// CidrBlockAndDescriptionInput is an input type that accepts CidrBlockAndDescriptionArgs and CidrBlockAndDescriptionOutput values.
// You can construct a concrete instance of `CidrBlockAndDescriptionInput` via:
//
//	CidrBlockAndDescriptionArgs{...}
type CidrBlockAndDescriptionInput interface {
	pulumi.Input

	ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput
	ToCidrBlockAndDescriptionOutputWithContext(context.Context) CidrBlockAndDescriptionOutput
}

type CidrBlockAndDescriptionArgs struct {
	CidrBlock pulumi.StringInput `pulumi:"cidrBlock"`
	// User-provided description of the CIDR block
	Description pulumi.StringInput `pulumi:"description"`
}

func (CidrBlockAndDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockAndDescription)(nil)).Elem()
}

func (i CidrBlockAndDescriptionArgs) ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput {
	return i.ToCidrBlockAndDescriptionOutputWithContext(context.Background())
}

func (i CidrBlockAndDescriptionArgs) ToCidrBlockAndDescriptionOutputWithContext(ctx context.Context) CidrBlockAndDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAndDescriptionOutput)
}

// CidrBlockAndDescriptionArrayInput is an input type that accepts CidrBlockAndDescriptionArray and CidrBlockAndDescriptionArrayOutput values.
// You can construct a concrete instance of `CidrBlockAndDescriptionArrayInput` via:
//
//	CidrBlockAndDescriptionArray{ CidrBlockAndDescriptionArgs{...} }
type CidrBlockAndDescriptionArrayInput interface {
	pulumi.Input

	ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput
	ToCidrBlockAndDescriptionArrayOutputWithContext(context.Context) CidrBlockAndDescriptionArrayOutput
}

type CidrBlockAndDescriptionArray []CidrBlockAndDescriptionInput

func (CidrBlockAndDescriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockAndDescription)(nil)).Elem()
}

func (i CidrBlockAndDescriptionArray) ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput {
	return i.ToCidrBlockAndDescriptionArrayOutputWithContext(context.Background())
}

func (i CidrBlockAndDescriptionArray) ToCidrBlockAndDescriptionArrayOutputWithContext(ctx context.Context) CidrBlockAndDescriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAndDescriptionArrayOutput)
}

type CidrBlockAndDescriptionOutput struct{ *pulumi.OutputState }

func (CidrBlockAndDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrBlockAndDescription)(nil)).Elem()
}

func (o CidrBlockAndDescriptionOutput) ToCidrBlockAndDescriptionOutput() CidrBlockAndDescriptionOutput {
	return o
}

func (o CidrBlockAndDescriptionOutput) ToCidrBlockAndDescriptionOutputWithContext(ctx context.Context) CidrBlockAndDescriptionOutput {
	return o
}

func (o CidrBlockAndDescriptionOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockAndDescription) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// User-provided description of the CIDR block
func (o CidrBlockAndDescriptionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CidrBlockAndDescription) string { return v.Description }).(pulumi.StringOutput)
}

type CidrBlockAndDescriptionArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockAndDescriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CidrBlockAndDescription)(nil)).Elem()
}

func (o CidrBlockAndDescriptionArrayOutput) ToCidrBlockAndDescriptionArrayOutput() CidrBlockAndDescriptionArrayOutput {
	return o
}

func (o CidrBlockAndDescriptionArrayOutput) ToCidrBlockAndDescriptionArrayOutputWithContext(ctx context.Context) CidrBlockAndDescriptionArrayOutput {
	return o
}

func (o CidrBlockAndDescriptionArrayOutput) Index(i pulumi.IntInput) CidrBlockAndDescriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CidrBlockAndDescription {
		return vs[0].([]CidrBlockAndDescription)[vs[1].(int)]
	}).(CidrBlockAndDescriptionOutput)
}

type MaintenanceProperties struct {
	Id string `pulumi:"id"`
	// If present, the maintenance run cannot be scheduled for later than this date-time.
	PendingMaintenanceBy *string                    `pulumi:"pendingMaintenanceBy"`
	ScheduledAt          string                     `pulumi:"scheduledAt"`
	State                MaintenancePropertiesState `pulumi:"state"`
	Type                 string                     `pulumi:"type"`
}

type MaintenancePropertiesOutput struct{ *pulumi.OutputState }

func (MaintenancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceProperties)(nil)).Elem()
}

func (o MaintenancePropertiesOutput) ToMaintenancePropertiesOutput() MaintenancePropertiesOutput {
	return o
}

func (o MaintenancePropertiesOutput) ToMaintenancePropertiesOutputWithContext(ctx context.Context) MaintenancePropertiesOutput {
	return o
}

func (o MaintenancePropertiesOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceProperties) string { return v.Id }).(pulumi.StringOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o MaintenancePropertiesOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceProperties) *string { return v.PendingMaintenanceBy }).(pulumi.StringPtrOutput)
}

func (o MaintenancePropertiesOutput) ScheduledAt() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceProperties) string { return v.ScheduledAt }).(pulumi.StringOutput)
}

func (o MaintenancePropertiesOutput) State() MaintenancePropertiesStateOutput {
	return o.ApplyT(func(v MaintenanceProperties) MaintenancePropertiesState { return v.State }).(MaintenancePropertiesStateOutput)
}

func (o MaintenancePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceProperties) string { return v.Type }).(pulumi.StringOutput)
}

type MaintenancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceProperties)(nil)).Elem()
}

func (o MaintenancePropertiesPtrOutput) ToMaintenancePropertiesPtrOutput() MaintenancePropertiesPtrOutput {
	return o
}

func (o MaintenancePropertiesPtrOutput) ToMaintenancePropertiesPtrOutputWithContext(ctx context.Context) MaintenancePropertiesPtrOutput {
	return o
}

func (o MaintenancePropertiesPtrOutput) Elem() MaintenancePropertiesOutput {
	return o.ApplyT(func(v *MaintenanceProperties) MaintenanceProperties {
		if v != nil {
			return *v
		}
		var ret MaintenanceProperties
		return ret
	}).(MaintenancePropertiesOutput)
}

func (o MaintenancePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o MaintenancePropertiesPtrOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PendingMaintenanceBy
	}).(pulumi.StringPtrOutput)
}

func (o MaintenancePropertiesPtrOutput) ScheduledAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduledAt
	}).(pulumi.StringPtrOutput)
}

func (o MaintenancePropertiesPtrOutput) State() MaintenancePropertiesStatePtrOutput {
	return o.ApplyT(func(v *MaintenanceProperties) *MaintenancePropertiesState {
		if v == nil {
			return nil
		}
		return &v.State
	}).(MaintenancePropertiesStatePtrOutput)
}

func (o MaintenancePropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type Owner struct {
	Email string `pulumi:"email"`
	Id    string `pulumi:"id"`
	Name  string `pulumi:"name"`
	// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
	TwoFactorAuthEnabled *bool     `pulumi:"twoFactorAuthEnabled"`
	Type                 OwnerType `pulumi:"type"`
}

type OwnerOutput struct{ *pulumi.OutputState }

func (OwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Owner)(nil)).Elem()
}

func (o OwnerOutput) ToOwnerOutput() OwnerOutput {
	return o
}

func (o OwnerOutput) ToOwnerOutputWithContext(ctx context.Context) OwnerOutput {
	return o
}

func (o OwnerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Email }).(pulumi.StringOutput)
}

func (o OwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Id }).(pulumi.StringOutput)
}

func (o OwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Owner) string { return v.Name }).(pulumi.StringOutput)
}

// Whether two-factor authentication is enabled for the owner. Only present if `type` is `user`.
func (o OwnerOutput) TwoFactorAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Owner) *bool { return v.TwoFactorAuthEnabled }).(pulumi.BoolPtrOutput)
}

func (o OwnerOutput) Type() OwnerTypeOutput {
	return o.ApplyT(func(v Owner) OwnerType { return v.Type }).(OwnerTypeOutput)
}

// A Redis instance
type RedisType struct {
	// The creation time of the Redis instance
	CreatedAt string `pulumi:"createdAt"`
	// The URL to view the Redis instance in the Render Dashboard
	DashboardUrl string `pulumi:"dashboardUrl"`
	// The ID of the environment the Redis instance is associated with
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the Redis instance
	Id string `pulumi:"id"`
	// The IP allow list for the Redis instance
	IpAllowList []CidrBlockAndDescription `pulumi:"ipAllowList"`
	// The name of the Redis instance
	Name string `pulumi:"name"`
	// Options for a Redis instance
	Options RedisOptions `pulumi:"options"`
	Owner   Owner        `pulumi:"owner"`
	Plan    RedisPlan    `pulumi:"plan"`
	// Defaults to "oregon"
	Region RedisRegion `pulumi:"region"`
	Status RedisStatus `pulumi:"status"`
	// The last updated time of the Redis instance
	UpdatedAt string `pulumi:"updatedAt"`
	// The version of Redis
	Version string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for RedisType
func (val *RedisType) Defaults() *RedisType {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Region) {
		tmp.Region = RedisRegion("oregon")
	}
	return &tmp
}

// A Redis instance
type RedisTypeOutput struct{ *pulumi.OutputState }

func (RedisTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisType)(nil)).Elem()
}

func (o RedisTypeOutput) ToRedisTypeOutput() RedisTypeOutput {
	return o
}

func (o RedisTypeOutput) ToRedisTypeOutputWithContext(ctx context.Context) RedisTypeOutput {
	return o
}

// The creation time of the Redis instance
func (o RedisTypeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The URL to view the Redis instance in the Render Dashboard
func (o RedisTypeOutput) DashboardUrl() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.DashboardUrl }).(pulumi.StringOutput)
}

// The ID of the environment the Redis instance is associated with
func (o RedisTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// The ID of the Redis instance
func (o RedisTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Id }).(pulumi.StringOutput)
}

// The IP allow list for the Redis instance
func (o RedisTypeOutput) IpAllowList() CidrBlockAndDescriptionArrayOutput {
	return o.ApplyT(func(v RedisType) []CidrBlockAndDescription { return v.IpAllowList }).(CidrBlockAndDescriptionArrayOutput)
}

// The name of the Redis instance
func (o RedisTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Name }).(pulumi.StringOutput)
}

// Options for a Redis instance
func (o RedisTypeOutput) Options() RedisOptionsOutput {
	return o.ApplyT(func(v RedisType) RedisOptions { return v.Options }).(RedisOptionsOutput)
}

func (o RedisTypeOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v RedisType) Owner { return v.Owner }).(OwnerOutput)
}

func (o RedisTypeOutput) Plan() RedisPlanOutput {
	return o.ApplyT(func(v RedisType) RedisPlan { return v.Plan }).(RedisPlanOutput)
}

// Defaults to "oregon"
func (o RedisTypeOutput) Region() RedisRegionOutput {
	return o.ApplyT(func(v RedisType) RedisRegion { return v.Region }).(RedisRegionOutput)
}

func (o RedisTypeOutput) Status() RedisStatusOutput {
	return o.ApplyT(func(v RedisType) RedisStatus { return v.Status }).(RedisStatusOutput)
}

// The last updated time of the Redis instance
func (o RedisTypeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The version of Redis
func (o RedisTypeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v RedisType) string { return v.Version }).(pulumi.StringOutput)
}

// A Redis instance
type RedisConnectionInfo struct {
	// The connection string to use from outside Render
	ExternalConnectionString string `pulumi:"externalConnectionString"`
	// The connection string to use from within Render
	InternalConnectionString string `pulumi:"internalConnectionString"`
	// The Redis CLI command to connect to the Redis instance
	RedisCLICommand string `pulumi:"redisCLICommand"`
}

// A Redis instance
type RedisDetail struct {
	// The creation time of the Redis instance
	CreatedAt string `pulumi:"createdAt"`
	// The ID of the environment the Redis instance is associated with
	EnvironmentId *string `pulumi:"environmentId"`
	// The ID of the Redis instance
	Id string `pulumi:"id"`
	// The IP allow list for the Redis instance
	IpAllowList []CidrBlockAndDescription         `pulumi:"ipAllowList"`
	Maintenance *RedisDetailMaintenanceProperties `pulumi:"maintenance"`
	// The name of the Redis instance
	Name string `pulumi:"name"`
	// Options for a Redis instance
	Options RedisOptions    `pulumi:"options"`
	Owner   Owner           `pulumi:"owner"`
	Plan    RedisDetailPlan `pulumi:"plan"`
	// Defaults to "oregon"
	Region RedisDetailRegion `pulumi:"region"`
	Status RedisDetailStatus `pulumi:"status"`
	// The last updated time of the Redis instance
	UpdatedAt string `pulumi:"updatedAt"`
	// The version of Redis
	Version string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for RedisDetail
func (val *RedisDetail) Defaults() *RedisDetail {
	if val == nil {
		return nil
	}
	tmp := *val
	if internal.IsZero(tmp.Region) {
		tmp.Region = RedisDetailRegion("oregon")
	}
	return &tmp
}

type RedisDetailMaintenanceProperties struct {
	Id string `pulumi:"id"`
	// If present, the maintenance run cannot be scheduled for later than this date-time.
	PendingMaintenanceBy *string                               `pulumi:"pendingMaintenanceBy"`
	ScheduledAt          string                                `pulumi:"scheduledAt"`
	State                RedisDetailMaintenancePropertiesState `pulumi:"state"`
	Type                 string                                `pulumi:"type"`
}

type RedisDetailMaintenancePropertiesOutput struct{ *pulumi.OutputState }

func (RedisDetailMaintenancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisDetailMaintenanceProperties)(nil)).Elem()
}

func (o RedisDetailMaintenancePropertiesOutput) ToRedisDetailMaintenancePropertiesOutput() RedisDetailMaintenancePropertiesOutput {
	return o
}

func (o RedisDetailMaintenancePropertiesOutput) ToRedisDetailMaintenancePropertiesOutputWithContext(ctx context.Context) RedisDetailMaintenancePropertiesOutput {
	return o
}

func (o RedisDetailMaintenancePropertiesOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailMaintenanceProperties) string { return v.Id }).(pulumi.StringOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o RedisDetailMaintenancePropertiesOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisDetailMaintenanceProperties) *string { return v.PendingMaintenanceBy }).(pulumi.StringPtrOutput)
}

func (o RedisDetailMaintenancePropertiesOutput) ScheduledAt() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailMaintenanceProperties) string { return v.ScheduledAt }).(pulumi.StringOutput)
}

func (o RedisDetailMaintenancePropertiesOutput) State() RedisDetailMaintenancePropertiesStateOutput {
	return o.ApplyT(func(v RedisDetailMaintenanceProperties) RedisDetailMaintenancePropertiesState { return v.State }).(RedisDetailMaintenancePropertiesStateOutput)
}

func (o RedisDetailMaintenancePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RedisDetailMaintenanceProperties) string { return v.Type }).(pulumi.StringOutput)
}

type RedisDetailMaintenancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (RedisDetailMaintenancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedisDetailMaintenanceProperties)(nil)).Elem()
}

func (o RedisDetailMaintenancePropertiesPtrOutput) ToRedisDetailMaintenancePropertiesPtrOutput() RedisDetailMaintenancePropertiesPtrOutput {
	return o
}

func (o RedisDetailMaintenancePropertiesPtrOutput) ToRedisDetailMaintenancePropertiesPtrOutputWithContext(ctx context.Context) RedisDetailMaintenancePropertiesPtrOutput {
	return o
}

func (o RedisDetailMaintenancePropertiesPtrOutput) Elem() RedisDetailMaintenancePropertiesOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) RedisDetailMaintenanceProperties {
		if v != nil {
			return *v
		}
		var ret RedisDetailMaintenanceProperties
		return ret
	}).(RedisDetailMaintenancePropertiesOutput)
}

func (o RedisDetailMaintenancePropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// If present, the maintenance run cannot be scheduled for later than this date-time.
func (o RedisDetailMaintenancePropertiesPtrOutput) PendingMaintenanceBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PendingMaintenanceBy
	}).(pulumi.StringPtrOutput)
}

func (o RedisDetailMaintenancePropertiesPtrOutput) ScheduledAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduledAt
	}).(pulumi.StringPtrOutput)
}

func (o RedisDetailMaintenancePropertiesPtrOutput) State() RedisDetailMaintenancePropertiesStatePtrOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) *RedisDetailMaintenancePropertiesState {
		if v == nil {
			return nil
		}
		return &v.State
	}).(RedisDetailMaintenancePropertiesStatePtrOutput)
}

func (o RedisDetailMaintenancePropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RedisDetailMaintenanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Options for a Redis instance
type RedisOptions struct {
	MaxmemoryPolicy *string `pulumi:"maxmemoryPolicy"`
}

// Options for a Redis instance
type RedisOptionsOutput struct{ *pulumi.OutputState }

func (RedisOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisOptions)(nil)).Elem()
}

func (o RedisOptionsOutput) ToRedisOptionsOutput() RedisOptionsOutput {
	return o
}

func (o RedisOptionsOutput) ToRedisOptionsOutputWithContext(ctx context.Context) RedisOptionsOutput {
	return o
}

func (o RedisOptionsOutput) MaxmemoryPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RedisOptions) *string { return v.MaxmemoryPolicy }).(pulumi.StringPtrOutput)
}

type RedisWithCursor struct {
	Cursor string `pulumi:"cursor"`
	// A Redis instance
	Redis RedisType `pulumi:"redis"`
}

// Defaults sets the appropriate defaults for RedisWithCursor
func (val *RedisWithCursor) Defaults() *RedisWithCursor {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Redis = *tmp.Redis.Defaults()

	return &tmp
}

type RedisWithCursorOutput struct{ *pulumi.OutputState }

func (RedisWithCursorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedisWithCursor)(nil)).Elem()
}

func (o RedisWithCursorOutput) ToRedisWithCursorOutput() RedisWithCursorOutput {
	return o
}

func (o RedisWithCursorOutput) ToRedisWithCursorOutputWithContext(ctx context.Context) RedisWithCursorOutput {
	return o
}

func (o RedisWithCursorOutput) Cursor() pulumi.StringOutput {
	return o.ApplyT(func(v RedisWithCursor) string { return v.Cursor }).(pulumi.StringOutput)
}

// A Redis instance
func (o RedisWithCursorOutput) Redis() RedisTypeOutput {
	return o.ApplyT(func(v RedisWithCursor) RedisType { return v.Redis }).(RedisTypeOutput)
}

type RedisWithCursorArrayOutput struct{ *pulumi.OutputState }

func (RedisWithCursorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedisWithCursor)(nil)).Elem()
}

func (o RedisWithCursorArrayOutput) ToRedisWithCursorArrayOutput() RedisWithCursorArrayOutput {
	return o
}

func (o RedisWithCursorArrayOutput) ToRedisWithCursorArrayOutputWithContext(ctx context.Context) RedisWithCursorArrayOutput {
	return o
}

func (o RedisWithCursorArrayOutput) Index(i pulumi.IntInput) RedisWithCursorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedisWithCursor {
		return vs[0].([]RedisWithCursor)[vs[1].(int)]
	}).(RedisWithCursorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAndDescriptionInput)(nil)).Elem(), CidrBlockAndDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAndDescriptionArrayInput)(nil)).Elem(), CidrBlockAndDescriptionArray{})
	pulumi.RegisterOutputType(CidrBlockAndDescriptionOutput{})
	pulumi.RegisterOutputType(CidrBlockAndDescriptionArrayOutput{})
	pulumi.RegisterOutputType(MaintenancePropertiesOutput{})
	pulumi.RegisterOutputType(MaintenancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(OwnerOutput{})
	pulumi.RegisterOutputType(RedisTypeOutput{})
	pulumi.RegisterOutputType(RedisDetailMaintenancePropertiesOutput{})
	pulumi.RegisterOutputType(RedisDetailMaintenancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(RedisOptionsOutput{})
	pulumi.RegisterOutputType(RedisWithCursorOutput{})
	pulumi.RegisterOutputType(RedisWithCursorArrayOutput{})
}
