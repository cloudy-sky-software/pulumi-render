// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package disks

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestoreSnapshot struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
	InstanceId  pulumi.StringPtrOutput `pulumi:"instanceId"`
	MountPath   pulumi.StringOutput    `pulumi:"mountPath"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ServiceId   pulumi.StringPtrOutput `pulumi:"serviceId"`
	SizeGB      pulumi.IntOutput       `pulumi:"sizeGB"`
	SnapshotKey pulumi.StringOutput    `pulumi:"snapshotKey"`
	UpdatedAt   pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewRestoreSnapshot registers a new resource with the given unique name, arguments, and options.
func NewRestoreSnapshot(ctx *pulumi.Context,
	name string, args *RestoreSnapshotArgs, opts ...pulumi.ResourceOption) (*RestoreSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SnapshotKey == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestoreSnapshot
	err := ctx.RegisterResource("render:disks:RestoreSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestoreSnapshot gets an existing RestoreSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestoreSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestoreSnapshotState, opts ...pulumi.ResourceOption) (*RestoreSnapshot, error) {
	var resource RestoreSnapshot
	err := ctx.ReadResource("render:disks:RestoreSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestoreSnapshot resources.
type restoreSnapshotState struct {
}

type RestoreSnapshotState struct {
}

func (RestoreSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreSnapshotState)(nil)).Elem()
}

type restoreSnapshotArgs struct {
	// The ID of the disk
	DiskId *string `pulumi:"diskId"`
	// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
	InstanceId  *string `pulumi:"instanceId"`
	SnapshotKey string  `pulumi:"snapshotKey"`
}

// The set of arguments for constructing a RestoreSnapshot resource.
type RestoreSnapshotArgs struct {
	// The ID of the disk
	DiskId pulumi.StringPtrInput
	// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
	InstanceId  pulumi.StringPtrInput
	SnapshotKey pulumi.StringInput
}

func (RestoreSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restoreSnapshotArgs)(nil)).Elem()
}

type RestoreSnapshotInput interface {
	pulumi.Input

	ToRestoreSnapshotOutput() RestoreSnapshotOutput
	ToRestoreSnapshotOutputWithContext(ctx context.Context) RestoreSnapshotOutput
}

func (*RestoreSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSnapshot)(nil)).Elem()
}

func (i *RestoreSnapshot) ToRestoreSnapshotOutput() RestoreSnapshotOutput {
	return i.ToRestoreSnapshotOutputWithContext(context.Background())
}

func (i *RestoreSnapshot) ToRestoreSnapshotOutputWithContext(ctx context.Context) RestoreSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestoreSnapshotOutput)
}

type RestoreSnapshotOutput struct{ *pulumi.OutputState }

func (RestoreSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestoreSnapshot)(nil)).Elem()
}

func (o RestoreSnapshotOutput) ToRestoreSnapshotOutput() RestoreSnapshotOutput {
	return o
}

func (o RestoreSnapshotOutput) ToRestoreSnapshotOutputWithContext(ctx context.Context) RestoreSnapshotOutput {
	return o
}

func (o RestoreSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately.
func (o RestoreSnapshotOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o RestoreSnapshotOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringOutput { return v.MountPath }).(pulumi.StringOutput)
}

func (o RestoreSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RestoreSnapshotOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

func (o RestoreSnapshotOutput) SizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.IntOutput { return v.SizeGB }).(pulumi.IntOutput)
}

func (o RestoreSnapshotOutput) SnapshotKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringOutput { return v.SnapshotKey }).(pulumi.StringOutput)
}

func (o RestoreSnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RestoreSnapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestoreSnapshotInput)(nil)).Elem(), &RestoreSnapshot{})
	pulumi.RegisterOutputType(RestoreSnapshotOutput{})
}
