// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.RegistryCredentials
{
    /// <summary>
    /// The registry to use this credential with
    /// </summary>
    [EnumType]
    public readonly struct Registry : IEquatable<Registry>
    {
        private readonly string _value;

        private Registry(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Registry Github { get; } = new Registry("GITHUB");
        public static Registry Gitlab { get; } = new Registry("GITLAB");
        public static Registry Docker { get; } = new Registry("DOCKER");
        public static Registry GoogleArtifact { get; } = new Registry("GOOGLE_ARTIFACT");
        public static Registry AwsEcr { get; } = new Registry("AWS_ECR");

        public static bool operator ==(Registry left, Registry right) => left.Equals(right);
        public static bool operator !=(Registry left, Registry right) => !left.Equals(right);

        public static explicit operator string(Registry value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Registry other && Equals(other);
        public bool Equals(Registry other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The registry to use this credential with
    /// </summary>
    [EnumType]
    public readonly struct RegistryCredentialRegistry : IEquatable<RegistryCredentialRegistry>
    {
        private readonly string _value;

        private RegistryCredentialRegistry(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RegistryCredentialRegistry Github { get; } = new RegistryCredentialRegistry("GITHUB");
        public static RegistryCredentialRegistry Gitlab { get; } = new RegistryCredentialRegistry("GITLAB");
        public static RegistryCredentialRegistry Docker { get; } = new RegistryCredentialRegistry("DOCKER");
        public static RegistryCredentialRegistry GoogleArtifact { get; } = new RegistryCredentialRegistry("GOOGLE_ARTIFACT");
        public static RegistryCredentialRegistry AwsEcr { get; } = new RegistryCredentialRegistry("AWS_ECR");

        public static bool operator ==(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => left.Equals(right);
        public static bool operator !=(RegistryCredentialRegistry left, RegistryCredentialRegistry right) => !left.Equals(right);

        public static explicit operator string(RegistryCredentialRegistry value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RegistryCredentialRegistry other && Equals(other);
        public bool Equals(RegistryCredentialRegistry other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
