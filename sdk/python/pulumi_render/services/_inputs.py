# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AutoscalingConfigArgs',
    'AutoscalingCriteriaPercentageArgs',
    'AutoscalingCriteriaArgs',
    'BackgroundWorkerDetailsArgs',
    'BuildFilterArgs',
    'CronJobDetailsArgs',
    'DiskArgs',
    'DockerDetailsArgs',
    'EnvVarKeyGenerateValueArgs',
    'EnvVarKeyValueArgs',
    'ImageArgs',
    'NativeEnvironmentDetailsArgs',
    'PrivateServiceDetailsArgs',
    'RegistryCredentialArgs',
    'ResourceArgs',
    'SecretFileArgs',
    'ServerPortArgs',
    'StaticSiteDetailsArgs',
    'WebServiceDetailsArgs',
]

@pulumi.input_type
class AutoscalingConfigArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input['AutoscalingCriteriaArgs'],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: The maximum number of instances for the service
        :param pulumi.Input[int] min: The minimum number of instances for the service
        """
        pulumi.set(__self__, "criteria", criteria)
        if enabled is None:
            enabled = False
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['AutoscalingCriteriaArgs']:
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['AutoscalingCriteriaArgs']):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        The maximum number of instances for the service
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        The minimum number of instances for the service
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class AutoscalingCriteriaPercentageArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 percentage: pulumi.Input[int]):
        """
        :param pulumi.Input[int] percentage: Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
        """
        if enabled is None:
            enabled = False
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[int]:
        """
        Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class AutoscalingCriteriaArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input['AutoscalingCriteriaPercentageArgs'],
                 memory: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input['AutoscalingCriteriaPercentageArgs']:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input['AutoscalingCriteriaPercentageArgs']:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input['AutoscalingCriteriaPercentageArgs']):
        pulumi.set(self, "memory", value)


@pulumi.input_type
class BackgroundWorkerDetailsArgs:
    def __init__(__self__, *,
                 build_plan: pulumi.Input[str],
                 env: pulumi.Input['BackgroundWorkerDetailsEnv'],
                 env_specific_details: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']],
                 num_instances: pulumi.Input[int],
                 plan: pulumi.Input['BackgroundWorkerDetailsPlan'],
                 pull_request_previews_enabled: pulumi.Input['BackgroundWorkerDetailsPullRequestPreviewsEnabled'],
                 region: pulumi.Input['BackgroundWorkerDetailsRegion'],
                 autoscaling: Optional[pulumi.Input['AutoscalingConfigArgs']] = None,
                 disk: Optional[pulumi.Input['DiskArgs']] = None,
                 parent_server: Optional[pulumi.Input['ResourceArgs']] = None):
        """
        :param pulumi.Input['BackgroundWorkerDetailsEnv'] env: Environment (runtime)
        :param pulumi.Input[int] num_instances: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        :param pulumi.Input['BackgroundWorkerDetailsPlan'] plan: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        pulumi.set(__self__, "build_plan", build_plan)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "env_specific_details", env_specific_details)
        pulumi.set(__self__, "num_instances", num_instances)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "pull_request_previews_enabled", pull_request_previews_enabled)
        pulumi.set(__self__, "region", region)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if parent_server is not None:
            pulumi.set(__self__, "parent_server", parent_server)

    @property
    @pulumi.getter(name="buildPlan")
    def build_plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_plan")

    @build_plan.setter
    def build_plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_plan", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input['BackgroundWorkerDetailsEnv']:
        """
        Environment (runtime)
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input['BackgroundWorkerDetailsEnv']):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSpecificDetails")
    def env_specific_details(self) -> pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]:
        return pulumi.get(self, "env_specific_details")

    @env_specific_details.setter
    def env_specific_details(self, value: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]):
        pulumi.set(self, "env_specific_details", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input['BackgroundWorkerDetailsPlan']:
        """
        The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input['BackgroundWorkerDetailsPlan']):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="pullRequestPreviewsEnabled")
    def pull_request_previews_enabled(self) -> pulumi.Input['BackgroundWorkerDetailsPullRequestPreviewsEnabled']:
        return pulumi.get(self, "pull_request_previews_enabled")

    @pull_request_previews_enabled.setter
    def pull_request_previews_enabled(self, value: pulumi.Input['BackgroundWorkerDetailsPullRequestPreviewsEnabled']):
        pulumi.set(self, "pull_request_previews_enabled", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input['BackgroundWorkerDetailsRegion']:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input['BackgroundWorkerDetailsRegion']):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['AutoscalingConfigArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['AutoscalingConfigArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['DiskArgs']]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['DiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="parentServer")
    def parent_server(self) -> Optional[pulumi.Input['ResourceArgs']]:
        return pulumi.get(self, "parent_server")

    @parent_server.setter
    def parent_server(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "parent_server", value)


@pulumi.input_type
class BuildFilterArgs:
    def __init__(__self__, *,
                 ignored_paths: pulumi.Input[Sequence[pulumi.Input[str]]],
                 paths: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "ignored_paths", ignored_paths)
        pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter(name="ignoredPaths")
    def ignored_paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "ignored_paths")

    @ignored_paths.setter
    def ignored_paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ignored_paths", value)

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class CronJobDetailsArgs:
    def __init__(__self__, *,
                 build_plan: pulumi.Input[str],
                 env: pulumi.Input['CronJobDetailsEnv'],
                 env_specific_details: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']],
                 plan: pulumi.Input['CronJobDetailsPlan'],
                 region: pulumi.Input['CronJobDetailsRegion'],
                 schedule: pulumi.Input[str],
                 last_successful_run_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['CronJobDetailsEnv'] env: Environment (runtime)
        :param pulumi.Input['CronJobDetailsPlan'] plan: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        pulumi.set(__self__, "build_plan", build_plan)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "env_specific_details", env_specific_details)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "schedule", schedule)
        if last_successful_run_at is not None:
            pulumi.set(__self__, "last_successful_run_at", last_successful_run_at)

    @property
    @pulumi.getter(name="buildPlan")
    def build_plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_plan")

    @build_plan.setter
    def build_plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_plan", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input['CronJobDetailsEnv']:
        """
        Environment (runtime)
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input['CronJobDetailsEnv']):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSpecificDetails")
    def env_specific_details(self) -> pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]:
        return pulumi.get(self, "env_specific_details")

    @env_specific_details.setter
    def env_specific_details(self, value: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]):
        pulumi.set(self, "env_specific_details", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input['CronJobDetailsPlan']:
        """
        The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input['CronJobDetailsPlan']):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input['CronJobDetailsRegion']:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input['CronJobDetailsRegion']):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="lastSuccessfulRunAt")
    def last_successful_run_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_successful_run_at")

    @last_successful_run_at.setter
    def last_successful_run_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_successful_run_at", value)


@pulumi.input_type
class DiskArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 name: pulumi.Input[str],
                 size_gb: pulumi.Input[int]):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size_gb", size_gb)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sizeGB")
    def size_gb(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_gb")

    @size_gb.setter
    def size_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_gb", value)


@pulumi.input_type
class DockerDetailsArgs:
    def __init__(__self__, *,
                 docker_command: pulumi.Input[str],
                 docker_context: pulumi.Input[str],
                 dockerfile_path: pulumi.Input[str],
                 pre_deploy_command: Optional[pulumi.Input[str]] = None,
                 registry_credential: Optional[pulumi.Input['RegistryCredentialArgs']] = None):
        pulumi.set(__self__, "docker_command", docker_command)
        pulumi.set(__self__, "docker_context", docker_context)
        pulumi.set(__self__, "dockerfile_path", dockerfile_path)
        if pre_deploy_command is not None:
            pulumi.set(__self__, "pre_deploy_command", pre_deploy_command)
        if registry_credential is not None:
            pulumi.set(__self__, "registry_credential", registry_credential)

    @property
    @pulumi.getter(name="dockerCommand")
    def docker_command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_command")

    @docker_command.setter
    def docker_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_command", value)

    @property
    @pulumi.getter(name="dockerContext")
    def docker_context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_context")

    @docker_context.setter
    def docker_context(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_context", value)

    @property
    @pulumi.getter(name="dockerfilePath")
    def dockerfile_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dockerfile_path")

    @dockerfile_path.setter
    def dockerfile_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "dockerfile_path", value)

    @property
    @pulumi.getter(name="preDeployCommand")
    def pre_deploy_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_deploy_command")

    @pre_deploy_command.setter
    def pre_deploy_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_deploy_command", value)

    @property
    @pulumi.getter(name="registryCredential")
    def registry_credential(self) -> Optional[pulumi.Input['RegistryCredentialArgs']]:
        return pulumi.get(self, "registry_credential")

    @registry_credential.setter
    def registry_credential(self, value: Optional[pulumi.Input['RegistryCredentialArgs']]):
        pulumi.set(self, "registry_credential", value)


@pulumi.input_type
class EnvVarKeyGenerateValueArgs:
    def __init__(__self__, *,
                 generate_value: pulumi.Input[bool],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "generate_value", generate_value)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="generateValue")
    def generate_value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "generate_value")

    @generate_value.setter
    def generate_value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "generate_value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class EnvVarKeyValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 image_path: pulumi.Input[str],
                 owner_id: pulumi.Input[str],
                 registry_credential_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image_path: Path to the image used for this server (e.g docker.io/library/nginx:latest).
        :param pulumi.Input[str] owner_id: The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
        :param pulumi.Input[str] registry_credential_id: Optional reference to the registry credential passed to the image repository to retrieve this image.
        """
        pulumi.set(__self__, "image_path", image_path)
        pulumi.set(__self__, "owner_id", owner_id)
        if registry_credential_id is not None:
            pulumi.set(__self__, "registry_credential_id", registry_credential_id)

    @property
    @pulumi.getter(name="imagePath")
    def image_path(self) -> pulumi.Input[str]:
        """
        Path to the image used for this server (e.g docker.io/library/nginx:latest).
        """
        return pulumi.get(self, "image_path")

    @image_path.setter
    def image_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_path", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Input[str]:
        """
        The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter(name="registryCredentialId")
    def registry_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional reference to the registry credential passed to the image repository to retrieve this image.
        """
        return pulumi.get(self, "registry_credential_id")

    @registry_credential_id.setter
    def registry_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_credential_id", value)


@pulumi.input_type
class NativeEnvironmentDetailsArgs:
    def __init__(__self__, *,
                 build_command: pulumi.Input[str],
                 start_command: pulumi.Input[str],
                 pre_deploy_command: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "build_command", build_command)
        pulumi.set(__self__, "start_command", start_command)
        if pre_deploy_command is not None:
            pulumi.set(__self__, "pre_deploy_command", pre_deploy_command)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter(name="startCommand")
    def start_command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_command")

    @start_command.setter
    def start_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_command", value)

    @property
    @pulumi.getter(name="preDeployCommand")
    def pre_deploy_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_deploy_command")

    @pre_deploy_command.setter
    def pre_deploy_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_deploy_command", value)


@pulumi.input_type
class PrivateServiceDetailsArgs:
    def __init__(__self__, *,
                 build_plan: pulumi.Input[str],
                 env: pulumi.Input['PrivateServiceDetailsEnv'],
                 env_specific_details: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']],
                 num_instances: pulumi.Input[int],
                 open_ports: pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]],
                 plan: pulumi.Input['PrivateServiceDetailsPlan'],
                 pull_request_previews_enabled: pulumi.Input['PrivateServiceDetailsPullRequestPreviewsEnabled'],
                 region: pulumi.Input['PrivateServiceDetailsRegion'],
                 url: pulumi.Input[str],
                 autoscaling: Optional[pulumi.Input['AutoscalingConfigArgs']] = None,
                 disk: Optional[pulumi.Input['DiskArgs']] = None,
                 parent_server: Optional[pulumi.Input['ResourceArgs']] = None):
        """
        :param pulumi.Input['PrivateServiceDetailsEnv'] env: Environment (runtime)
        :param pulumi.Input[int] num_instances: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        :param pulumi.Input['PrivateServiceDetailsPlan'] plan: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        pulumi.set(__self__, "build_plan", build_plan)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "env_specific_details", env_specific_details)
        pulumi.set(__self__, "num_instances", num_instances)
        pulumi.set(__self__, "open_ports", open_ports)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "pull_request_previews_enabled", pull_request_previews_enabled)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "url", url)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if parent_server is not None:
            pulumi.set(__self__, "parent_server", parent_server)

    @property
    @pulumi.getter(name="buildPlan")
    def build_plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_plan")

    @build_plan.setter
    def build_plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_plan", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input['PrivateServiceDetailsEnv']:
        """
        Environment (runtime)
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input['PrivateServiceDetailsEnv']):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSpecificDetails")
    def env_specific_details(self) -> pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]:
        return pulumi.get(self, "env_specific_details")

    @env_specific_details.setter
    def env_specific_details(self, value: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]):
        pulumi.set(self, "env_specific_details", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]]:
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input['PrivateServiceDetailsPlan']:
        """
        The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input['PrivateServiceDetailsPlan']):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="pullRequestPreviewsEnabled")
    def pull_request_previews_enabled(self) -> pulumi.Input['PrivateServiceDetailsPullRequestPreviewsEnabled']:
        return pulumi.get(self, "pull_request_previews_enabled")

    @pull_request_previews_enabled.setter
    def pull_request_previews_enabled(self, value: pulumi.Input['PrivateServiceDetailsPullRequestPreviewsEnabled']):
        pulumi.set(self, "pull_request_previews_enabled", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input['PrivateServiceDetailsRegion']:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input['PrivateServiceDetailsRegion']):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['AutoscalingConfigArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['AutoscalingConfigArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['DiskArgs']]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['DiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="parentServer")
    def parent_server(self) -> Optional[pulumi.Input['ResourceArgs']]:
        return pulumi.get(self, "parent_server")

    @parent_server.setter
    def parent_server(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "parent_server", value)


@pulumi.input_type
class RegistryCredentialArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 registry: pulumi.Input['RegistryCredentialRegistry'],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Descriptive name for this credential
        :param pulumi.Input['RegistryCredentialRegistry'] registry: The registry to use this credential with
        :param pulumi.Input[str] username: The username associated with the credential
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Descriptive name for this credential
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Input['RegistryCredentialRegistry']:
        """
        The registry to use this credential with
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: pulumi.Input['RegistryCredentialRegistry']):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username associated with the credential
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecretFileArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServerPortArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input['ServerPortProtocol']):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input['ServerPortProtocol']:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input['ServerPortProtocol']):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class StaticSiteDetailsArgs:
    def __init__(__self__, *,
                 build_command: pulumi.Input[str],
                 build_plan: pulumi.Input[str],
                 publish_path: pulumi.Input[str],
                 pull_request_previews_enabled: pulumi.Input['StaticSiteDetailsPullRequestPreviewsEnabled'],
                 url: pulumi.Input[str],
                 parent_server: Optional[pulumi.Input['ResourceArgs']] = None):
        pulumi.set(__self__, "build_command", build_command)
        pulumi.set(__self__, "build_plan", build_plan)
        pulumi.set(__self__, "publish_path", publish_path)
        pulumi.set(__self__, "pull_request_previews_enabled", pull_request_previews_enabled)
        pulumi.set(__self__, "url", url)
        if parent_server is not None:
            pulumi.set(__self__, "parent_server", parent_server)

    @property
    @pulumi.getter(name="buildCommand")
    def build_command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_command")

    @build_command.setter
    def build_command(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_command", value)

    @property
    @pulumi.getter(name="buildPlan")
    def build_plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_plan")

    @build_plan.setter
    def build_plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_plan", value)

    @property
    @pulumi.getter(name="publishPath")
    def publish_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publish_path")

    @publish_path.setter
    def publish_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "publish_path", value)

    @property
    @pulumi.getter(name="pullRequestPreviewsEnabled")
    def pull_request_previews_enabled(self) -> pulumi.Input['StaticSiteDetailsPullRequestPreviewsEnabled']:
        return pulumi.get(self, "pull_request_previews_enabled")

    @pull_request_previews_enabled.setter
    def pull_request_previews_enabled(self, value: pulumi.Input['StaticSiteDetailsPullRequestPreviewsEnabled']):
        pulumi.set(self, "pull_request_previews_enabled", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="parentServer")
    def parent_server(self) -> Optional[pulumi.Input['ResourceArgs']]:
        return pulumi.get(self, "parent_server")

    @parent_server.setter
    def parent_server(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "parent_server", value)


@pulumi.input_type
class WebServiceDetailsArgs:
    def __init__(__self__, *,
                 build_plan: pulumi.Input[str],
                 env: pulumi.Input['WebServiceDetailsEnv'],
                 env_specific_details: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']],
                 health_check_path: pulumi.Input[str],
                 num_instances: pulumi.Input[int],
                 open_ports: pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]],
                 plan: pulumi.Input['WebServiceDetailsPlan'],
                 pull_request_previews_enabled: pulumi.Input['WebServiceDetailsPullRequestPreviewsEnabled'],
                 region: pulumi.Input['WebServiceDetailsRegion'],
                 url: pulumi.Input[str],
                 autoscaling: Optional[pulumi.Input['AutoscalingConfigArgs']] = None,
                 disk: Optional[pulumi.Input['DiskArgs']] = None,
                 parent_server: Optional[pulumi.Input['ResourceArgs']] = None):
        """
        :param pulumi.Input['WebServiceDetailsEnv'] env: Environment (runtime)
        :param pulumi.Input[int] num_instances: For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        :param pulumi.Input['WebServiceDetailsPlan'] plan: The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        pulumi.set(__self__, "build_plan", build_plan)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "env_specific_details", env_specific_details)
        pulumi.set(__self__, "health_check_path", health_check_path)
        pulumi.set(__self__, "num_instances", num_instances)
        pulumi.set(__self__, "open_ports", open_ports)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "pull_request_previews_enabled", pull_request_previews_enabled)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "url", url)
        if autoscaling is not None:
            pulumi.set(__self__, "autoscaling", autoscaling)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if parent_server is not None:
            pulumi.set(__self__, "parent_server", parent_server)

    @property
    @pulumi.getter(name="buildPlan")
    def build_plan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "build_plan")

    @build_plan.setter
    def build_plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "build_plan", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input['WebServiceDetailsEnv']:
        """
        Environment (runtime)
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input['WebServiceDetailsEnv']):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter(name="envSpecificDetails")
    def env_specific_details(self) -> pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]:
        return pulumi.get(self, "env_specific_details")

    @env_specific_details.setter
    def env_specific_details(self, value: pulumi.Input[Union['DockerDetailsArgs', 'NativeEnvironmentDetailsArgs']]):
        pulumi.set(self, "env_specific_details", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="numInstances")
    def num_instances(self) -> pulumi.Input[int]:
        """
        For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        """
        return pulumi.get(self, "num_instances")

    @num_instances.setter
    def num_instances(self, value: pulumi.Input[int]):
        pulumi.set(self, "num_instances", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]]:
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: pulumi.Input[Sequence[pulumi.Input['ServerPortArgs']]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input['WebServiceDetailsPlan']:
        """
        The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input['WebServiceDetailsPlan']):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="pullRequestPreviewsEnabled")
    def pull_request_previews_enabled(self) -> pulumi.Input['WebServiceDetailsPullRequestPreviewsEnabled']:
        return pulumi.get(self, "pull_request_previews_enabled")

    @pull_request_previews_enabled.setter
    def pull_request_previews_enabled(self, value: pulumi.Input['WebServiceDetailsPullRequestPreviewsEnabled']):
        pulumi.set(self, "pull_request_previews_enabled", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input['WebServiceDetailsRegion']:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input['WebServiceDetailsRegion']):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['AutoscalingConfigArgs']]:
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['AutoscalingConfigArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['DiskArgs']]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['DiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="parentServer")
    def parent_server(self) -> Optional[pulumi.Input['ResourceArgs']]:
        return pulumi.get(self, "parent_server")

    @parent_server.setter
    def parent_server(self, value: Optional[pulumi.Input['ResourceArgs']]):
        pulumi.set(self, "parent_server", value)


