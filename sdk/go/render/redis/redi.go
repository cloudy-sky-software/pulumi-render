// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Input type for creating a Redis instance
type Redi struct {
	pulumi.CustomResourceState

	// The creation time of the Redis instance
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the environment the Redis instance is associated with
	EnvironmentId pulumi.StringPtrOutput `pulumi:"environmentId"`
	// The IP allow list for the Redis instance
	IpAllowList CidrBlockAndDescriptionArrayOutput `pulumi:"ipAllowList"`
	Maintenance MaintenancePropertiesPtrOutput     `pulumi:"maintenance"`
	// The eviction policy for the Redis instance
	MaxmemoryPolicy MaxmemoryPolicyPtrOutput `pulumi:"maxmemoryPolicy"`
	// The name of the Redis instance
	Name pulumi.StringOutput `pulumi:"name"`
	// Options for a Redis instance
	Options RedisOptionsOutput `pulumi:"options"`
	Owner   OwnerOutput        `pulumi:"owner"`
	// The ID of the owner of the Redis instance
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	Plan    PlanOutput          `pulumi:"plan"`
	// Defaults to "oregon"
	Region RegionOutput `pulumi:"region"`
	Status StatusOutput `pulumi:"status"`
	// The last updated time of the Redis instance
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The version of Redis
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewRedi registers a new resource with the given unique name, arguments, and options.
func NewRedi(ctx *pulumi.Context,
	name string, args *RediArgs, opts ...pulumi.ResourceOption) (*Redi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Redi
	err := ctx.RegisterResource("render:redis:Redi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedi gets an existing Redi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RediState, opts ...pulumi.ResourceOption) (*Redi, error) {
	var resource Redi
	err := ctx.ReadResource("render:redis:Redi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Redi resources.
type rediState struct {
}

type RediState struct {
}

func (RediState) ElementType() reflect.Type {
	return reflect.TypeOf((*rediState)(nil)).Elem()
}

type rediArgs struct {
	EnvironmentId *string                   `pulumi:"environmentId"`
	IpAllowList   []CidrBlockAndDescription `pulumi:"ipAllowList"`
	// The eviction policy for the Redis instance
	MaxmemoryPolicy *MaxmemoryPolicy `pulumi:"maxmemoryPolicy"`
	// The name of the Redis instance
	Name *string `pulumi:"name"`
	// The ID of the owner of the Redis instance
	OwnerId string `pulumi:"ownerId"`
	Plan    Plan   `pulumi:"plan"`
	// The region where the Redis instance is located
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Redi resource.
type RediArgs struct {
	EnvironmentId pulumi.StringPtrInput
	IpAllowList   CidrBlockAndDescriptionArrayInput
	// The eviction policy for the Redis instance
	MaxmemoryPolicy MaxmemoryPolicyPtrInput
	// The name of the Redis instance
	Name pulumi.StringPtrInput
	// The ID of the owner of the Redis instance
	OwnerId pulumi.StringInput
	Plan    PlanInput
	// The region where the Redis instance is located
	Region pulumi.StringPtrInput
}

func (RediArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rediArgs)(nil)).Elem()
}

type RediInput interface {
	pulumi.Input

	ToRediOutput() RediOutput
	ToRediOutputWithContext(ctx context.Context) RediOutput
}

func (*Redi) ElementType() reflect.Type {
	return reflect.TypeOf((**Redi)(nil)).Elem()
}

func (i *Redi) ToRediOutput() RediOutput {
	return i.ToRediOutputWithContext(context.Background())
}

func (i *Redi) ToRediOutputWithContext(ctx context.Context) RediOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RediOutput)
}

type RediOutput struct{ *pulumi.OutputState }

func (RediOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Redi)(nil)).Elem()
}

func (o RediOutput) ToRediOutput() RediOutput {
	return o
}

func (o RediOutput) ToRediOutputWithContext(ctx context.Context) RediOutput {
	return o
}

// The creation time of the Redis instance
func (o RediOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the environment the Redis instance is associated with
func (o RediOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringPtrOutput { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// The IP allow list for the Redis instance
func (o RediOutput) IpAllowList() CidrBlockAndDescriptionArrayOutput {
	return o.ApplyT(func(v *Redi) CidrBlockAndDescriptionArrayOutput { return v.IpAllowList }).(CidrBlockAndDescriptionArrayOutput)
}

func (o RediOutput) Maintenance() MaintenancePropertiesPtrOutput {
	return o.ApplyT(func(v *Redi) MaintenancePropertiesPtrOutput { return v.Maintenance }).(MaintenancePropertiesPtrOutput)
}

// The eviction policy for the Redis instance
func (o RediOutput) MaxmemoryPolicy() MaxmemoryPolicyPtrOutput {
	return o.ApplyT(func(v *Redi) MaxmemoryPolicyPtrOutput { return v.MaxmemoryPolicy }).(MaxmemoryPolicyPtrOutput)
}

// The name of the Redis instance
func (o RediOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Options for a Redis instance
func (o RediOutput) Options() RedisOptionsOutput {
	return o.ApplyT(func(v *Redi) RedisOptionsOutput { return v.Options }).(RedisOptionsOutput)
}

func (o RediOutput) Owner() OwnerOutput {
	return o.ApplyT(func(v *Redi) OwnerOutput { return v.Owner }).(OwnerOutput)
}

// The ID of the owner of the Redis instance
func (o RediOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

func (o RediOutput) Plan() PlanOutput {
	return o.ApplyT(func(v *Redi) PlanOutput { return v.Plan }).(PlanOutput)
}

// Defaults to "oregon"
func (o RediOutput) Region() RegionOutput {
	return o.ApplyT(func(v *Redi) RegionOutput { return v.Region }).(RegionOutput)
}

func (o RediOutput) Status() StatusOutput {
	return o.ApplyT(func(v *Redi) StatusOutput { return v.Status }).(StatusOutput)
}

// The last updated time of the Redis instance
func (o RediOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The version of Redis
func (o RediOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Redi) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RediInput)(nil)).Elem(), &Redi{})
	pulumi.RegisterOutputType(RediOutput{})
}
