// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRedi(ctx *pulumi.Context, args *LookupRediArgs, opts ...pulumi.InvokeOption) (*LookupRediResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRediResult
	err := ctx.Invoke("render:redis:getRedi", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupRediArgs struct {
	RedisId string `pulumi:"redisId"`
}

type LookupRediResult struct {
	Items RedisDetail `pulumi:"items"`
}

// Defaults sets the appropriate defaults for LookupRediResult
func (val *LookupRediResult) Defaults() *LookupRediResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Items = *tmp.Items.Defaults()

	return &tmp
}

func LookupRediOutput(ctx *pulumi.Context, args LookupRediOutputArgs, opts ...pulumi.InvokeOption) LookupRediResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRediResult, error) {
			args := v.(LookupRediArgs)
			r, err := LookupRedi(ctx, &args, opts...)
			var s LookupRediResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRediResultOutput)
}

type LookupRediOutputArgs struct {
	RedisId pulumi.StringInput `pulumi:"redisId"`
}

func (LookupRediOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRediArgs)(nil)).Elem()
}

type LookupRediResultOutput struct{ *pulumi.OutputState }

func (LookupRediResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRediResult)(nil)).Elem()
}

func (o LookupRediResultOutput) ToLookupRediResultOutput() LookupRediResultOutput {
	return o
}

func (o LookupRediResultOutput) ToLookupRediResultOutputWithContext(ctx context.Context) LookupRediResultOutput {
	return o
}

func (o LookupRediResultOutput) Items() RedisDetailOutput {
	return o.ApplyT(func(v LookupRediResult) RedisDetail { return v.Items }).(RedisDetailOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRediResultOutput{})
}
