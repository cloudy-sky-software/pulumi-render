// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services
{
    public static class GetService
    {
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("render:services:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        public static Output<GetServiceResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("render:services:getService", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        public readonly Outputs.Service Items;

        [OutputConstructor]
        private GetServiceResult(Outputs.Service items)
        {
            Items = items;
        }
    }
}
