// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.RegistryCredentials
{
    public static class GetRegistrycredential
    {
        public static Task<GetRegistrycredentialResult> InvokeAsync(GetRegistrycredentialArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistrycredentialResult>("render:registrycredentials:getRegistrycredential", args ?? new GetRegistrycredentialArgs(), options.WithDefaults());

        public static Output<GetRegistrycredentialResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistrycredentialResult>("render:registrycredentials:getRegistrycredential", InvokeArgs.Empty, options.WithDefaults());
    }


    public sealed class GetRegistrycredentialArgs : global::Pulumi.InvokeArgs
    {
        public GetRegistrycredentialArgs()
        {
        }
        public static new GetRegistrycredentialArgs Empty => new GetRegistrycredentialArgs();
    }


    [OutputType]
    public sealed class GetRegistrycredentialResult
    {
        public readonly Outputs.RegistryCredential Items;

        [OutputConstructor]
        private GetRegistrycredentialResult(Outputs.RegistryCredential items)
        {
            Items = items;
        }
    }
}
