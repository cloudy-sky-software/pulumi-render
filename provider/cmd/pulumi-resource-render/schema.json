{
    "name": "render",
    "displayName": "Render",
    "description": "A Pulumi package for creating and managing Render resources.",
    "keywords": [
        "pulumi",
        "render",
        "category/cloud",
        "kind/native"
    ],
    "homepage": "https://cloudysky.software",
    "license": "Apache-2.0",
    "repository": "https://github.com/cloudy-sky-software/pulumi-render",
    "pluginDownloadURL": "github://api.github.com/cloudy-sky-software/pulumi-render",
    "publisher": "Cloudy Sky Software",
    "language": {
        "csharp": {
            "namespaces": {
                "": "Provider",
                "blueprints": "Blueprints",
                "cron-jobs": "CronJobs",
                "disks": "Disks",
                "env-groups": "EnvGroups",
                "environments": "Environments",
                "logs": "Logs",
                "metrics": "Metrics",
                "notification-settings": "NotificationSettings",
                "owners": "Owners",
                "postgres": "Postgres",
                "projects": "Projects",
                "redis": "Redis",
                "registrycredentials": "RegistryCredentials",
                "render": "Render",
                "services": "Services",
                "users": "Users"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumi"
        },
        "go": {
            "importBasePath": "github.com/cloudy-sky-software/pulumi-render/sdk/go/render",
            "moduleToPackage": {
                "cron-jobs": "cronJobs",
                "env-groups": "envGroups",
                "notification-settings": "notificationSettings"
            }
        },
        "nodejs": {
            "packageName": "@cloudyskysoftware/pulumi-render",
            "moduleToPackage": {
                "cron-jobs": "cronjobs",
                "env-groups": "envgroups",
                "notification-settings": "notificationsettings"
            }
        },
        "python": {
            "packageName": "pulumi_render",
            "pyproject": {
                "enabled": true
            },
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The Render API key",
                "language": {
                    "csharp": {
                        "name": "ApiKey"
                    }
                },
                "secret": true
            },
            "clearCacheOnServiceUpdateDeployments": {
                "$ref": "#/types/render:services:ClearCache",
                "description": "When a service is updated, a deployment is automatically triggered. This variable controls whether or not the service cache should be cleared upon deployment.",
                "language": {
                    "csharp": {
                        "name": "ClearCacheOnServiceUpdateDeployments"
                    }
                }
            }
        }
    },
    "types": {
        "render:blueprints:BlueprintWithCursor": {
            "description": "A blueprint with a cursor",
            "properties": {
                "blueprint": {
                    "$ref": "#/types/render:blueprints:BlueprintWithCursorBlueprintProperties"
                },
                "cursor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blueprint",
                "cursor"
            ]
        },
        "render:blueprints:BlueprintWithCursorBlueprintProperties": {
            "properties": {
                "autoSync": {
                    "type": "boolean",
                    "description": "Automatically sync changes to render.yaml"
                },
                "branch": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastSync": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:blueprints:BlueprintWithCursorBlueprintPropertiesStatus"
                }
            },
            "type": "object",
            "required": [
                "autoSync",
                "branch",
                "id",
                "name",
                "repo",
                "status"
            ]
        },
        "render:blueprints:BlueprintWithCursorBlueprintPropertiesStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Created",
                    "value": "created"
                },
                {
                    "name": "Paused",
                    "value": "paused"
                },
                {
                    "name": "InSync",
                    "value": "in_sync"
                },
                {
                    "name": "Syncing",
                    "value": "syncing"
                },
                {
                    "name": "Error",
                    "value": "error"
                }
            ]
        },
        "render:blueprints:GetBlueprintProperties": {
            "properties": {
                "autoSync": {
                    "type": "boolean",
                    "description": "Automatically sync changes to render.yaml"
                },
                "branch": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastSync": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:blueprints:GetBlueprintPropertiesResourcesItemProperties"
                    }
                },
                "status": {
                    "$ref": "#/types/render:blueprints:GetBlueprintPropertiesStatus"
                }
            },
            "type": "object",
            "required": [
                "autoSync",
                "branch",
                "id",
                "name",
                "repo",
                "resources",
                "status"
            ]
        },
        "render:blueprints:GetBlueprintPropertiesResourcesItemProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:blueprints:GetBlueprintPropertiesResourcesItemPropertiesType",
                    "description": "type of the resource (ex. web_service or postgres)"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ]
        },
        "render:blueprints:GetBlueprintPropertiesResourcesItemPropertiesType": {
            "description": "type of the resource (ex. web_service or postgres)",
            "type": "string",
            "enum": [
                {
                    "name": "StaticSite",
                    "value": "static_site"
                },
                {
                    "name": "WebService",
                    "value": "web_service"
                },
                {
                    "name": "PrivateService",
                    "value": "private_service"
                },
                {
                    "name": "BackgroundWorker",
                    "value": "background_worker"
                },
                {
                    "name": "CronJob",
                    "value": "cron_job"
                },
                {
                    "name": "Redis",
                    "value": "redis"
                },
                {
                    "name": "Postgres",
                    "value": "postgres"
                },
                {
                    "name": "EnvironmentGroup",
                    "value": "environment_group"
                }
            ]
        },
        "render:blueprints:GetBlueprintPropertiesStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Created",
                    "value": "created"
                },
                {
                    "name": "Paused",
                    "value": "paused"
                },
                {
                    "name": "InSync",
                    "value": "in_sync"
                },
                {
                    "name": "Syncing",
                    "value": "syncing"
                },
                {
                    "name": "Error",
                    "value": "error"
                }
            ]
        },
        "render:blueprints:SyncWithCursor": {
            "description": "A blueprint sync with a cursor",
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "sync": {
                    "$ref": "#/types/render:blueprints:SyncWithCursorSyncProperties"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "sync"
            ]
        },
        "render:blueprints:SyncWithCursorSyncProperties": {
            "properties": {
                "commit": {
                    "$ref": "#/types/render:blueprints:SyncWithCursorSyncPropertiesCommitProperties"
                },
                "completedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/types/render:blueprints:SyncWithCursorSyncPropertiesState"
                }
            },
            "type": "object",
            "required": [
                "commit",
                "id",
                "state"
            ]
        },
        "render:blueprints:SyncWithCursorSyncPropertiesCommitProperties": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "render:blueprints:SyncWithCursorSyncPropertiesState": {
            "type": "string",
            "enum": [
                {
                    "name": "Created",
                    "value": "created"
                },
                {
                    "name": "Pending",
                    "value": "pending"
                },
                {
                    "name": "Running",
                    "value": "running"
                },
                {
                    "name": "Error",
                    "value": "error"
                },
                {
                    "name": "Success",
                    "value": "success"
                }
            ]
        },
        "render:cron-jobs:Status": {
            "type": "string",
            "enum": [
                {
                    "name": "Pending",
                    "value": "pending"
                },
                {
                    "name": "Successful",
                    "value": "successful"
                },
                {
                    "name": "Unsuccessful",
                    "value": "unsuccessful"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                }
            ]
        },
        "render:disks:DiskWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "disk": {
                    "$ref": "#/types/render:disks:DiskWithCursorDiskProperties"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "disk"
            ]
        },
        "render:disks:DiskWithCursorDiskProperties": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "mountPath",
                "name",
                "sizeGB",
                "updatedAt"
            ]
        },
        "render:disks:DiskWithCursorpropertiesdisk": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "mountPath",
                "name",
                "sizeGB",
                "updatedAt"
            ]
        },
        "render:env-groups:EnvGroup": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:EnvVar"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:SecretFile"
                    }
                },
                "serviceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:ServiceLink"
                    },
                    "description": "List of serviceIds linked to the envGroup"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "envVars",
                "id",
                "name",
                "ownerId",
                "secretFiles",
                "serviceLinks",
                "updatedAt"
            ]
        },
        "render:env-groups:EnvGroupMeta": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "serviceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:ServiceLink"
                    },
                    "description": "List of serviceIds linked to the envGroup"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "name",
                "ownerId",
                "serviceLinks",
                "updatedAt"
            ]
        },
        "render:env-groups:EnvVar": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "render:env-groups:EnvVarInput": {
            "properties": {
                "generateValue": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:env-groups:SecretFile": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name"
            ]
        },
        "render:env-groups:SecretFileInput": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name"
            ]
        },
        "render:env-groups:ServiceLink": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:env-groups:ServiceLinkType"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ]
        },
        "render:env-groups:ServiceLinkType": {
            "type": "string",
            "enum": [
                {
                    "name": "Static",
                    "value": "static"
                },
                {
                    "name": "Web",
                    "value": "web"
                },
                {
                    "name": "Pserv",
                    "value": "pserv"
                },
                {
                    "name": "Worker",
                    "value": "worker"
                },
                {
                    "name": "Cron",
                    "value": "cron"
                }
            ]
        },
        "render:environments:Environment": {
            "properties": {
                "databasesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "protectedStatus": {
                    "$ref": "#/types/render:environments:EnvironmentProtectedStatus",
                    "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments."
                },
                "redisIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "databasesIds",
                "envGroupIds",
                "id",
                "name",
                "projectId",
                "protectedStatus",
                "redisIds",
                "serviceIds"
            ]
        },
        "render:environments:EnvironmentProtectedStatus": {
            "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.",
            "type": "string",
            "enum": [
                {
                    "name": "Unprotected",
                    "value": "unprotected"
                },
                {
                    "name": "Protected",
                    "value": "protected"
                }
            ]
        },
        "render:environments:EnvironmentWithCursor": {
            "description": "An environment with a cursor",
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "environment": {
                    "$ref": "#/types/render:environments:Environment"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "environment"
            ]
        },
        "render:environments:ProtectedStatus": {
            "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.",
            "type": "string",
            "enum": [
                {
                    "name": "Unprotected",
                    "value": "unprotected"
                },
                {
                    "name": "Protected",
                    "value": "protected"
                }
            ]
        },
        "render:logs:GetOwnerLogStreamProperties": {
            "description": "Owner log stream settings",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to stream logs to."
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner."
                },
                "preview": {
                    "$ref": "#/types/render:logs:GetOwnerLogStreamPropertiesPreview",
                    "description": "Whether to send logs or drop them."
                }
            },
            "type": "object"
        },
        "render:logs:GetOwnerLogStreamPropertiesPreview": {
            "description": "Whether to send logs or drop them.",
            "type": "string",
            "enum": [
                {
                    "name": "Send",
                    "value": "send"
                },
                {
                    "name": "Drop",
                    "value": "drop"
                }
            ]
        },
        "render:logs:GetResourceLogStreamProperties": {
            "description": "Resource log stream overrides",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop."
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource."
                },
                "setting": {
                    "$ref": "#/types/render:logs:GetResourceLogStreamPropertiesSetting",
                    "description": "Whether to send logs or drop them."
                }
            },
            "type": "object"
        },
        "render:logs:GetResourceLogStreamPropertiesSetting": {
            "description": "Whether to send logs or drop them.",
            "type": "string",
            "enum": [
                {
                    "name": "Send",
                    "value": "send"
                },
                {
                    "name": "Drop",
                    "value": "drop"
                }
            ]
        },
        "render:logs:Paths1logs1streams1resource17BresourceId7Dgetresponses200contentapplication1jsonschemaSetting": {
            "description": "Whether to send logs or drop them.",
            "type": "string",
            "enum": [
                {
                    "name": "Send",
                    "value": "send"
                },
                {
                    "name": "Drop",
                    "value": "drop"
                }
            ]
        },
        "render:logs:paths1logs1streams1resource17BresourceId7Dgetresponses200contentapplication1jsonschema": {
            "description": "Resource log stream overrides",
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "The endpoint to stream logs to. Must be present if setting is send. Cannot be present if setting is drop."
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the resource."
                },
                "setting": {
                    "$ref": "#/types/render:logs:Paths1logs1streams1resource17BresourceId7Dgetresponses200contentapplication1jsonschemaSetting",
                    "description": "Whether to send logs or drop them."
                }
            },
            "type": "object"
        },
        "render:metrics:ListActiveConnectionsItemProperties": {
            "description": "A time series data point",
            "properties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:metrics:ListActiveConnectionsItemPropertiesLabelsItemProperties"
                    },
                    "description": "List of labels describing the time series"
                },
                "unit": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:metrics:ListActiveConnectionsItemPropertiesValuesItemProperties"
                    },
                    "description": "The values of the time series"
                }
            },
            "type": "object",
            "required": [
                "labels",
                "unit",
                "values"
            ]
        },
        "render:metrics:ListActiveConnectionsItemPropertiesLabelsItemProperties": {
            "description": "A time series datapoint label",
            "properties": {
                "field": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "field",
                "value"
            ]
        },
        "render:metrics:ListActiveConnectionsItemPropertiesValuesItemProperties": {
            "description": "A time series datapoint value",
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "timestamp",
                "value"
            ]
        },
        "render:metrics:ListReplicationLagItemProperties": {
            "description": "A time series data point",
            "properties": {
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:metrics:ListReplicationLagItemPropertiesLabelsItemProperties"
                    },
                    "description": "List of labels describing the time series"
                },
                "unit": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:metrics:ListReplicationLagItemPropertiesValuesItemProperties"
                    },
                    "description": "The values of the time series"
                }
            },
            "type": "object",
            "required": [
                "labels",
                "unit",
                "values"
            ]
        },
        "render:metrics:ListReplicationLagItemPropertiesLabelsItemProperties": {
            "description": "A time series datapoint label",
            "properties": {
                "field": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "field",
                "value"
            ]
        },
        "render:metrics:ListReplicationLagItemPropertiesValuesItemProperties": {
            "description": "A time series datapoint value",
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "timestamp",
                "value"
            ]
        },
        "render:notification-settings:GetOwnerNotificationSettingProperties": {
            "properties": {
                "emailEnabled": {
                    "type": "boolean"
                },
                "notificationsToSend": {
                    "$ref": "#/types/render:notification-settings:GetOwnerNotificationSettingPropertiesNotificationsToSend"
                },
                "ownerId": {
                    "type": "string"
                },
                "previewNotificationsEnabled": {
                    "type": "boolean"
                },
                "slackEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "emailEnabled",
                "notificationsToSend",
                "ownerId",
                "previewNotificationsEnabled",
                "slackEnabled"
            ]
        },
        "render:notification-settings:GetOwnerNotificationSettingPropertiesNotificationsToSend": {
            "type": "string",
            "enum": [
                {
                    "name": "None",
                    "value": "none"
                },
                {
                    "name": "Failure",
                    "value": "failure"
                },
                {
                    "name": "All",
                    "value": "all"
                }
            ]
        },
        "render:notification-settings:GetServiceNotificationOverrideProperties": {
            "properties": {
                "notificationsToSend": {
                    "$ref": "#/types/render:notification-settings:GetServiceNotificationOverridePropertiesNotificationsToSend"
                },
                "previewNotificationsEnabled": {
                    "$ref": "#/types/render:notification-settings:GetServiceNotificationOverridePropertiesPreviewNotificationsEnabled"
                },
                "serviceId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "notificationsToSend",
                "previewNotificationsEnabled",
                "serviceId"
            ]
        },
        "render:notification-settings:GetServiceNotificationOverridePropertiesNotificationsToSend": {
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "None",
                    "value": "none"
                },
                {
                    "name": "Failure",
                    "value": "failure"
                },
                {
                    "name": "All",
                    "value": "all"
                }
            ]
        },
        "render:notification-settings:GetServiceNotificationOverridePropertiesPreviewNotificationsEnabled": {
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "False",
                    "value": "false"
                },
                {
                    "name": "True",
                    "value": "true"
                }
            ]
        },
        "render:notification-settings:NotificationOverrideWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "override": {
                    "$ref": "#/types/render:notification-settings:NotificationOverrideWithCursorOverrideProperties"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "override"
            ]
        },
        "render:notification-settings:NotificationOverrideWithCursorOverrideProperties": {
            "properties": {
                "notificationsToSend": {
                    "$ref": "#/types/render:notification-settings:NotificationOverrideWithCursorOverridePropertiesNotificationsToSend"
                },
                "previewNotificationsEnabled": {
                    "$ref": "#/types/render:notification-settings:NotificationOverrideWithCursorOverridePropertiesPreviewNotificationsEnabled"
                },
                "serviceId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "notificationsToSend",
                "previewNotificationsEnabled",
                "serviceId"
            ]
        },
        "render:notification-settings:NotificationOverrideWithCursorOverridePropertiesNotificationsToSend": {
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "None",
                    "value": "none"
                },
                {
                    "name": "Failure",
                    "value": "failure"
                },
                {
                    "name": "All",
                    "value": "all"
                }
            ]
        },
        "render:notification-settings:NotificationOverrideWithCursorOverridePropertiesPreviewNotificationsEnabled": {
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "False",
                    "value": "false"
                },
                {
                    "name": "True",
                    "value": "true"
                }
            ]
        },
        "render:owners:Owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether two-factor authentication is enabled for the owner. Only present for user owners."
                },
                "type": {
                    "$ref": "#/types/render:owners:OwnerType"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name",
                "type"
            ]
        },
        "render:owners:OwnerType": {
            "type": "string",
            "enum": [
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "Team",
                    "value": "team"
                }
            ]
        },
        "render:owners:OwnerWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/types/render:owners:Owner"
                }
            },
            "type": "object"
        },
        "render:postgres:CidrBlockAndDescription": {
            "properties": {
                "cidrBlock": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided description of the CIDR block"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "description"
            ]
        },
        "render:postgres:GetPostgresRecoveryInfoProperties": {
            "properties": {
                "recoveryStatus": {
                    "$ref": "#/types/render:postgres:GetPostgresRecoveryInfoPropertiesRecoveryStatus",
                    "description": "Availability of point-in-time recovery."
                },
                "startsAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "recoveryStatus"
            ]
        },
        "render:postgres:GetPostgresRecoveryInfoPropertiesRecoveryStatus": {
            "description": "Availability of point-in-time recovery.",
            "type": "string",
            "enum": [
                {
                    "name": "Available",
                    "value": "AVAILABLE"
                },
                {
                    "name": "BackupNotReady",
                    "value": "BACKUP_NOT_READY"
                },
                {
                    "name": "NotAvailable",
                    "value": "NOT_AVAILABLE"
                }
            ]
        },
        "render:postgres:ListPostgresBackupItemProperties": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "URL to download the Postgres backup"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id"
            ]
        },
        "render:postgres:Owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether two-factor authentication is enabled for the owner. Only present for user owners."
                },
                "type": {
                    "$ref": "#/types/render:postgres:OwnerType"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name",
                "type"
            ]
        },
        "render:postgres:OwnerType": {
            "type": "string",
            "enum": [
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "Team",
                    "value": "team"
                }
            ]
        },
        "render:postgres:Plan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                },
                {
                    "name": "Basic256mb",
                    "value": "basic_256mb"
                },
                {
                    "name": "Basic1gb",
                    "value": "basic_1gb"
                },
                {
                    "name": "Basic4gb",
                    "value": "basic_4gb"
                },
                {
                    "name": "Pro4gb",
                    "value": "pro_4gb"
                },
                {
                    "name": "Pro8gb",
                    "value": "pro_8gb"
                },
                {
                    "name": "Pro16gb",
                    "value": "pro_16gb"
                },
                {
                    "name": "Pro32gb",
                    "value": "pro_32gb"
                },
                {
                    "name": "Pro64gb",
                    "value": "pro_64gb"
                },
                {
                    "name": "Pro128gb",
                    "value": "pro_128gb"
                },
                {
                    "name": "Pro192gb",
                    "value": "pro_192gb"
                },
                {
                    "name": "Pro256gb",
                    "value": "pro_256gb"
                },
                {
                    "name": "Pro384gb",
                    "value": "pro_384gb"
                },
                {
                    "name": "Pro512gb",
                    "value": "pro_512gb"
                },
                {
                    "name": "Accelerated16gb",
                    "value": "accelerated_16gb"
                },
                {
                    "name": "Accelerated32gb",
                    "value": "accelerated_32gb"
                },
                {
                    "name": "Accelerated64gb",
                    "value": "accelerated_64gb"
                },
                {
                    "name": "Accelerated128gb",
                    "value": "accelerated_128gb"
                },
                {
                    "name": "Accelerated256gb",
                    "value": "accelerated_256gb"
                },
                {
                    "name": "Accelerated384gb",
                    "value": "accelerated_384gb"
                },
                {
                    "name": "Accelerated512gb",
                    "value": "accelerated_512gb"
                },
                {
                    "name": "Accelerated768gb",
                    "value": "accelerated_768gb"
                },
                {
                    "name": "Accelerated1024gb",
                    "value": "accelerated_1024gb"
                }
            ]
        },
        "render:postgres:Postgres": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the PostgreSQL instance in the Render Dashboard"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseUser": {
                    "type": "string"
                },
                "diskSizeGB": {
                    "type": "integer"
                },
                "environmentId": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The time at which the database will be expire. Applies to free tier databases only."
                },
                "highAvailabilityEnabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:CidrBlockAndDescription"
                    }
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/types/render:postgres:Owner"
                },
                "plan": {
                    "$ref": "#/types/render:postgres:PostgresPlan"
                },
                "primaryPostgresID": {
                    "type": "string"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:ReadReplica"
                    }
                },
                "region": {
                    "$ref": "#/types/render:postgres:PostgresRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "role": {
                    "$ref": "#/types/render:postgres:PostgresRole"
                },
                "status": {
                    "$ref": "#/types/render:postgres:PostgresStatus"
                },
                "suspended": {
                    "$ref": "#/types/render:postgres:PostgresSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:PostgresSuspendersItem"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/types/render:postgres:PostgresVersion",
                    "description": "The PostgreSQL version"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dashboardUrl",
                "databaseName",
                "databaseUser",
                "highAvailabilityEnabled",
                "id",
                "ipAllowList",
                "name",
                "owner",
                "plan",
                "readReplicas",
                "region",
                "role",
                "status",
                "suspended",
                "suspenders",
                "updatedAt",
                "version"
            ]
        },
        "render:postgres:PostgresConnectionInfo": {
            "properties": {
                "externalConnectionString": {
                    "type": "string"
                },
                "internalConnectionString": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "psqlCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalConnectionString",
                "internalConnectionString",
                "password",
                "psqlCommand"
            ]
        },
        "render:postgres:PostgresDetail": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the PostgreSQL instance in the Render Dashboard"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseUser": {
                    "type": "string"
                },
                "diskSizeGB": {
                    "type": "integer"
                },
                "environmentId": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The time at which the database will be expire. Applies to free tier databases only."
                },
                "highAvailabilityEnabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:CidrBlockAndDescription"
                    }
                },
                "maintenance": {
                    "$ref": "#/types/render:postgres:RedisDetailpropertiesmaintenance"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/types/render:postgres:Owner"
                },
                "plan": {
                    "$ref": "#/types/render:postgres:PostgresDetailPlan"
                },
                "primaryPostgresID": {
                    "type": "string"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:ReadReplica"
                    }
                },
                "region": {
                    "$ref": "#/types/render:postgres:PostgresDetailRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "role": {
                    "$ref": "#/types/render:postgres:PostgresDetailRole"
                },
                "status": {
                    "$ref": "#/types/render:postgres:PostgresDetailStatus"
                },
                "suspended": {
                    "$ref": "#/types/render:postgres:PostgresDetailSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:PostgresDetailSuspendersItem"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/types/render:postgres:PostgresDetailVersion",
                    "description": "The PostgreSQL version"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dashboardUrl",
                "databaseName",
                "databaseUser",
                "highAvailabilityEnabled",
                "id",
                "ipAllowList",
                "name",
                "owner",
                "plan",
                "readReplicas",
                "region",
                "role",
                "status",
                "suspended",
                "suspenders",
                "updatedAt",
                "version"
            ]
        },
        "render:postgres:PostgresDetailPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                },
                {
                    "name": "Basic256mb",
                    "value": "basic_256mb"
                },
                {
                    "name": "Basic1gb",
                    "value": "basic_1gb"
                },
                {
                    "name": "Basic4gb",
                    "value": "basic_4gb"
                },
                {
                    "name": "Pro4gb",
                    "value": "pro_4gb"
                },
                {
                    "name": "Pro8gb",
                    "value": "pro_8gb"
                },
                {
                    "name": "Pro16gb",
                    "value": "pro_16gb"
                },
                {
                    "name": "Pro32gb",
                    "value": "pro_32gb"
                },
                {
                    "name": "Pro64gb",
                    "value": "pro_64gb"
                },
                {
                    "name": "Pro128gb",
                    "value": "pro_128gb"
                },
                {
                    "name": "Pro192gb",
                    "value": "pro_192gb"
                },
                {
                    "name": "Pro256gb",
                    "value": "pro_256gb"
                },
                {
                    "name": "Pro384gb",
                    "value": "pro_384gb"
                },
                {
                    "name": "Pro512gb",
                    "value": "pro_512gb"
                },
                {
                    "name": "Accelerated16gb",
                    "value": "accelerated_16gb"
                },
                {
                    "name": "Accelerated32gb",
                    "value": "accelerated_32gb"
                },
                {
                    "name": "Accelerated64gb",
                    "value": "accelerated_64gb"
                },
                {
                    "name": "Accelerated128gb",
                    "value": "accelerated_128gb"
                },
                {
                    "name": "Accelerated256gb",
                    "value": "accelerated_256gb"
                },
                {
                    "name": "Accelerated384gb",
                    "value": "accelerated_384gb"
                },
                {
                    "name": "Accelerated512gb",
                    "value": "accelerated_512gb"
                },
                {
                    "name": "Accelerated768gb",
                    "value": "accelerated_768gb"
                },
                {
                    "name": "Accelerated1024gb",
                    "value": "accelerated_1024gb"
                }
            ]
        },
        "render:postgres:PostgresDetailRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:postgres:PostgresDetailRole": {
            "type": "string",
            "enum": [
                {
                    "name": "Primary",
                    "value": "primary"
                },
                {
                    "name": "Replica",
                    "value": "replica"
                }
            ]
        },
        "render:postgres:PostgresDetailStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:postgres:PostgresDetailSuspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:postgres:PostgresDetailSuspendersItem": {
            "type": "string",
            "enum": [
                {
                    "name": "Admin",
                    "value": "admin"
                },
                {
                    "name": "Billing",
                    "value": "billing"
                },
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "ParentService",
                    "value": "parent_service"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                }
            ]
        },
        "render:postgres:PostgresDetailVersion": {
            "description": "The PostgreSQL version",
            "type": "string",
            "enum": [
                {
                    "name": "11",
                    "value": "11"
                },
                {
                    "name": "12",
                    "value": "12"
                },
                {
                    "name": "13",
                    "value": "13"
                },
                {
                    "name": "14",
                    "value": "14"
                },
                {
                    "name": "15",
                    "value": "15"
                },
                {
                    "name": "16",
                    "value": "16"
                }
            ]
        },
        "render:postgres:PostgresPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                },
                {
                    "name": "Basic256mb",
                    "value": "basic_256mb"
                },
                {
                    "name": "Basic1gb",
                    "value": "basic_1gb"
                },
                {
                    "name": "Basic4gb",
                    "value": "basic_4gb"
                },
                {
                    "name": "Pro4gb",
                    "value": "pro_4gb"
                },
                {
                    "name": "Pro8gb",
                    "value": "pro_8gb"
                },
                {
                    "name": "Pro16gb",
                    "value": "pro_16gb"
                },
                {
                    "name": "Pro32gb",
                    "value": "pro_32gb"
                },
                {
                    "name": "Pro64gb",
                    "value": "pro_64gb"
                },
                {
                    "name": "Pro128gb",
                    "value": "pro_128gb"
                },
                {
                    "name": "Pro192gb",
                    "value": "pro_192gb"
                },
                {
                    "name": "Pro256gb",
                    "value": "pro_256gb"
                },
                {
                    "name": "Pro384gb",
                    "value": "pro_384gb"
                },
                {
                    "name": "Pro512gb",
                    "value": "pro_512gb"
                },
                {
                    "name": "Accelerated16gb",
                    "value": "accelerated_16gb"
                },
                {
                    "name": "Accelerated32gb",
                    "value": "accelerated_32gb"
                },
                {
                    "name": "Accelerated64gb",
                    "value": "accelerated_64gb"
                },
                {
                    "name": "Accelerated128gb",
                    "value": "accelerated_128gb"
                },
                {
                    "name": "Accelerated256gb",
                    "value": "accelerated_256gb"
                },
                {
                    "name": "Accelerated384gb",
                    "value": "accelerated_384gb"
                },
                {
                    "name": "Accelerated512gb",
                    "value": "accelerated_512gb"
                },
                {
                    "name": "Accelerated768gb",
                    "value": "accelerated_768gb"
                },
                {
                    "name": "Accelerated1024gb",
                    "value": "accelerated_1024gb"
                }
            ]
        },
        "render:postgres:PostgresRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:postgres:PostgresRole": {
            "type": "string",
            "enum": [
                {
                    "name": "Primary",
                    "value": "primary"
                },
                {
                    "name": "Replica",
                    "value": "replica"
                }
            ]
        },
        "render:postgres:PostgresStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:postgres:PostgresSuspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:postgres:PostgresSuspendersItem": {
            "type": "string",
            "enum": [
                {
                    "name": "Admin",
                    "value": "admin"
                },
                {
                    "name": "Billing",
                    "value": "billing"
                },
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "ParentService",
                    "value": "parent_service"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                }
            ]
        },
        "render:postgres:PostgresVersion": {
            "description": "The PostgreSQL version",
            "type": "string",
            "enum": [
                {
                    "name": "11",
                    "value": "11"
                },
                {
                    "name": "12",
                    "value": "12"
                },
                {
                    "name": "13",
                    "value": "13"
                },
                {
                    "name": "14",
                    "value": "14"
                },
                {
                    "name": "15",
                    "value": "15"
                },
                {
                    "name": "16",
                    "value": "16"
                }
            ]
        },
        "render:postgres:PostgresWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "postgres": {
                    "$ref": "#/types/render:postgres:Postgres"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "postgres"
            ]
        },
        "render:postgres:ReadReplica": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The replica instance identifier."
                },
                "name": {
                    "type": "string",
                    "description": "The display name of the replica instance."
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "render:postgres:ReadReplicaInput": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The display name of the replica instance."
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "render:postgres:RecoverPostgresSuspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:postgres:RedisDetailpropertiesmaintenance": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "pendingMaintenanceBy": {
                    "type": "string",
                    "description": "If present, the maintenance run cannot be scheduled for later than this date-time."
                },
                "scheduledAt": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/types/render:postgres:RedisDetailpropertiesmaintenanceState"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "scheduledAt",
                "state",
                "type"
            ]
        },
        "render:postgres:RedisDetailpropertiesmaintenanceState": {
            "type": "string",
            "enum": [
                {
                    "name": "Scheduled",
                    "value": "scheduled"
                },
                {
                    "name": "InProgress",
                    "value": "in_progress"
                },
                {
                    "name": "UserFixRequired",
                    "value": "user_fix_required"
                },
                {
                    "name": "Cancelled",
                    "value": "cancelled"
                },
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                }
            ]
        },
        "render:postgres:Region": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:postgres:Role": {
            "type": "string",
            "enum": [
                {
                    "name": "Primary",
                    "value": "primary"
                },
                {
                    "name": "Replica",
                    "value": "replica"
                }
            ]
        },
        "render:postgres:Status": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:postgres:Suspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended_",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:postgres:SuspendersItem": {
            "type": "string",
            "enum": [
                {
                    "name": "Admin",
                    "value": "admin"
                },
                {
                    "name": "Billing",
                    "value": "billing"
                },
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "ParentService",
                    "value": "parent_service"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                }
            ]
        },
        "render:postgres:Version": {
            "description": "The PostgreSQL version",
            "type": "string",
            "enum": [
                {
                    "name": "11",
                    "value": "11"
                },
                {
                    "name": "12",
                    "value": "12"
                },
                {
                    "name": "13",
                    "value": "13"
                },
                {
                    "name": "14",
                    "value": "14"
                },
                {
                    "name": "15",
                    "value": "15"
                },
                {
                    "name": "16",
                    "value": "16"
                }
            ]
        },
        "render:projects:Owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether two-factor authentication is enabled for the owner. Only present for user owners."
                },
                "type": {
                    "$ref": "#/types/render:projects:OwnerType"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name",
                "type"
            ]
        },
        "render:projects:OwnerType": {
            "type": "string",
            "enum": [
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "Team",
                    "value": "team"
                }
            ]
        },
        "render:projects:Project": {
            "description": "A project is a collection of environments",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments associated with the project"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the project"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project"
                },
                "owner": {
                    "$ref": "#/types/render:projects:Owner"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "environmentIds",
                "id",
                "name",
                "owner",
                "updatedAt"
            ]
        },
        "render:projects:ProjectCreateEnvironmentInput": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "protectedStatus": {
                    "$ref": "#/types/render:projects:ProjectCreateEnvironmentInputProtectedStatus",
                    "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments."
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "render:projects:ProjectCreateEnvironmentInputProtectedStatus": {
            "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments.",
            "type": "string",
            "enum": [
                {
                    "name": "Unprotected",
                    "value": "unprotected"
                },
                {
                    "name": "Protected",
                    "value": "protected"
                }
            ]
        },
        "render:projects:ProjectWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/types/render:projects:Project",
                    "description": "A project is a collection of environments"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "project"
            ]
        },
        "render:redis:CidrBlockAndDescription": {
            "properties": {
                "cidrBlock": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "User-provided description of the CIDR block"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock",
                "description"
            ]
        },
        "render:redis:MaintenanceProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "pendingMaintenanceBy": {
                    "type": "string",
                    "description": "If present, the maintenance run cannot be scheduled for later than this date-time."
                },
                "scheduledAt": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/types/render:redis:MaintenancePropertiesState"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "scheduledAt",
                "state",
                "type"
            ]
        },
        "render:redis:MaintenancePropertiesState": {
            "type": "string",
            "enum": [
                {
                    "name": "Scheduled",
                    "value": "scheduled"
                },
                {
                    "name": "InProgress",
                    "value": "in_progress"
                },
                {
                    "name": "UserFixRequired",
                    "value": "user_fix_required"
                },
                {
                    "name": "Cancelled",
                    "value": "cancelled"
                },
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                }
            ]
        },
        "render:redis:MaxmemoryPolicy": {
            "description": "The eviction policy for the Redis instance",
            "type": "string",
            "enum": [
                {
                    "name": "Noeviction",
                    "value": "noeviction"
                },
                {
                    "name": "AllkeysLfu",
                    "value": "allkeys_lfu"
                },
                {
                    "name": "AllkeysLru",
                    "value": "allkeys_lru"
                },
                {
                    "name": "AllkeysRandom",
                    "value": "allkeys_random"
                },
                {
                    "name": "VolatileLfu",
                    "value": "volatile_lfu"
                },
                {
                    "name": "VolatileLru",
                    "value": "volatile_lru"
                },
                {
                    "name": "VolatileRandom",
                    "value": "volatile_random"
                },
                {
                    "name": "VolatileTtl",
                    "value": "volatile_ttl"
                }
            ]
        },
        "render:redis:Owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "twoFactorAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether two-factor authentication is enabled for the owner. Only present for user owners."
                },
                "type": {
                    "$ref": "#/types/render:redis:OwnerType"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "name",
                "type"
            ]
        },
        "render:redis:OwnerType": {
            "type": "string",
            "enum": [
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "Team",
                    "value": "team"
                }
            ]
        },
        "render:redis:Plan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:redis:Redis": {
            "description": "A Redis instance",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation time of the Redis instance"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the Redis instance in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the environment the Redis instance is associated with"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis instance"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:redis:CidrBlockAndDescription"
                    },
                    "description": "The IP allow list for the Redis instance"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance"
                },
                "options": {
                    "$ref": "#/types/render:redis:RedisOptions",
                    "description": "Options for a Redis instance"
                },
                "owner": {
                    "$ref": "#/types/render:redis:Owner"
                },
                "plan": {
                    "$ref": "#/types/render:redis:RedisPlan"
                },
                "region": {
                    "$ref": "#/types/render:redis:RedisRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "status": {
                    "$ref": "#/types/render:redis:RedisStatus"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last updated time of the Redis instance"
                },
                "version": {
                    "type": "string",
                    "description": "The version of Redis"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dashboardUrl",
                "id",
                "ipAllowList",
                "name",
                "options",
                "owner",
                "plan",
                "region",
                "status",
                "updatedAt",
                "version"
            ]
        },
        "render:redis:RedisConnectionInfo": {
            "description": "A Redis instance",
            "properties": {
                "externalConnectionString": {
                    "type": "string",
                    "description": "The connection string to use from outside Render"
                },
                "internalConnectionString": {
                    "type": "string",
                    "description": "The connection string to use from within Render"
                },
                "redisCLICommand": {
                    "type": "string",
                    "description": "The Redis CLI command to connect to the Redis instance"
                }
            },
            "type": "object",
            "required": [
                "externalConnectionString",
                "internalConnectionString",
                "redisCLICommand"
            ]
        },
        "render:redis:RedisDetail": {
            "description": "A Redis instance",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation time of the Redis instance"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the environment the Redis instance is associated with"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of the Redis instance"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:redis:CidrBlockAndDescription"
                    },
                    "description": "The IP allow list for the Redis instance"
                },
                "maintenance": {
                    "$ref": "#/types/render:redis:RedisDetailMaintenanceProperties"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance"
                },
                "options": {
                    "$ref": "#/types/render:redis:RedisOptions",
                    "description": "Options for a Redis instance"
                },
                "owner": {
                    "$ref": "#/types/render:redis:Owner"
                },
                "plan": {
                    "$ref": "#/types/render:redis:RedisDetailPlan"
                },
                "region": {
                    "$ref": "#/types/render:redis:RedisDetailRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "status": {
                    "$ref": "#/types/render:redis:RedisDetailStatus"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last updated time of the Redis instance"
                },
                "version": {
                    "type": "string",
                    "description": "The version of Redis"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "ipAllowList",
                "name",
                "options",
                "owner",
                "plan",
                "region",
                "status",
                "updatedAt",
                "version"
            ]
        },
        "render:redis:RedisDetailMaintenanceProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "pendingMaintenanceBy": {
                    "type": "string",
                    "description": "If present, the maintenance run cannot be scheduled for later than this date-time."
                },
                "scheduledAt": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/types/render:redis:RedisDetailMaintenancePropertiesState"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "scheduledAt",
                "state",
                "type"
            ]
        },
        "render:redis:RedisDetailMaintenancePropertiesState": {
            "type": "string",
            "enum": [
                {
                    "name": "Scheduled",
                    "value": "scheduled"
                },
                {
                    "name": "InProgress",
                    "value": "in_progress"
                },
                {
                    "name": "UserFixRequired",
                    "value": "user_fix_required"
                },
                {
                    "name": "Cancelled",
                    "value": "cancelled"
                },
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                }
            ]
        },
        "render:redis:RedisDetailPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:redis:RedisDetailRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:redis:RedisDetailStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:redis:RedisOptions": {
            "description": "Options for a Redis instance",
            "properties": {
                "maxmemoryPolicy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:redis:RedisPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:redis:RedisRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:redis:RedisStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:redis:RedisWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "redis": {
                    "$ref": "#/types/render:redis:Redis",
                    "description": "A Redis instance"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "redis"
            ]
        },
        "render:redis:Region": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:redis:Status": {
            "type": "string",
            "enum": [
                {
                    "name": "Creating",
                    "value": "creating"
                },
                {
                    "name": "Available",
                    "value": "available"
                },
                {
                    "name": "Unavailable",
                    "value": "unavailable"
                },
                {
                    "name": "ConfigRestart",
                    "value": "config_restart"
                },
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "MaintenanceScheduled",
                    "value": "maintenance_scheduled"
                },
                {
                    "name": "MaintenanceInProgress",
                    "value": "maintenance_in_progress"
                },
                {
                    "name": "RecoveryFailed",
                    "value": "recovery_failed"
                },
                {
                    "name": "RecoveryInProgress",
                    "value": "recovery_in_progress"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                },
                {
                    "name": "UpdatingInstance",
                    "value": "updating_instance"
                }
            ]
        },
        "render:registrycredentials:Registry": {
            "description": "The registry to use this credential with",
            "type": "string",
            "enum": [
                {
                    "name": "Github",
                    "value": "GITHUB"
                },
                {
                    "name": "Gitlab",
                    "value": "GITLAB"
                },
                {
                    "name": "Docker",
                    "value": "DOCKER"
                },
                {
                    "name": "GoogleArtifact",
                    "value": "GOOGLE_ARTIFACT"
                },
                {
                    "name": "AwsEcr",
                    "value": "AWS_ECR"
                }
            ]
        },
        "render:registrycredentials:RegistryCredential": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this credential"
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for this credential"
                },
                "registry": {
                    "$ref": "#/types/render:registrycredentials:RegistryCredentialRegistry",
                    "description": "The registry to use this credential with"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last updated time for the credential"
                },
                "username": {
                    "type": "string",
                    "description": "The username associated with the credential"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "registry",
                "updatedAt",
                "username"
            ]
        },
        "render:registrycredentials:RegistryCredentialRegistry": {
            "description": "The registry to use this credential with",
            "type": "string",
            "enum": [
                {
                    "name": "Github",
                    "value": "GITHUB"
                },
                {
                    "name": "Gitlab",
                    "value": "GITLAB"
                },
                {
                    "name": "Docker",
                    "value": "DOCKER"
                },
                {
                    "name": "GoogleArtifact",
                    "value": "GOOGLE_ARTIFACT"
                },
                {
                    "name": "AwsEcr",
                    "value": "AWS_ECR"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsCreate": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscaling"
                },
                "disk": {
                    "$ref": "#/types/render:services:ServiceDisk"
                },
                "env": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreateEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetailsCreate"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "Defaults to 1",
                    "default": 1
                },
                "plan": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreatePlan",
                    "description": "Defaults to \"starter\"",
                    "default": "starter"
                },
                "preDeployCommand": {
                    "type": "string"
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreateRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreateRuntime",
                    "description": "Runtime"
                }
            },
            "type": "object",
            "required": [
                "runtime"
            ]
        },
        "render:services:BackgroundWorkerDetailsCreateEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsCreatePlan": {
            "description": "Defaults to \"starter\"",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsCreatePullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsCreateRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsCreateRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutput": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscaling"
                },
                "buildPlan": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputBuildPlan",
                    "default": "starter"
                },
                "disk": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesdisk"
                },
                "env": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetails"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service."
                },
                "parentServer": {
                    "$ref": "#/types/render:services:Resource"
                },
                "plan": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputPlan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutputRuntime",
                    "description": "Runtime"
                },
                "sshAddress": {
                    "type": "string",
                    "description": "The SSH address for the service. Only present for services that have SSH enabled."
                }
            },
            "type": "object",
            "required": [
                "buildPlan",
                "env",
                "envSpecificDetails",
                "numInstances",
                "plan",
                "region",
                "runtime"
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputBuildPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Performance",
                    "value": "performance"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputPlan": {
            "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                },
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:BackgroundWorkerDetailsOutputRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:BackgroundWorkerOutput": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "background_worker"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:BuildFilter": {
            "properties": {
                "ignoredPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "ignoredPaths",
                "paths"
            ]
        },
        "render:services:CancelJobStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                }
            ]
        },
        "render:services:ClearCache": {
            "description": "If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.",
            "type": "string",
            "enum": [
                {
                    "name": "Clear",
                    "value": "clear"
                },
                {
                    "name": "DoNotClear",
                    "value": "do_not_clear"
                }
            ]
        },
        "render:services:CommitProperties": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:CriteriaProperties": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/render:services:CriteriaPropertiesCpuProperties"
                },
                "memory": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscalingpropertiescriteriapropertiescpu"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ]
        },
        "render:services:CriteriaPropertiesCpuProperties": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "percentage": {
                    "type": "integer",
                    "description": "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "percentage"
            ]
        },
        "render:services:CronJobDetailsCreate": {
            "properties": {
                "env": {
                    "$ref": "#/types/render:services:CronJobDetailsCreateEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetails"
                },
                "plan": {
                    "$ref": "#/types/render:services:CronJobDetailsCreatePlan",
                    "description": "Defaults to \"starter\"",
                    "default": "starter"
                },
                "region": {
                    "$ref": "#/types/render:services:CronJobDetailsCreateRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:CronJobDetailsCreateRuntime",
                    "description": "Runtime"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "runtime",
                "schedule"
            ]
        },
        "render:services:CronJobDetailsCreateEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:CronJobDetailsCreatePlan": {
            "description": "Defaults to \"starter\"",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                }
            ]
        },
        "render:services:CronJobDetailsCreateRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:CronJobDetailsCreateRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:CronJobDetailsOutput": {
            "properties": {
                "buildPlan": {
                    "$ref": "#/types/render:services:CronJobDetailsOutputBuildPlan",
                    "default": "starter"
                },
                "env": {
                    "$ref": "#/types/render:services:CronJobDetailsOutputEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetails"
                },
                "lastSuccessfulRunAt": {
                    "type": "string"
                },
                "plan": {
                    "$ref": "#/types/render:services:CronJobDetailsOutputPlan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "region": {
                    "$ref": "#/types/render:services:CronJobDetailsOutputRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:CronJobDetailsOutputRuntime",
                    "description": "Runtime"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "buildPlan",
                "env",
                "envSpecificDetails",
                "plan",
                "region",
                "runtime",
                "schedule"
            ]
        },
        "render:services:CronJobDetailsOutputBuildPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Performance",
                    "value": "performance"
                }
            ]
        },
        "render:services:CronJobDetailsOutputEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:CronJobDetailsOutputPlan": {
            "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                },
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:services:CronJobDetailsOutputRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:CronJobDetailsOutputRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:CronJobOutput": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:CronJobDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "cron_job"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:CustomDomain": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "domainType": {
                    "$ref": "#/types/render:services:CustomDomainDomainType"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "publicSuffix": {
                    "type": "string"
                },
                "redirectForName": {
                    "type": "string"
                },
                "server": {
                    "$ref": "#/types/render:services:CustomDomainServerProperties"
                },
                "verificationStatus": {
                    "$ref": "#/types/render:services:CustomDomainVerificationStatus"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "domainType",
                "id",
                "name",
                "publicSuffix",
                "redirectForName",
                "verificationStatus"
            ]
        },
        "render:services:CustomDomainDomainType": {
            "type": "string",
            "enum": [
                {
                    "name": "Apex",
                    "value": "apex"
                },
                {
                    "name": "Subdomain",
                    "value": "subdomain"
                }
            ]
        },
        "render:services:CustomDomainServerProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:CustomDomainVerificationStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Verified",
                    "value": "verified"
                },
                {
                    "name": "Unverified",
                    "value": "unverified"
                }
            ]
        },
        "render:services:CustomDomainWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "customDomain": {
                    "$ref": "#/types/render:services:CustomDomain"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "customDomain"
            ]
        },
        "render:services:Deploy": {
            "properties": {
                "commit": {
                    "$ref": "#/types/render:services:DeployCommitProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:DeployImageProperties",
                    "description": "Image information used when creating the deploy. Not present for Git-backed deploys"
                },
                "status": {
                    "$ref": "#/types/render:services:DeployStatus"
                },
                "trigger": {
                    "$ref": "#/types/render:services:DeployTrigger"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "render:services:DeployCommitProperties": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:DeployImageProperties": {
            "description": "Image information used when creating the deploy. Not present for Git-backed deploys",
            "properties": {
                "ref": {
                    "type": "string",
                    "description": "Image reference used when creating the deploy"
                },
                "registryCredential": {
                    "type": "string",
                    "description": "Name of credential used to pull the image, if provided"
                },
                "sha": {
                    "type": "string",
                    "description": "SHA that the image reference was resolved to when creating the deploy"
                }
            },
            "type": "object"
        },
        "render:services:DeployStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Created",
                    "value": "created"
                },
                {
                    "name": "BuildInProgress",
                    "value": "build_in_progress"
                },
                {
                    "name": "UpdateInProgress",
                    "value": "update_in_progress"
                },
                {
                    "name": "Live",
                    "value": "live"
                },
                {
                    "name": "Deactivated",
                    "value": "deactivated"
                },
                {
                    "name": "BuildFailed",
                    "value": "build_failed"
                },
                {
                    "name": "UpdateFailed",
                    "value": "update_failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                },
                {
                    "name": "PreDeployInProgress",
                    "value": "pre_deploy_in_progress"
                },
                {
                    "name": "PreDeployFailed",
                    "value": "pre_deploy_failed"
                }
            ]
        },
        "render:services:DeployTrigger": {
            "type": "string",
            "enum": [
                {
                    "name": "Api",
                    "value": "api"
                },
                {
                    "name": "BlueprintSync",
                    "value": "blueprint_sync"
                },
                {
                    "name": "DeployHook",
                    "value": "deploy_hook"
                },
                {
                    "name": "DeployedByRender",
                    "value": "deployed_by_render"
                },
                {
                    "name": "Manual",
                    "value": "manual"
                },
                {
                    "name": "Other",
                    "value": "other"
                },
                {
                    "name": "NewCommit",
                    "value": "new_commit"
                },
                {
                    "name": "Rollback",
                    "value": "rollback"
                },
                {
                    "name": "ServiceResumed",
                    "value": "service_resumed"
                },
                {
                    "name": "ServiceUpdated",
                    "value": "service_updated"
                }
            ]
        },
        "render:services:DeployWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "deploy": {
                    "$ref": "#/types/render:services:Deploy"
                }
            },
            "type": "object"
        },
        "render:services:EnvSpecificDetails": {
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "dockerCommand": {
                    "type": "string"
                },
                "dockerContext": {
                    "type": "string"
                },
                "dockerfilePath": {
                    "type": "string"
                },
                "preDeployCommand": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredential"
                },
                "startCommand": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:EnvSpecificDetailsCreate": {
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "dockerCommand": {
                    "type": "string"
                },
                "dockerContext": {
                    "type": "string"
                },
                "dockerfilePath": {
                    "type": "string",
                    "description": "Defaults to \"./Dockerfile\""
                },
                "registryCredentialId": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:EnvVar": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "render:services:EnvVarInput": {
            "properties": {
                "generateValue": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "render:services:EnvVarWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "envVar": {
                    "$ref": "#/types/render:services:EnvVar"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "envVar"
            ]
        },
        "render:services:GetBackgroundWorker": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "background_worker"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:GetCronJob": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:CronJobDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "cron_job"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:GetPrivateService": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "private_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:GetStaticSite": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:StaticSiteDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "static_site"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:GetWebService": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "web_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:Header": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "path",
                "value"
            ]
        },
        "render:services:HeaderInput": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Header name"
                },
                "path": {
                    "type": "string",
                    "description": "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths."
                },
                "value": {
                    "type": "string",
                    "description": "Header value"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "value"
            ]
        },
        "render:services:HeaderWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/types/render:services:Header"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "header"
            ]
        },
        "render:services:Image": {
            "properties": {
                "imagePath": {
                    "type": "string",
                    "description": "Path to the image used for this server (e.g docker.io/library/nginx:latest)."
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner for this image. This should match the owner of the service as well as the owner of any specified registry credential."
                },
                "registryCredentialId": {
                    "type": "string",
                    "description": "Optional reference to the registry credential passed to the image repository to retrieve this image."
                }
            },
            "type": "object",
            "required": [
                "imagePath",
                "ownerId"
            ]
        },
        "render:services:ImageProperties": {
            "description": "Image information used when creating the deploy. Not present for Git-backed deploys",
            "properties": {
                "ref": {
                    "type": "string",
                    "description": "Image reference used when creating the deploy"
                },
                "registryCredential": {
                    "type": "string",
                    "description": "Name of credential used to pull the image, if provided"
                },
                "sha": {
                    "type": "string",
                    "description": "SHA that the image reference was resolved to when creating the deploy"
                }
            },
            "type": "object"
        },
        "render:services:JobStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                }
            ]
        },
        "render:services:JobWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "job": {
                    "$ref": "#/types/render:services:JobWithCursorJobProperties"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "job"
            ]
        },
        "render:services:JobWithCursorJobProperties": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "planId": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:services:JobWithCursorJobPropertiesStatus"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "planId",
                "serviceId",
                "startCommand"
            ]
        },
        "render:services:JobWithCursorJobPropertiesStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                }
            ]
        },
        "render:services:JobWithCursorpropertiesjob": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "planId": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:services:JobWithCursorpropertiesjobStatus"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "planId",
                "serviceId",
                "startCommand"
            ]
        },
        "render:services:JobWithCursorpropertiesjobStatus": {
            "type": "string",
            "enum": [
                {
                    "name": "Succeeded",
                    "value": "succeeded"
                },
                {
                    "name": "Failed",
                    "value": "failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                }
            ]
        },
        "render:services:ListServicesResponse": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "service": {
                    "oneOf": [
                        {
                            "$ref": "#/types/render:services:BackgroundWorkerOutput"
                        },
                        {
                            "$ref": "#/types/render:services:CronJobOutput"
                        },
                        {
                            "$ref": "#/types/render:services:PrivateServiceOutput"
                        },
                        {
                            "$ref": "#/types/render:services:StaticSiteOutput"
                        },
                        {
                            "$ref": "#/types/render:services:WebServiceOutput"
                        }
                    ],
                    "discriminator": {
                        "propertyName": "type",
                        "mapping": {
                            "background_worker": "#/types/render:services:BackgroundWorkerOutput",
                            "cron_job": "#/types/render:services:CronJobOutput",
                            "private_service": "#/types/render:services:PrivateServiceOutput",
                            "static_site": "#/types/render:services:StaticSiteOutput",
                            "web_service": "#/types/render:services:WebServiceOutput"
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "service"
            ]
        },
        "render:services:MaintenanceMode": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "uri": {
                    "type": "string",
                    "description": "The page to be served when [maintenance mode](https://docs.render.com/maintenance-mode) is enabled. When empty, the default maintenance mode page is served."
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "uri"
            ]
        },
        "render:services:Plan": {
            "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                },
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:services:Previews": {
            "properties": {
                "generation": {
                    "$ref": "#/types/render:services:PreviewsGeneration",
                    "description": "Defaults to \"off\"",
                    "default": "off"
                }
            },
            "type": "object"
        },
        "render:services:PreviewsGeneration": {
            "description": "Defaults to \"off\"",
            "type": "string",
            "enum": [
                {
                    "name": "Off",
                    "value": "off"
                },
                {
                    "name": "Manual",
                    "value": "manual"
                },
                {
                    "name": "Automatic",
                    "value": "automatic"
                }
            ]
        },
        "render:services:PrivateServiceDetailsCreate": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscaling"
                },
                "disk": {
                    "$ref": "#/types/render:services:ServiceDisk"
                },
                "env": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreateEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetailsCreate"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "Defaults to 1",
                    "default": 1
                },
                "plan": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreatePlan",
                    "description": "Defaults to \"starter\"",
                    "default": "starter"
                },
                "preDeployCommand": {
                    "type": "string"
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreatePullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreateRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreateRuntime",
                    "description": "Runtime"
                }
            },
            "type": "object",
            "required": [
                "runtime"
            ]
        },
        "render:services:PrivateServiceDetailsCreateEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:PrivateServiceDetailsCreatePlan": {
            "description": "Defaults to \"starter\"",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                }
            ]
        },
        "render:services:PrivateServiceDetailsCreatePullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:PrivateServiceDetailsCreateRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:PrivateServiceDetailsCreateRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutput": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscaling"
                },
                "buildPlan": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputBuildPlan",
                    "default": "starter"
                },
                "disk": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesdisk"
                },
                "env": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetails"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service."
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServerPort"
                    }
                },
                "parentServer": {
                    "$ref": "#/types/render:services:Resource"
                },
                "plan": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputPlan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputPullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutputRuntime",
                    "description": "Runtime"
                },
                "sshAddress": {
                    "type": "string",
                    "description": "The SSH address for the service. Only present for services that have SSH enabled."
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "buildPlan",
                "env",
                "envSpecificDetails",
                "numInstances",
                "openPorts",
                "plan",
                "region",
                "runtime",
                "url"
            ]
        },
        "render:services:PrivateServiceDetailsOutputBuildPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Performance",
                    "value": "performance"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutputEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutputPlan": {
            "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                },
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutputPullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutputRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:PrivateServiceDetailsOutputRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:PrivateServiceOutput": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "private_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:RegistryCredential": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for this credential"
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for this credential"
                },
                "registry": {
                    "$ref": "#/types/render:services:RegistryCredentialRegistry",
                    "description": "The registry to use this credential with"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last updated time for the credential"
                },
                "username": {
                    "type": "string",
                    "description": "The username associated with the credential"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "registry",
                "updatedAt",
                "username"
            ]
        },
        "render:services:RegistryCredentialRegistry": {
            "description": "The registry to use this credential with",
            "type": "string",
            "enum": [
                {
                    "name": "Github",
                    "value": "GITHUB"
                },
                {
                    "name": "Gitlab",
                    "value": "GITLAB"
                },
                {
                    "name": "Docker",
                    "value": "DOCKER"
                },
                {
                    "name": "GoogleArtifact",
                    "value": "GOOGLE_ARTIFACT"
                },
                {
                    "name": "AwsEcr",
                    "value": "AWS_ECR"
                }
            ]
        },
        "render:services:RegistryCredentialSummary": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "render:services:Resource": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "render:services:Route": {
            "properties": {
                "destination": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer",
                    "description": "Redirect and Rewrite Rules are applied in priority order starting at 0"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:services:RouteType"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "id",
                "priority",
                "source",
                "type"
            ]
        },
        "render:services:RouteCreate": {
            "properties": {
                "destination": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer",
                    "description": "Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list."
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:services:RouteCreateType"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "source",
                "type"
            ]
        },
        "render:services:RouteCreateType": {
            "type": "string",
            "enum": [
                {
                    "name": "Redirect",
                    "value": "redirect"
                },
                {
                    "name": "Rewrite",
                    "value": "rewrite"
                }
            ]
        },
        "render:services:RouteType": {
            "type": "string",
            "enum": [
                {
                    "name": "Redirect",
                    "value": "redirect"
                },
                {
                    "name": "Rewrite",
                    "value": "rewrite"
                }
            ]
        },
        "render:services:RouteWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "route": {
                    "$ref": "#/types/render:services:Route"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "route"
            ]
        },
        "render:services:SecretFile": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name"
            ]
        },
        "render:services:SecretFileInput": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name"
            ]
        },
        "render:services:SecretFileWithCursor": {
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "secretFile": {
                    "$ref": "#/types/render:services:SecretFile"
                }
            },
            "type": "object",
            "required": [
                "cursor",
                "secretFile"
            ]
        },
        "render:services:ServerPort": {
            "properties": {
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "$ref": "#/types/render:services:ServerPortProtocol"
                }
            },
            "type": "object",
            "required": [
                "port",
                "protocol"
            ]
        },
        "render:services:ServerPortProtocol": {
            "type": "string",
            "enum": [
                {
                    "name": "Tcp",
                    "value": "TCP"
                },
                {
                    "name": "Udp",
                    "value": "UDP"
                }
            ]
        },
        "render:services:Service": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:ServiceAutoDeploy": {
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:ServiceCreateAutoDeploy": {
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:ServiceDisk": {
            "properties": {
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer",
                    "description": "Defaults to 1"
                }
            },
            "type": "object",
            "required": [
                "mountPath",
                "name"
            ]
        },
        "render:services:ServiceNotifyOnFail": {
            "type": "string",
            "enum": [
                {
                    "name": "Default",
                    "value": "default"
                },
                {
                    "name": "Notify",
                    "value": "notify"
                },
                {
                    "name": "Ignore",
                    "value": "ignore"
                }
            ]
        },
        "render:services:ServiceSuspended": {
            "type": "string",
            "enum": [
                {
                    "name": "Suspended",
                    "value": "suspended"
                },
                {
                    "name": "NotSuspended",
                    "value": "not_suspended"
                }
            ]
        },
        "render:services:ServiceSuspendersItem": {
            "type": "string",
            "enum": [
                {
                    "name": "Admin",
                    "value": "admin"
                },
                {
                    "name": "Billing",
                    "value": "billing"
                },
                {
                    "name": "User",
                    "value": "user"
                },
                {
                    "name": "ParentService",
                    "value": "parent_service"
                },
                {
                    "name": "Unknown",
                    "value": "unknown"
                }
            ]
        },
        "render:services:StaticSiteDetailsCreate": {
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:HeaderInput"
                    }
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "publishPath": {
                    "type": "string",
                    "description": "Defaults to \"public\""
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:StaticSiteDetailsCreatePullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:RouteCreate"
                    }
                }
            },
            "type": "object"
        },
        "render:services:StaticSiteDetailsCreatePullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:StaticSiteDetailsOutput": {
            "properties": {
                "buildCommand": {
                    "type": "string"
                },
                "buildPlan": {
                    "$ref": "#/types/render:services:StaticSiteDetailsOutputBuildPlan",
                    "default": "starter"
                },
                "parentServer": {
                    "$ref": "#/types/render:services:Resource"
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "publishPath": {
                    "type": "string"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:StaticSiteDetailsOutputPullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "buildCommand",
                "buildPlan",
                "publishPath",
                "url"
            ]
        },
        "render:services:StaticSiteDetailsOutputBuildPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Performance",
                    "value": "performance"
                }
            ]
        },
        "render:services:StaticSiteDetailsOutputPullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:StaticSiteOutput": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:StaticSiteDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "static_site"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:services:Status": {
            "type": "string",
            "enum": [
                {
                    "name": "Created",
                    "value": "created"
                },
                {
                    "name": "BuildInProgress",
                    "value": "build_in_progress"
                },
                {
                    "name": "UpdateInProgress",
                    "value": "update_in_progress"
                },
                {
                    "name": "Live",
                    "value": "live"
                },
                {
                    "name": "Deactivated",
                    "value": "deactivated"
                },
                {
                    "name": "BuildFailed",
                    "value": "build_failed"
                },
                {
                    "name": "UpdateFailed",
                    "value": "update_failed"
                },
                {
                    "name": "Canceled",
                    "value": "canceled"
                },
                {
                    "name": "PreDeployInProgress",
                    "value": "pre_deploy_in_progress"
                },
                {
                    "name": "PreDeployFailed",
                    "value": "pre_deploy_failed"
                }
            ]
        },
        "render:services:Trigger": {
            "type": "string",
            "enum": [
                {
                    "name": "Api",
                    "value": "api"
                },
                {
                    "name": "BlueprintSync",
                    "value": "blueprint_sync"
                },
                {
                    "name": "DeployHook",
                    "value": "deploy_hook"
                },
                {
                    "name": "DeployedByRender",
                    "value": "deployed_by_render"
                },
                {
                    "name": "Manual",
                    "value": "manual"
                },
                {
                    "name": "Other",
                    "value": "other"
                },
                {
                    "name": "NewCommit",
                    "value": "new_commit"
                },
                {
                    "name": "Rollback",
                    "value": "rollback"
                },
                {
                    "name": "ServiceResumed",
                    "value": "service_resumed"
                },
                {
                    "name": "ServiceUpdated",
                    "value": "service_updated"
                }
            ]
        },
        "render:services:Type": {
            "type": "string",
            "enum": [
                {
                    "name": "Redirect",
                    "value": "redirect"
                },
                {
                    "name": "Rewrite",
                    "value": "rewrite"
                }
            ]
        },
        "render:services:WebServiceDetailsCreate": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscaling"
                },
                "disk": {
                    "$ref": "#/types/render:services:ServiceDisk"
                },
                "env": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreateEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetailsCreate"
                },
                "healthCheckPath": {
                    "type": "string"
                },
                "maintenanceMode": {
                    "$ref": "#/types/render:services:MaintenanceMode"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "Defaults to 1"
                },
                "plan": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreatePlan",
                    "description": "Defaults to \"starter\"",
                    "default": "starter"
                },
                "preDeployCommand": {
                    "type": "string"
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreatePullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreateRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreateRuntime",
                    "description": "Runtime"
                }
            },
            "type": "object",
            "required": [
                "runtime"
            ]
        },
        "render:services:WebServiceDetailsCreateEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:WebServiceDetailsCreatePlan": {
            "description": "Defaults to \"starter\"",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                }
            ]
        },
        "render:services:WebServiceDetailsCreatePullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:WebServiceDetailsCreateRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:WebServiceDetailsCreateRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:WebServiceDetailsOutput": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputAutoscalingProperties"
                },
                "buildPlan": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputBuildPlan",
                    "default": "starter"
                },
                "disk": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputDiskProperties"
                },
                "env": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputEnv",
                    "description": "This field has been deprecated, runtime should be used in its place."
                },
                "envSpecificDetails": {
                    "$ref": "#/types/render:services:EnvSpecificDetails"
                },
                "healthCheckPath": {
                    "type": "string"
                },
                "maintenanceMode": {
                    "$ref": "#/types/render:services:MaintenanceMode"
                },
                "maxShutdownDelaySeconds": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.",
                    "default": 30
                },
                "numInstances": {
                    "type": "integer",
                    "description": "For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service."
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServerPort"
                    }
                },
                "parentServer": {
                    "$ref": "#/types/render:services:Resource"
                },
                "plan": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputPlan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "previews": {
                    "$ref": "#/types/render:services:Previews"
                },
                "pullRequestPreviewsEnabled": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputPullRequestPreviewsEnabled",
                    "description": "This field has been deprecated. previews.generation should be used in its place.",
                    "default": "no"
                },
                "region": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputRegion",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "runtime": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputRuntime",
                    "description": "Runtime"
                },
                "sshAddress": {
                    "type": "string",
                    "description": "The SSH address for the service. Only present for services that have SSH enabled."
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "buildPlan",
                "env",
                "envSpecificDetails",
                "healthCheckPath",
                "numInstances",
                "openPorts",
                "plan",
                "region",
                "runtime",
                "url"
            ]
        },
        "render:services:WebServiceDetailsOutputAutoscalingProperties": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputAutoscalingPropertiesCriteriaProperties"
                },
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "max": {
                    "type": "integer",
                    "description": "The maximum number of instances for the service"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of instances for the service"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "enabled",
                "max",
                "min"
            ]
        },
        "render:services:WebServiceDetailsOutputAutoscalingPropertiesCriteriaProperties": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutputAutoscalingPropertiesCriteriaPropertiesCpuProperties"
                },
                "memory": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscalingpropertiescriteriapropertiescpu"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ]
        },
        "render:services:WebServiceDetailsOutputAutoscalingPropertiesCriteriaPropertiesCpuProperties": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "percentage": {
                    "type": "integer",
                    "description": "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "percentage"
            ]
        },
        "render:services:WebServiceDetailsOutputBuildPlan": {
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "Performance",
                    "value": "performance"
                }
            ]
        },
        "render:services:WebServiceDetailsOutputDiskProperties": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "mountPath",
                "name",
                "sizeGB"
            ]
        },
        "render:services:WebServiceDetailsOutputEnv": {
            "description": "This field has been deprecated, runtime should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:WebServiceDetailsOutputPlan": {
            "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.",
            "type": "string",
            "enum": [
                {
                    "name": "Starter",
                    "value": "starter"
                },
                {
                    "name": "StarterPlus",
                    "value": "starter_plus"
                },
                {
                    "name": "Standard",
                    "value": "standard"
                },
                {
                    "name": "StandardPlus",
                    "value": "standard_plus"
                },
                {
                    "name": "Pro",
                    "value": "pro"
                },
                {
                    "name": "ProPlus",
                    "value": "pro_plus"
                },
                {
                    "name": "ProMax",
                    "value": "pro_max"
                },
                {
                    "name": "ProUltra",
                    "value": "pro_ultra"
                },
                {
                    "name": "Free",
                    "value": "free"
                },
                {
                    "name": "Custom",
                    "value": "custom"
                }
            ]
        },
        "render:services:WebServiceDetailsOutputPullRequestPreviewsEnabled": {
            "description": "This field has been deprecated. previews.generation should be used in its place.",
            "type": "string",
            "enum": [
                {
                    "name": "Yes",
                    "value": "yes"
                },
                {
                    "name": "No",
                    "value": "no"
                }
            ]
        },
        "render:services:WebServiceDetailsOutputRegion": {
            "description": "Defaults to \"oregon\"",
            "type": "string",
            "enum": [
                {
                    "name": "Frankfurt",
                    "value": "frankfurt"
                },
                {
                    "name": "Oregon",
                    "value": "oregon"
                },
                {
                    "name": "Ohio",
                    "value": "ohio"
                },
                {
                    "name": "Singapore",
                    "value": "singapore"
                },
                {
                    "name": "Virginia",
                    "value": "virginia"
                }
            ]
        },
        "render:services:WebServiceDetailsOutputRuntime": {
            "description": "Runtime",
            "type": "string",
            "enum": [
                {
                    "name": "Docker",
                    "value": "docker"
                },
                {
                    "name": "Elixir",
                    "value": "elixir"
                },
                {
                    "name": "Go",
                    "value": "go"
                },
                {
                    "name": "Node",
                    "value": "node"
                },
                {
                    "name": "Python",
                    "value": "python"
                },
                {
                    "name": "Ruby",
                    "value": "ruby"
                },
                {
                    "name": "Rust",
                    "value": "rust"
                },
                {
                    "name": "Image",
                    "value": "image"
                }
            ]
        },
        "render:services:WebServiceDetailspropertiesautoscaling": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscalingCriteriaProperties"
                },
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "max": {
                    "type": "integer",
                    "description": "The maximum number of instances for the service"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of instances for the service"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "enabled",
                "max",
                "min"
            ]
        },
        "render:services:WebServiceDetailspropertiesautoscalingCriteriaProperties": {
            "properties": {
                "cpu": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscalingCriteriaPropertiesCpuProperties"
                },
                "memory": {
                    "$ref": "#/types/render:services:WebServiceDetailspropertiesautoscalingpropertiescriteriapropertiescpu"
                }
            },
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ]
        },
        "render:services:WebServiceDetailspropertiesautoscalingCriteriaPropertiesCpuProperties": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "percentage": {
                    "type": "integer",
                    "description": "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "percentage"
            ]
        },
        "render:services:WebServiceDetailspropertiesautoscalingpropertiescriteriapropertiescpu": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "percentage": {
                    "type": "integer",
                    "description": "Determines when your service will be scaled. If the average resource utilization is significantly above/below the target, we will increase/decrease the number of instances.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "percentage"
            ]
        },
        "render:services:WebServiceDetailspropertiesdisk": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "mountPath",
                "name",
                "sizeGB"
            ]
        },
        "render:services:WebServiceOutput": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "environmentId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "web_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "autoDeploy",
                "createdAt",
                "dashboardUrl",
                "id",
                "name",
                "notifyOnFail",
                "ownerId",
                "rootDir",
                "slug",
                "suspended",
                "suspenders",
                "updatedAt"
            ]
        },
        "render:users:User": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "email",
                "name"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the render package.",
        "type": "object",
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The Render API key.",
                "defaultInfo": {
                    "environment": [
                        "RENDER_APIKEY"
                    ]
                },
                "language": {
                    "csharp": {
                        "name": "ApiKey"
                    }
                },
                "secret": true
            }
        }
    },
    "resources": {
        "render:cron-jobs:RunCronJob": {
            "properties": {
                "canceledBy": {
                    "type": "string",
                    "description": "user who cancelled the cron job run"
                },
                "finishedAt": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:cron-jobs:Status"
                },
                "triggeredBy": {
                    "type": "string",
                    "description": "user who triggered the cron job run"
                }
            },
            "type": "object",
            "required": [
                "status"
            ],
            "inputProperties": {
                "cronJobId": {
                    "type": "string",
                    "description": "The ID of the cron job"
                }
            }
        },
        "render:disks:Disk": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "mountPath",
                "name",
                "serviceId",
                "sizeGB",
                "updatedAt"
            ],
            "inputProperties": {
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "mountPath",
                "serviceId",
                "sizeGB"
            ]
        },
        "render:disks:RestoreSnapshot": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "instanceId": {
                    "type": "string",
                    "description": "When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately."
                },
                "mountPath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "sizeGB": {
                    "type": "integer"
                },
                "snapshotKey": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "mountPath",
                "name",
                "sizeGB",
                "snapshotKey",
                "updatedAt"
            ],
            "inputProperties": {
                "diskId": {
                    "type": "string",
                    "description": "The ID of the disk"
                },
                "instanceId": {
                    "type": "string",
                    "description": "When a service with a disk is scaled, the instanceId is used to identify the instance that the disk is attached to. Each instance's disks get their own snapshots, and can be restored separately."
                },
                "snapshotKey": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "snapshotKey"
            ]
        },
        "render:env-groups:EnvGroup": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:EnvVar"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:SecretFile"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:ServiceLink"
                    },
                    "description": "List of serviceIds linked to the envGroup"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envVars",
                "name",
                "ownerId"
            ],
            "inputProperties": {
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:SecretFileInput"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "envVars",
                "ownerId"
            ]
        },
        "render:env-groups:LinkServiceToEnvGroup": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:EnvVar"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:SecretFile"
                    }
                },
                "serviceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:env-groups:ServiceLink"
                    },
                    "description": "List of serviceIds linked to the envGroup"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "envGroupId": {
                    "type": "string",
                    "description": "Filter for resources that belong to an environment group"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:environments:Environment": {
            "properties": {
                "databasesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "protectedStatus": {
                    "$ref": "#/types/render:environments:ProtectedStatus",
                    "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments."
                },
                "redisIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "databasesIds",
                "envGroupIds",
                "name",
                "projectId",
                "protectedStatus",
                "redisIds",
                "serviceIds"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "protectedStatus": {
                    "$ref": "#/types/render:environments:ProtectedStatus",
                    "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments."
                }
            },
            "requiredInputs": [
                "projectId"
            ]
        },
        "render:environments:ResourcesToEnvironment": {
            "properties": {
                "databasesIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "protectedStatus": {
                    "$ref": "#/types/render:environments:ProtectedStatus",
                    "description": "Indicates whether an environment is `unprotected` or `protected`. Only admin users can perform destructive actions in `protected` environments."
                },
                "redisIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "databasesIds",
                "envGroupIds",
                "name",
                "projectId",
                "protectedStatus",
                "redisIds",
                "resourceIds",
                "serviceIds"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "string"
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "resourceIds"
            ]
        },
        "render:postgres:FailoverPostgres": {
            "type": "object",
            "inputProperties": {
                "postgresId": {
                    "type": "string"
                }
            }
        },
        "render:postgres:Postgres": {
            "description": "Input for creating a database",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the PostgreSQL instance in the Render Dashboard"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseUser": {
                    "type": "string"
                },
                "datadogAPIKey": {
                    "type": "string"
                },
                "diskSizeGB": {
                    "type": "integer"
                },
                "enableHighAvailability": {
                    "type": "boolean",
                    "default": false
                },
                "environmentId": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The time at which the database will be expire. Applies to free tier databases only."
                },
                "highAvailabilityEnabled": {
                    "type": "boolean"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:CidrBlockAndDescription"
                    }
                },
                "maintenance": {
                    "$ref": "#/types/render:postgres:RedisDetailpropertiesmaintenance"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/types/render:postgres:Owner"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner (team or personal user) whose resources should be returned"
                },
                "plan": {
                    "$ref": "#/types/render:postgres:Plan"
                },
                "primaryPostgresID": {
                    "type": "string"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:ReadReplica"
                    }
                },
                "region": {
                    "$ref": "#/types/render:postgres:Region",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "role": {
                    "$ref": "#/types/render:postgres:Role"
                },
                "status": {
                    "$ref": "#/types/render:postgres:Status"
                },
                "suspended": {
                    "$ref": "#/types/render:postgres:Suspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:SuspendersItem"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/types/render:postgres:Version",
                    "description": "The PostgreSQL version"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dashboardUrl",
                "databaseName",
                "databaseUser",
                "highAvailabilityEnabled",
                "ipAllowList",
                "name",
                "owner",
                "ownerId",
                "plan",
                "readReplicas",
                "region",
                "role",
                "status",
                "suspended",
                "suspenders",
                "updatedAt",
                "version"
            ],
            "inputProperties": {
                "databaseName": {
                    "type": "string",
                    "default": "randomly generated"
                },
                "databaseUser": {
                    "type": "string",
                    "default": "randomly generated"
                },
                "datadogAPIKey": {
                    "type": "string"
                },
                "diskSizeGB": {
                    "type": "integer",
                    "description": "The number of gigabytes of disk space to allocate for the database"
                },
                "enableHighAvailability": {
                    "type": "boolean",
                    "default": false
                },
                "environmentId": {
                    "type": "string"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:CidrBlockAndDescription"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database as it will appear in the Render Dashboard"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner (team or personal user) whose resources should be returned"
                },
                "plan": {
                    "$ref": "#/types/render:postgres:Plan"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:ReadReplicaInput"
                    }
                },
                "region": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/types/render:postgres:Version",
                    "description": "The PostgreSQL version"
                }
            },
            "requiredInputs": [
                "ownerId",
                "plan",
                "version"
            ]
        },
        "render:postgres:PostgresBackup": {
            "type": "object",
            "inputProperties": {
                "postgresId": {
                    "type": "string"
                }
            }
        },
        "render:postgres:RecoverPostgres": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the PostgreSQL instance in the Render Dashboard"
                },
                "databaseName": {
                    "type": "string"
                },
                "databaseUser": {
                    "type": "string"
                },
                "datadogApiKey": {
                    "type": "string",
                    "description": "Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database."
                },
                "diskSizeGB": {
                    "type": "integer"
                },
                "environmentId": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "The time at which the database will be expire. Applies to free tier databases only."
                },
                "highAvailabilityEnabled": {
                    "type": "boolean"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:CidrBlockAndDescription"
                    }
                },
                "maintenance": {
                    "$ref": "#/types/render:postgres:RedisDetailpropertiesmaintenance"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/types/render:postgres:Owner"
                },
                "plan": {
                    "$ref": "#/types/render:postgres:Plan"
                },
                "primaryPostgresID": {
                    "type": "string"
                },
                "readReplicas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:ReadReplica"
                    }
                },
                "region": {
                    "$ref": "#/types/render:postgres:Region",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "restoreName": {
                    "type": "string",
                    "description": "Name of the new database."
                },
                "restoreTime": {
                    "type": "string",
                    "description": "The point in time to restore the database to. See `/recovery-info` for restore availability"
                },
                "role": {
                    "$ref": "#/types/render:postgres:Role"
                },
                "status": {
                    "$ref": "#/types/render:postgres:Status"
                },
                "suspended": {
                    "$ref": "#/types/render:postgres:RecoverPostgresSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:postgres:SuspendersItem"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/types/render:postgres:Version",
                    "description": "The PostgreSQL version"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "dashboardUrl",
                "databaseName",
                "databaseUser",
                "highAvailabilityEnabled",
                "ipAllowList",
                "name",
                "owner",
                "plan",
                "readReplicas",
                "region",
                "restoreTime",
                "role",
                "status",
                "suspended",
                "suspenders",
                "updatedAt",
                "version"
            ],
            "inputProperties": {
                "datadogApiKey": {
                    "type": "string",
                    "description": "Datadog API key to use for monitoring the new database. Defaults to the API key of the original database. Use an empty string to prevent copying of the API key to the new database."
                },
                "environmentId": {
                    "type": "string",
                    "description": "The environment to create the new database in. Defaults to the environment of the original database."
                },
                "plan": {
                    "type": "string",
                    "description": "The plan to use for the new database. Defaults to the same plan as the original database. Cannot be a lower tier plan than the original database."
                },
                "postgresId": {
                    "type": "string"
                },
                "restoreName": {
                    "type": "string",
                    "description": "Name of the new database."
                },
                "restoreTime": {
                    "type": "string",
                    "description": "The point in time to restore the database to. See `/recovery-info` for restore availability"
                }
            },
            "requiredInputs": [
                "restoreTime"
            ]
        },
        "render:postgres:RestartPostgres": {
            "type": "object",
            "inputProperties": {
                "postgresId": {
                    "type": "string"
                }
            }
        },
        "render:postgres:ResumePostgres": {
            "type": "object",
            "inputProperties": {
                "postgresId": {
                    "type": "string"
                }
            }
        },
        "render:postgres:SuspendPostgres": {
            "type": "object",
            "inputProperties": {
                "postgresId": {
                    "type": "string"
                }
            }
        },
        "render:projects:Project": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The environments associated with the project"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:projects:ProjectCreateEnvironmentInput"
                    },
                    "description": "The environments to create when creating the project"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project"
                },
                "owner": {
                    "$ref": "#/types/render:projects:Owner"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner that the project belongs to"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "environmentIds",
                "environments",
                "name",
                "owner",
                "ownerId",
                "updatedAt"
            ],
            "inputProperties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:projects:ProjectCreateEnvironmentInput"
                    },
                    "description": "The environments to create when creating the project"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner that the project belongs to"
                }
            },
            "requiredInputs": [
                "environments",
                "ownerId"
            ]
        },
        "render:redis:Redis": {
            "description": "Input type for creating a Redis instance",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation time of the Redis instance"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the environment the Redis instance is associated with"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:redis:CidrBlockAndDescription"
                    },
                    "description": "The IP allow list for the Redis instance"
                },
                "maintenance": {
                    "$ref": "#/types/render:redis:MaintenanceProperties"
                },
                "maxmemoryPolicy": {
                    "$ref": "#/types/render:redis:MaxmemoryPolicy",
                    "description": "The eviction policy for the Redis instance"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance"
                },
                "options": {
                    "$ref": "#/types/render:redis:RedisOptions",
                    "description": "Options for a Redis instance"
                },
                "owner": {
                    "$ref": "#/types/render:redis:Owner"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner of the Redis instance"
                },
                "plan": {
                    "$ref": "#/types/render:redis:Plan"
                },
                "region": {
                    "$ref": "#/types/render:redis:Region",
                    "description": "Defaults to \"oregon\"",
                    "default": "oregon"
                },
                "status": {
                    "$ref": "#/types/render:redis:Status"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last updated time of the Redis instance"
                },
                "version": {
                    "type": "string",
                    "description": "The version of Redis"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "ipAllowList",
                "name",
                "options",
                "owner",
                "ownerId",
                "plan",
                "region",
                "status",
                "updatedAt",
                "version"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "string"
                },
                "ipAllowList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:redis:CidrBlockAndDescription"
                    }
                },
                "maxmemoryPolicy": {
                    "$ref": "#/types/render:redis:MaxmemoryPolicy",
                    "description": "The eviction policy for the Redis instance"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Redis instance"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the owner of the Redis instance"
                },
                "plan": {
                    "$ref": "#/types/render:redis:Plan"
                },
                "region": {
                    "type": "string",
                    "description": "The region where the Redis instance is located"
                }
            },
            "requiredInputs": [
                "ownerId",
                "plan"
            ]
        },
        "render:registrycredentials:RegistryCredential": {
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Descriptive name for this credential"
                },
                "ownerId": {
                    "type": "string"
                },
                "registry": {
                    "$ref": "#/types/render:registrycredentials:Registry",
                    "description": "The registry to use this credential with"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last updated time for the credential"
                },
                "username": {
                    "type": "string",
                    "description": "The username associated with the credential"
                }
            },
            "type": "object",
            "required": [
                "authToken",
                "name",
                "ownerId",
                "registry",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "authToken": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "registry": {
                    "$ref": "#/types/render:registrycredentials:Registry",
                    "description": "The registry to use this credential with"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "authToken",
                "ownerId",
                "registry",
                "username"
            ]
        },
        "render:services:AutoscaleService": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/render:services:CriteriaProperties"
                },
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "max": {
                    "type": "integer",
                    "description": "The maximum number of instances for the service"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of instances for the service"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "enabled",
                "max",
                "min"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/render:services:CriteriaProperties"
                },
                "enabled": {
                    "type": "boolean",
                    "default": false
                },
                "max": {
                    "type": "integer",
                    "description": "The maximum number of instances for the service"
                },
                "min": {
                    "type": "integer",
                    "description": "The minimum number of instances for the service"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            },
            "requiredInputs": [
                "criteria",
                "enabled",
                "max",
                "min"
            ]
        },
        "render:services:BackgroundWorker": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "background_worker"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceCreateAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:BackgroundWorkerDetailsCreate"
                },
                "type": {
                    "type": "string",
                    "default": "background_worker"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId"
            ]
        },
        "render:services:CancelDeploy": {
            "properties": {
                "commit": {
                    "$ref": "#/types/render:services:CommitProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:ImageProperties",
                    "description": "Image information used when creating the deploy. Not present for Git-backed deploys"
                },
                "status": {
                    "$ref": "#/types/render:services:Status"
                },
                "trigger": {
                    "$ref": "#/types/render:services:Trigger"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "deployId": {
                    "type": "string",
                    "description": "The ID of the deploy"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:CancelJob": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "planId": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:services:CancelJobStatus"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "planId",
                "serviceId",
                "startCommand"
            ],
            "inputProperties": {
                "jobId": {
                    "type": "string",
                    "description": "The ID of the job"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:CronJob": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:CronJobDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "cron_job"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceCreateAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:CronJobDetailsCreate"
                },
                "type": {
                    "type": "string",
                    "default": "cron_job"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId"
            ]
        },
        "render:services:CustomDomain": {
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:Deploy": {
            "properties": {
                "clearCache": {
                    "$ref": "#/types/render:services:ClearCache",
                    "description": "If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.",
                    "default": "do_not_clear"
                },
                "commit": {
                    "$ref": "#/types/render:services:CommitProperties"
                },
                "commitId": {
                    "type": "string",
                    "description": "The SHA of a specific Git commit to deploy for a service. Defaults to the latest commit on the service's connected branch.\n\nNote that deploying a specific commit with this endpoint does not disable autodeploys for the service.\n\nYou can toggle autodeploys for your service with the [Update service](https://api-docs.render.com/reference/update-service) endpoint or in the Render Dashboard.\n\nNot supported for cron jobs.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:ImageProperties",
                    "description": "Image information used when creating the deploy. Not present for Git-backed deploys"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The URL of the image to deploy for an image-backed service.\n\nThe host, repository, and image name all must match the currently configured image for the service.\n"
                },
                "status": {
                    "$ref": "#/types/render:services:Status"
                },
                "trigger": {
                    "$ref": "#/types/render:services:Trigger"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "clearCache": {
                    "$ref": "#/types/render:services:ClearCache",
                    "description": "If `clear`, Render clears the service's build cache before deploying. This can be useful if you're experiencing issues with your build.",
                    "default": "do_not_clear"
                },
                "commitId": {
                    "type": "string",
                    "description": "The SHA of a specific Git commit to deploy for a service. Defaults to the latest commit on the service's connected branch.\n\nNote that deploying a specific commit with this endpoint does not disable autodeploys for the service.\n\nYou can toggle autodeploys for your service with the [Update service](https://api-docs.render.com/reference/update-service) endpoint or in the Render Dashboard.\n\nNot supported for cron jobs.\n"
                },
                "imageUrl": {
                    "type": "string",
                    "description": "The URL of the image to deploy for an image-backed service.\n\nThe host, repository, and image name all must match the currently configured image for the service.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:EnvVarsForService": {
            "properties": {
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                }
            },
            "type": "object",
            "inputProperties": {
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:Header": {
            "properties": {
                "headers": {
                    "$ref": "#/types/render:services:Header"
                },
                "name": {
                    "type": "string",
                    "description": "Header name"
                },
                "path": {
                    "type": "string",
                    "description": "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths."
                },
                "value": {
                    "type": "string",
                    "description": "Header value"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path",
                "value"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Header name"
                },
                "path": {
                    "type": "string",
                    "description": "The request path to add the header to. Wildcards will cause headers to be applied to all matching paths."
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                },
                "value": {
                    "type": "string",
                    "description": "Header value"
                }
            },
            "requiredInputs": [
                "path",
                "value"
            ]
        },
        "render:services:Job": {
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "finishedAt": {
                    "type": "string"
                },
                "planId": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startCommand": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/types/render:services:JobStatus"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "planId",
                "serviceId",
                "startCommand"
            ],
            "inputProperties": {
                "planId": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                },
                "startCommand": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "startCommand"
            ]
        },
        "render:services:PreviewService": {
            "properties": {
                "deployId": {
                    "type": "string"
                },
                "imagePath": {
                    "type": "string",
                    "description": "Must be either a full URL or the relative path to an image. If a relative path, Render uses the base service's image URL as its root. For example, if the base service's image URL is `docker.io/library/nginx:latest`, then valid values are: `docker.io/library/nginx:\u003cany tag or SHA\u003e`, `library/nginx:\u003cany tag or SHA\u003e`, or `nginx:\u003cany tag or SHA\u003e`. Note that the path must match (only the tag or SHA can vary)."
                },
                "name": {
                    "type": "string",
                    "description": "A name for the service preview instance. If not specified, Render generates the name using the base service's name and the specified tag or SHA."
                },
                "plan": {
                    "$ref": "#/types/render:services:Plan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "service": {
                    "$ref": "#/types/render:services:Service"
                }
            },
            "type": "object",
            "required": [
                "imagePath"
            ],
            "inputProperties": {
                "imagePath": {
                    "type": "string",
                    "description": "Must be either a full URL or the relative path to an image. If a relative path, Render uses the base service's image URL as its root. For example, if the base service's image URL is `docker.io/library/nginx:latest`, then valid values are: `docker.io/library/nginx:\u003cany tag or SHA\u003e`, `library/nginx:\u003cany tag or SHA\u003e`, or `nginx:\u003cany tag or SHA\u003e`. Note that the path must match (only the tag or SHA can vary)."
                },
                "name": {
                    "type": "string",
                    "description": "A name for the service preview instance. If not specified, Render generates the name using the base service's name and the specified tag or SHA."
                },
                "plan": {
                    "$ref": "#/types/render:services:Plan",
                    "description": "The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type."
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            },
            "requiredInputs": [
                "imagePath"
            ]
        },
        "render:services:PrivateService": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "private_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceCreateAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:PrivateServiceDetailsCreate"
                },
                "type": {
                    "type": "string",
                    "default": "private_service"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId"
            ]
        },
        "render:services:RefreshCustomDomain": {
            "type": "object",
            "inputProperties": {
                "customDomainIdOrName": {
                    "type": "string",
                    "description": "The ID or name of the custom domain"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:RestartService": {
            "type": "object",
            "inputProperties": {
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:RollbackDeploy": {
            "properties": {
                "commit": {
                    "$ref": "#/types/render:services:CommitProperties"
                },
                "createdAt": {
                    "type": "string"
                },
                "deployId": {
                    "type": "string",
                    "description": "The ID of the deploy to roll back to"
                },
                "finishedAt": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:ImageProperties",
                    "description": "Image information used when creating the deploy. Not present for Git-backed deploys"
                },
                "status": {
                    "$ref": "#/types/render:services:Status"
                },
                "trigger": {
                    "$ref": "#/types/render:services:Trigger"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deployId"
            ],
            "inputProperties": {
                "deployId": {
                    "type": "string",
                    "description": "The ID of the deploy to roll back to"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            },
            "requiredInputs": [
                "deployId"
            ]
        },
        "render:services:Route": {
            "properties": {
                "destination": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer",
                    "description": "Redirect and Rewrite Rules are applied in priority order starting at 0"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:services:Type"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "priority",
                "source",
                "type"
            ],
            "inputProperties": {
                "destination": {
                    "type": "string"
                },
                "priority": {
                    "type": "integer",
                    "description": "Redirect and Rewrite Rules are applied in priority order starting at 0. Defaults to last in the priority list."
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                },
                "source": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/types/render:services:Type"
                }
            },
            "requiredInputs": [
                "destination",
                "source",
                "type"
            ]
        },
        "render:services:ScaleService": {
            "properties": {
                "numInstances": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "numInstances"
            ],
            "inputProperties": {
                "numInstances": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            },
            "requiredInputs": [
                "numInstances"
            ]
        },
        "render:services:SecretFilesForService": {
            "properties": {
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                }
            },
            "type": "object",
            "inputProperties": {
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:StaticSite": {
            "description": "\n\n{{% examples %}}\n\n## Example Usage\n\n{{% example %}}\n\n### Create a StaticSite service\n\n```typescript\nimport * as render from \"@cloudyskysoftware/render\";\n\nconst ownerId = render.owners\n    .listOwnersOutput()\n    .apply(\n        (result) =\u003e\n            result.items.filter(\n                (i) =\u003e i.owner?.email === \"OWNER_EMAIL\"\n            )[0].owner?.id || \"\"\n    );\n\nconst staticSite = new render.services.StaticSite(\"staticsite\", {\n    name: \"My custom static site\",\n    ownerId,\n    repo: \"https://github.com/cloudy-sky-software/test-static-site\",\n    autoDeploy: \"no\",\n    branch: \"main\",\n    serviceDetails: {\n    publishPath: \"public\",\n    },\n    type: \"static_site\",\n});\n\nexport const url = staticSite.serviceDetails.apply((s) =\u003e s?.url);\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:StaticSiteDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "static_site"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceCreateAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:StaticSiteDetailsCreate"
                },
                "type": {
                    "type": "string",
                    "default": "static_site"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId"
            ]
        },
        "render:services:SuspendService": {
            "type": "object",
            "inputProperties": {
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service"
                }
            }
        },
        "render:services:WebService": {
            "properties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "createdAt": {
                    "type": "string"
                },
                "dashboardUrl": {
                    "type": "string",
                    "description": "The URL to view the service in the Render Dashboard"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "environmentId": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "imagePath": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notifyOnFail": {
                    "$ref": "#/types/render:services:ServiceNotifyOnFail"
                },
                "ownerId": {
                    "type": "string"
                },
                "registryCredential": {
                    "$ref": "#/types/render:services:RegistryCredentialSummary"
                },
                "repo": {
                    "type": "string"
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:WebServiceDetailsOutput"
                },
                "slug": {
                    "type": "string"
                },
                "suspended": {
                    "$ref": "#/types/render:services:ServiceSuspended"
                },
                "suspenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:ServiceSuspendersItem"
                    }
                },
                "type": {
                    "type": "string",
                    "default": "web_service"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "type": "object",
            "inputProperties": {
                "autoDeploy": {
                    "$ref": "#/types/render:services:ServiceCreateAutoDeploy",
                    "default": "yes"
                },
                "branch": {
                    "type": "string",
                    "description": "If left empty, this will fall back to the default branch of the repository"
                },
                "buildFilter": {
                    "$ref": "#/types/render:services:BuildFilter"
                },
                "envVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:EnvVarInput"
                    }
                },
                "image": {
                    "$ref": "#/types/render:services:Image"
                },
                "name": {
                    "type": "string"
                },
                "ownerId": {
                    "type": "string"
                },
                "repo": {
                    "type": "string",
                    "description": "Do not include the branch in the repo string. You can instead supply a 'branch' parameter."
                },
                "rootDir": {
                    "type": "string"
                },
                "secretFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/render:services:SecretFileInput"
                    }
                },
                "serviceDetails": {
                    "$ref": "#/types/render:services:WebServiceDetailsCreate"
                },
                "type": {
                    "type": "string",
                    "default": "web_service"
                }
            },
            "requiredInputs": [
                "name",
                "ownerId"
            ]
        }
    },
    "functions": {
        "render:blueprints:getBlueprint": {
            "inputs": {
                "properties": {
                    "blueprintId": {
                        "type": "string",
                        "description": "The ID of the blueprint"
                    }
                },
                "required": [
                    "blueprintId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:blueprints:GetBlueprintProperties"
            }
        },
        "render:blueprints:listBlueprintSyncs": {
            "inputs": {
                "properties": {
                    "blueprintId": {
                        "type": "string",
                        "description": "The ID of the blueprint"
                    }
                },
                "required": [
                    "blueprintId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:blueprints:SyncWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:blueprints:listBlueprints": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:blueprints:BlueprintWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:disks:getDisk": {
            "inputs": {
                "properties": {
                    "diskId": {
                        "type": "string",
                        "description": "The ID of the disk"
                    }
                },
                "required": [
                    "diskId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:disks:DiskWithCursorpropertiesdisk"
            }
        },
        "render:disks:listDisks": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:disks:DiskWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:env-groups:getEnvGroup": {
            "inputs": {
                "properties": {
                    "envGroupId": {
                        "type": "string",
                        "description": "Filter for resources that belong to an environment group"
                    }
                },
                "required": [
                    "envGroupId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:env-groups:EnvGroup"
            }
        },
        "render:env-groups:getEnvGroupEnvVar": {
            "inputs": {
                "properties": {
                    "envGroupId": {
                        "type": "string",
                        "description": "Filter for resources that belong to an environment group"
                    },
                    "envVarKey": {
                        "type": "string",
                        "description": "The name of the environment variable"
                    }
                },
                "required": [
                    "envGroupId",
                    "envVarKey"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:env-groups:EnvVar"
            }
        },
        "render:env-groups:getEnvGroupSecretFile": {
            "inputs": {
                "properties": {
                    "envGroupId": {
                        "type": "string",
                        "description": "Filter for resources that belong to an environment group"
                    },
                    "secretFileName": {
                        "type": "string",
                        "description": "The name of the secret file"
                    }
                },
                "required": [
                    "envGroupId",
                    "secretFileName"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:env-groups:SecretFile"
            }
        },
        "render:env-groups:listEnvGroups": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:env-groups:EnvGroupMeta"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:environments:getEnvironment": {
            "inputs": {
                "properties": {
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:environments:Environment"
            }
        },
        "render:environments:listEnvironments": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:environments:EnvironmentWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:logs:getOwnerLogStream": {
            "inputs": {
                "properties": {
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of the owner (team or personal user) whose log streams should be returned"
                    }
                },
                "required": [
                    "ownerId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:logs:GetOwnerLogStreamProperties"
            }
        },
        "render:logs:getResourceLogStream": {
            "inputs": {
                "properties": {
                    "resourceId": {
                        "type": "string",
                        "description": "The ID of the resource (server, cron job, postgres, or redis) whose log streams should be returned"
                    }
                },
                "required": [
                    "resourceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:logs:GetResourceLogStreamProperties"
            }
        },
        "render:logs:listResourceLogStreams": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:logs:paths1logs1streams1resource17BresourceId7Dgetresponses200contentapplication1jsonschema"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:metrics:listActiveConnections": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:metrics:ListActiveConnectionsItemProperties"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:metrics:listReplicationLag": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:metrics:ListReplicationLagItemProperties"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:notification-settings:getOwnerNotificationSetting": {
            "inputs": {
                "properties": {
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of the owner (team or personal user) whose resources should be returned"
                    }
                },
                "required": [
                    "ownerId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:notification-settings:GetOwnerNotificationSettingProperties"
            }
        },
        "render:notification-settings:getServiceNotificationOverride": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:notification-settings:GetServiceNotificationOverrideProperties"
            }
        },
        "render:notification-settings:listNotificationOverrides": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:notification-settings:NotificationOverrideWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:owners:getOwner": {
            "inputs": {
                "properties": {
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of the user or team"
                    }
                },
                "required": [
                    "ownerId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:owners:Owner"
            }
        },
        "render:owners:listOwners": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:owners:OwnerWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:postgres:getPostgres": {
            "inputs": {
                "properties": {
                    "postgresId": {
                        "type": "string"
                    }
                },
                "required": [
                    "postgresId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:postgres:PostgresDetail"
            }
        },
        "render:postgres:getPostgresConnectionInfo": {
            "inputs": {
                "properties": {
                    "postgresId": {
                        "type": "string"
                    }
                },
                "required": [
                    "postgresId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:postgres:PostgresConnectionInfo"
            }
        },
        "render:postgres:getPostgresRecoveryInfo": {
            "inputs": {
                "properties": {
                    "postgresId": {
                        "type": "string"
                    }
                },
                "required": [
                    "postgresId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:postgres:GetPostgresRecoveryInfoProperties"
            }
        },
        "render:postgres:listPostgres": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:postgres:PostgresWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:postgres:listPostgresBackup": {
            "inputs": {
                "properties": {
                    "postgresId": {
                        "type": "string"
                    }
                },
                "required": [
                    "postgresId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:postgres:ListPostgresBackupItemProperties"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:projects:getProject": {
            "inputs": {
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:projects:Project"
            }
        },
        "render:projects:listProjects": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:projects:ProjectWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:redis:getRedis": {
            "inputs": {
                "properties": {
                    "redisId": {
                        "type": "string"
                    }
                },
                "required": [
                    "redisId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:redis:RedisDetail"
            }
        },
        "render:redis:getRedisConnectionInfo": {
            "inputs": {
                "properties": {
                    "redisId": {
                        "type": "string"
                    }
                },
                "required": [
                    "redisId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:redis:RedisConnectionInfo"
            }
        },
        "render:redis:listRedis": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:redis:RedisWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:registrycredentials:getRegistryCredential": {
            "inputs": {
                "properties": {
                    "registryCredentialId": {
                        "type": "string",
                        "description": "The ID of the registry credential"
                    }
                },
                "required": [
                    "registryCredentialId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:registrycredentials:RegistryCredential"
            }
        },
        "render:registrycredentials:listRegistryCredentials": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:registrycredentials:RegistryCredential"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:getBackgroundWorker": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:GetBackgroundWorker"
            }
        },
        "render:services:getCronJob": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:GetCronJob"
            }
        },
        "render:services:getCustomDomain": {
            "inputs": {
                "properties": {
                    "customDomainIdOrName": {
                        "type": "string",
                        "description": "The ID or name of the custom domain"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "customDomainIdOrName",
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:CustomDomain"
            }
        },
        "render:services:getDeploy": {
            "inputs": {
                "properties": {
                    "deployId": {
                        "type": "string",
                        "description": "The ID of the deploy"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "deployId",
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:Deploy"
            }
        },
        "render:services:getEnvVar": {
            "inputs": {
                "properties": {
                    "envVarKey": {
                        "type": "string",
                        "description": "The name of the environment variable"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "envVarKey",
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:EnvVar"
            }
        },
        "render:services:getJob": {
            "inputs": {
                "properties": {
                    "jobId": {
                        "type": "string",
                        "description": "The ID of the job"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "jobId",
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:JobWithCursorpropertiesjob"
            }
        },
        "render:services:getPrivateService": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:GetPrivateService"
            }
        },
        "render:services:getSecretFile": {
            "inputs": {
                "properties": {
                    "secretFileName": {
                        "type": "string",
                        "description": "The file name of the secret file"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "secretFileName",
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:SecretFile"
            }
        },
        "render:services:getStaticSite": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:GetStaticSite"
            }
        },
        "render:services:getWebService": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "$ref": "#/types/render:services:GetWebService"
            }
        },
        "render:services:listCustomDomains": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:CustomDomainWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listDeploys": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:DeployWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listEnvVarsForService": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:EnvVarWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listHeaders": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:HeaderWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listJob": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:JobWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listRoutes": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:RouteWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listSecretFilesForService": {
            "inputs": {
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service"
                    }
                },
                "required": [
                    "serviceId"
                ]
            },
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:SecretFileWithCursor"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:services:listServices": {
            "inputs": {},
            "outputs": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/types/render:services:ListServicesResponse"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "items"
                ]
            }
        },
        "render:users:getUser": {
            "inputs": {},
            "outputs": {
                "$ref": "#/types/render:users:User"
            }
        }
    }
}