// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Redis
{
    public static class GetRedisConnectionInfo
    {
        public static Task<GetRedisConnectionInfoResult> InvokeAsync(GetRedisConnectionInfoArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRedisConnectionInfoResult>("render:redis:getRedisConnectionInfo", args ?? new GetRedisConnectionInfoArgs(), options.WithDefaults());

        public static Output<GetRedisConnectionInfoResult> Invoke(GetRedisConnectionInfoInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRedisConnectionInfoResult>("render:redis:getRedisConnectionInfo", args ?? new GetRedisConnectionInfoInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRedisConnectionInfoArgs : global::Pulumi.InvokeArgs
    {
        [Input("redisId", required: true)]
        public string RedisId { get; set; } = null!;

        public GetRedisConnectionInfoArgs()
        {
        }
        public static new GetRedisConnectionInfoArgs Empty => new GetRedisConnectionInfoArgs();
    }

    public sealed class GetRedisConnectionInfoInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("redisId", required: true)]
        public Input<string> RedisId { get; set; } = null!;

        public GetRedisConnectionInfoInvokeArgs()
        {
        }
        public static new GetRedisConnectionInfoInvokeArgs Empty => new GetRedisConnectionInfoInvokeArgs();
    }


    [OutputType]
    public sealed class GetRedisConnectionInfoResult
    {
        public readonly Outputs.RedisConnectionInfo Items;

        [OutputConstructor]
        private GetRedisConnectionInfoResult(Outputs.RedisConnectionInfo items)
        {
            Items = items;
        }
    }
}
