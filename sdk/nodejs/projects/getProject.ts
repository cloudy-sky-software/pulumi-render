// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getProject(args: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("render:projects:getProject", {
        "projectId": args.projectId,
    }, opts);
}

export interface GetProjectArgs {
    projectId: string;
}

/**
 * A project is a collection of environments
 */
export interface GetProjectResult {
    readonly createdAt: string;
    /**
     * The environments associated with the project
     */
    readonly environmentIds: string[];
    /**
     * The ID of the project
     */
    readonly id: string;
    /**
     * The name of the project
     */
    readonly name: string;
    readonly owner: outputs.projects.Owner;
    readonly updatedAt: string;
}
export function getProjectOutput(args: GetProjectOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("render:projects:getProject", {
        "projectId": args.projectId,
    }, opts);
}

export interface GetProjectOutputArgs {
    projectId: pulumi.Input<string>;
}
