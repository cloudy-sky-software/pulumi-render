# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['RunCronJobArgs', 'RunCronJob']

@pulumi.input_type
class RunCronJobArgs:
    def __init__(__self__, *,
                 cron_job_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RunCronJob resource.
        :param pulumi.Input[str] cron_job_id: The ID of the cron job
        """
        if cron_job_id is not None:
            pulumi.set(__self__, "cron_job_id", cron_job_id)

    @property
    @pulumi.getter(name="cronJobId")
    def cron_job_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cron job
        """
        return pulumi.get(self, "cron_job_id")

    @cron_job_id.setter
    def cron_job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_job_id", value)


class RunCronJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_job_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RunCronJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cron_job_id: The ID of the cron job
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RunCronJobArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RunCronJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RunCronJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RunCronJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_job_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RunCronJobArgs.__new__(RunCronJobArgs)

            __props__.__dict__["cron_job_id"] = cron_job_id
            __props__.__dict__["canceled_by"] = None
            __props__.__dict__["finished_at"] = None
            __props__.__dict__["started_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["triggered_by"] = None
        super(RunCronJob, __self__).__init__(
            'render:cron-jobs:RunCronJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RunCronJob':
        """
        Get an existing RunCronJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RunCronJobArgs.__new__(RunCronJobArgs)

        __props__.__dict__["canceled_by"] = None
        __props__.__dict__["finished_at"] = None
        __props__.__dict__["started_at"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["triggered_by"] = None
        return RunCronJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="canceledBy")
    def canceled_by(self) -> pulumi.Output[Optional[str]]:
        """
        user who cancelled the cron job run
        """
        return pulumi.get(self, "canceled_by")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['Status']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="triggeredBy")
    def triggered_by(self) -> pulumi.Output[Optional[str]]:
        """
        user who triggered the cron job run
        """
        return pulumi.get(self, "triggered_by")

