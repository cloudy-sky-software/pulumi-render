# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetBandwidthSourceResult',
    'AwaitableGetBandwidthSourceResult',
    'get_bandwidth_source',
    'get_bandwidth_source_output',
]

@pulumi.output_type
class GetBandwidthSourceResult:
    def __init__(__self__, data=None):
        if data and not isinstance(data, list):
            raise TypeError("Expected argument 'data' to be a list")
        pulumi.set(__self__, "data", data)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[Sequence['outputs.GetBandwidthSourcePropertiesDataItemProperties']]:
        return pulumi.get(self, "data")


class AwaitableGetBandwidthSourceResult(GetBandwidthSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBandwidthSourceResult(
            data=self.data)


def get_bandwidth_source(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBandwidthSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('render:metrics:getBandwidthSource', __args__, opts=opts, typ=GetBandwidthSourceResult).value

    return AwaitableGetBandwidthSourceResult(
        data=pulumi.get(__ret__, 'data'))
def get_bandwidth_source_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBandwidthSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('render:metrics:getBandwidthSource', __args__, opts=opts, typ=GetBandwidthSourceResult)
    return __ret__.apply(lambda __response__: GetBandwidthSourceResult(
        data=pulumi.get(__response__, 'data')))
