// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as blueprints from "./blueprints";
import * as config from "./config";
import * as cronjobs from "./cronjobs";
import * as disks from "./disks";
import * as envgroups from "./envgroups";
import * as environments from "./environments";
import * as metrics from "./metrics";
import * as notificationsettings from "./notificationsettings";
import * as owners from "./owners";
import * as postgres from "./postgres";
import * as projects from "./projects";
import * as redis from "./redis";
import * as registrycredentials from "./registrycredentials";
import * as services from "./services";
import * as types from "./types";

export {
    blueprints,
    config,
    cronjobs,
    disks,
    envgroups,
    environments,
    metrics,
    notificationsettings,
    owners,
    postgres,
    projects,
    redis,
    registrycredentials,
    services,
    types,
};
pulumi.runtime.registerResourcePackage("render", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:render") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
