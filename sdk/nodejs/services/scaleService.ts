// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ScaleService extends pulumi.CustomResource {
    /**
     * Get an existing ScaleService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ScaleService {
        return new ScaleService(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:services:ScaleService';

    /**
     * Returns true if the given object is an instance of ScaleService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScaleService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScaleService.__pulumiType;
    }

    declare public readonly numInstances: pulumi.Output<number>;

    /**
     * Create a ScaleService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScaleServiceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.numInstances === undefined && !opts.urn) {
                throw new Error("Missing required property 'numInstances'");
            }
            resourceInputs["numInstances"] = args?.numInstances;
            resourceInputs["serviceId"] = args?.serviceId;
        } else {
            resourceInputs["numInstances"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScaleService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ScaleService resource.
 */
export interface ScaleServiceArgs {
    numInstances: pulumi.Input<number>;
    /**
     * The ID of the service
     */
    serviceId?: pulumi.Input<string>;
}
