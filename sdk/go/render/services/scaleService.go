// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package services

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ScaleService struct {
	pulumi.CustomResourceState

	NumInstances pulumi.IntOutput `pulumi:"numInstances"`
}

// NewScaleService registers a new resource with the given unique name, arguments, and options.
func NewScaleService(ctx *pulumi.Context,
	name string, args *ScaleServiceArgs, opts ...pulumi.ResourceOption) (*ScaleService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NumInstances == nil {
		return nil, errors.New("invalid value for required argument 'NumInstances'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScaleService
	err := ctx.RegisterResource("render:services:ScaleService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScaleService gets an existing ScaleService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScaleService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScaleServiceState, opts ...pulumi.ResourceOption) (*ScaleService, error) {
	var resource ScaleService
	err := ctx.ReadResource("render:services:ScaleService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScaleService resources.
type scaleServiceState struct {
}

type ScaleServiceState struct {
}

func (ScaleServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleServiceState)(nil)).Elem()
}

type scaleServiceArgs struct {
	NumInstances int `pulumi:"numInstances"`
	// The ID of the service
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ScaleService resource.
type ScaleServiceArgs struct {
	NumInstances pulumi.IntInput
	// The ID of the service
	ServiceId pulumi.StringPtrInput
}

func (ScaleServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scaleServiceArgs)(nil)).Elem()
}

type ScaleServiceInput interface {
	pulumi.Input

	ToScaleServiceOutput() ScaleServiceOutput
	ToScaleServiceOutputWithContext(ctx context.Context) ScaleServiceOutput
}

func (*ScaleService) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleService)(nil)).Elem()
}

func (i *ScaleService) ToScaleServiceOutput() ScaleServiceOutput {
	return i.ToScaleServiceOutputWithContext(context.Background())
}

func (i *ScaleService) ToScaleServiceOutputWithContext(ctx context.Context) ScaleServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleServiceOutput)
}

type ScaleServiceOutput struct{ *pulumi.OutputState }

func (ScaleServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleService)(nil)).Elem()
}

func (o ScaleServiceOutput) ToScaleServiceOutput() ScaleServiceOutput {
	return o
}

func (o ScaleServiceOutput) ToScaleServiceOutputWithContext(ctx context.Context) ScaleServiceOutput {
	return o
}

func (o ScaleServiceOutput) NumInstances() pulumi.IntOutput {
	return o.ApplyT(func(v *ScaleService) pulumi.IntOutput { return v.NumInstances }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleServiceInput)(nil)).Elem(), &ScaleService{})
	pulumi.RegisterOutputType(ScaleServiceOutput{})
}
