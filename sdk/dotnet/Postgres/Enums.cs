// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Render.Postgres
{
    /// <summary>
    /// Availability of point-in-time recovery.
    /// </summary>
    [EnumType]
    public readonly struct GetPostgresRecoveryInfoPropertiesRecoveryStatus : IEquatable<GetPostgresRecoveryInfoPropertiesRecoveryStatus>
    {
        private readonly string _value;

        private GetPostgresRecoveryInfoPropertiesRecoveryStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static GetPostgresRecoveryInfoPropertiesRecoveryStatus Available { get; } = new GetPostgresRecoveryInfoPropertiesRecoveryStatus("AVAILABLE");
        public static GetPostgresRecoveryInfoPropertiesRecoveryStatus BackupNotReady { get; } = new GetPostgresRecoveryInfoPropertiesRecoveryStatus("BACKUP_NOT_READY");
        public static GetPostgresRecoveryInfoPropertiesRecoveryStatus NotAvailable { get; } = new GetPostgresRecoveryInfoPropertiesRecoveryStatus("NOT_AVAILABLE");

        public static bool operator ==(GetPostgresRecoveryInfoPropertiesRecoveryStatus left, GetPostgresRecoveryInfoPropertiesRecoveryStatus right) => left.Equals(right);
        public static bool operator !=(GetPostgresRecoveryInfoPropertiesRecoveryStatus left, GetPostgresRecoveryInfoPropertiesRecoveryStatus right) => !left.Equals(right);

        public static explicit operator string(GetPostgresRecoveryInfoPropertiesRecoveryStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is GetPostgresRecoveryInfoPropertiesRecoveryStatus other && Equals(other);
        public bool Equals(GetPostgresRecoveryInfoPropertiesRecoveryStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct OwnerType : IEquatable<OwnerType>
    {
        private readonly string _value;

        private OwnerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static OwnerType User { get; } = new OwnerType("user");
        public static OwnerType Team { get; } = new OwnerType("team");

        public static bool operator ==(OwnerType left, OwnerType right) => left.Equals(right);
        public static bool operator !=(OwnerType left, OwnerType right) => !left.Equals(right);

        public static explicit operator string(OwnerType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is OwnerType other && Equals(other);
        public bool Equals(OwnerType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan Free { get; } = new Plan("free");
        public static Plan Starter { get; } = new Plan("starter");
        public static Plan Standard { get; } = new Plan("standard");
        public static Plan Pro { get; } = new Plan("pro");
        public static Plan ProPlus { get; } = new Plan("pro_plus");
        public static Plan Custom { get; } = new Plan("custom");
        public static Plan Basic256mb { get; } = new Plan("basic_256mb");
        public static Plan Basic1gb { get; } = new Plan("basic_1gb");
        public static Plan Basic4gb { get; } = new Plan("basic_4gb");
        public static Plan Pro4gb { get; } = new Plan("pro_4gb");
        public static Plan Pro8gb { get; } = new Plan("pro_8gb");
        public static Plan Pro16gb { get; } = new Plan("pro_16gb");
        public static Plan Pro32gb { get; } = new Plan("pro_32gb");
        public static Plan Pro64gb { get; } = new Plan("pro_64gb");
        public static Plan Pro128gb { get; } = new Plan("pro_128gb");
        public static Plan Pro192gb { get; } = new Plan("pro_192gb");
        public static Plan Pro256gb { get; } = new Plan("pro_256gb");
        public static Plan Pro384gb { get; } = new Plan("pro_384gb");
        public static Plan Pro512gb { get; } = new Plan("pro_512gb");
        public static Plan Accelerated16gb { get; } = new Plan("accelerated_16gb");
        public static Plan Accelerated32gb { get; } = new Plan("accelerated_32gb");
        public static Plan Accelerated64gb { get; } = new Plan("accelerated_64gb");
        public static Plan Accelerated128gb { get; } = new Plan("accelerated_128gb");
        public static Plan Accelerated256gb { get; } = new Plan("accelerated_256gb");
        public static Plan Accelerated384gb { get; } = new Plan("accelerated_384gb");
        public static Plan Accelerated512gb { get; } = new Plan("accelerated_512gb");
        public static Plan Accelerated768gb { get; } = new Plan("accelerated_768gb");
        public static Plan Accelerated1024gb { get; } = new Plan("accelerated_1024gb");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresDetailPlan : IEquatable<PostgresDetailPlan>
    {
        private readonly string _value;

        private PostgresDetailPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailPlan Free { get; } = new PostgresDetailPlan("free");
        public static PostgresDetailPlan Starter { get; } = new PostgresDetailPlan("starter");
        public static PostgresDetailPlan Standard { get; } = new PostgresDetailPlan("standard");
        public static PostgresDetailPlan Pro { get; } = new PostgresDetailPlan("pro");
        public static PostgresDetailPlan ProPlus { get; } = new PostgresDetailPlan("pro_plus");
        public static PostgresDetailPlan Custom { get; } = new PostgresDetailPlan("custom");
        public static PostgresDetailPlan Basic256mb { get; } = new PostgresDetailPlan("basic_256mb");
        public static PostgresDetailPlan Basic1gb { get; } = new PostgresDetailPlan("basic_1gb");
        public static PostgresDetailPlan Basic4gb { get; } = new PostgresDetailPlan("basic_4gb");
        public static PostgresDetailPlan Pro4gb { get; } = new PostgresDetailPlan("pro_4gb");
        public static PostgresDetailPlan Pro8gb { get; } = new PostgresDetailPlan("pro_8gb");
        public static PostgresDetailPlan Pro16gb { get; } = new PostgresDetailPlan("pro_16gb");
        public static PostgresDetailPlan Pro32gb { get; } = new PostgresDetailPlan("pro_32gb");
        public static PostgresDetailPlan Pro64gb { get; } = new PostgresDetailPlan("pro_64gb");
        public static PostgresDetailPlan Pro128gb { get; } = new PostgresDetailPlan("pro_128gb");
        public static PostgresDetailPlan Pro192gb { get; } = new PostgresDetailPlan("pro_192gb");
        public static PostgresDetailPlan Pro256gb { get; } = new PostgresDetailPlan("pro_256gb");
        public static PostgresDetailPlan Pro384gb { get; } = new PostgresDetailPlan("pro_384gb");
        public static PostgresDetailPlan Pro512gb { get; } = new PostgresDetailPlan("pro_512gb");
        public static PostgresDetailPlan Accelerated16gb { get; } = new PostgresDetailPlan("accelerated_16gb");
        public static PostgresDetailPlan Accelerated32gb { get; } = new PostgresDetailPlan("accelerated_32gb");
        public static PostgresDetailPlan Accelerated64gb { get; } = new PostgresDetailPlan("accelerated_64gb");
        public static PostgresDetailPlan Accelerated128gb { get; } = new PostgresDetailPlan("accelerated_128gb");
        public static PostgresDetailPlan Accelerated256gb { get; } = new PostgresDetailPlan("accelerated_256gb");
        public static PostgresDetailPlan Accelerated384gb { get; } = new PostgresDetailPlan("accelerated_384gb");
        public static PostgresDetailPlan Accelerated512gb { get; } = new PostgresDetailPlan("accelerated_512gb");
        public static PostgresDetailPlan Accelerated768gb { get; } = new PostgresDetailPlan("accelerated_768gb");
        public static PostgresDetailPlan Accelerated1024gb { get; } = new PostgresDetailPlan("accelerated_1024gb");

        public static bool operator ==(PostgresDetailPlan left, PostgresDetailPlan right) => left.Equals(right);
        public static bool operator !=(PostgresDetailPlan left, PostgresDetailPlan right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailPlan other && Equals(other);
        public bool Equals(PostgresDetailPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct PostgresDetailRegion : IEquatable<PostgresDetailRegion>
    {
        private readonly string _value;

        private PostgresDetailRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailRegion Frankfurt { get; } = new PostgresDetailRegion("frankfurt");
        public static PostgresDetailRegion Oregon { get; } = new PostgresDetailRegion("oregon");
        public static PostgresDetailRegion Ohio { get; } = new PostgresDetailRegion("ohio");
        public static PostgresDetailRegion Singapore { get; } = new PostgresDetailRegion("singapore");
        public static PostgresDetailRegion Virginia { get; } = new PostgresDetailRegion("virginia");

        public static bool operator ==(PostgresDetailRegion left, PostgresDetailRegion right) => left.Equals(right);
        public static bool operator !=(PostgresDetailRegion left, PostgresDetailRegion right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailRegion other && Equals(other);
        public bool Equals(PostgresDetailRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresDetailRole : IEquatable<PostgresDetailRole>
    {
        private readonly string _value;

        private PostgresDetailRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailRole Primary { get; } = new PostgresDetailRole("primary");
        public static PostgresDetailRole Replica { get; } = new PostgresDetailRole("replica");

        public static bool operator ==(PostgresDetailRole left, PostgresDetailRole right) => left.Equals(right);
        public static bool operator !=(PostgresDetailRole left, PostgresDetailRole right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailRole other && Equals(other);
        public bool Equals(PostgresDetailRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresDetailStatus : IEquatable<PostgresDetailStatus>
    {
        private readonly string _value;

        private PostgresDetailStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailStatus Creating { get; } = new PostgresDetailStatus("creating");
        public static PostgresDetailStatus Available { get; } = new PostgresDetailStatus("available");
        public static PostgresDetailStatus Unavailable { get; } = new PostgresDetailStatus("unavailable");
        public static PostgresDetailStatus ConfigRestart { get; } = new PostgresDetailStatus("config_restart");
        public static PostgresDetailStatus Suspended { get; } = new PostgresDetailStatus("suspended");
        public static PostgresDetailStatus MaintenanceScheduled { get; } = new PostgresDetailStatus("maintenance_scheduled");
        public static PostgresDetailStatus MaintenanceInProgress { get; } = new PostgresDetailStatus("maintenance_in_progress");
        public static PostgresDetailStatus RecoveryFailed { get; } = new PostgresDetailStatus("recovery_failed");
        public static PostgresDetailStatus RecoveryInProgress { get; } = new PostgresDetailStatus("recovery_in_progress");
        public static PostgresDetailStatus Unknown { get; } = new PostgresDetailStatus("unknown");
        public static PostgresDetailStatus UpdatingInstance { get; } = new PostgresDetailStatus("updating_instance");

        public static bool operator ==(PostgresDetailStatus left, PostgresDetailStatus right) => left.Equals(right);
        public static bool operator !=(PostgresDetailStatus left, PostgresDetailStatus right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailStatus other && Equals(other);
        public bool Equals(PostgresDetailStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresDetailSuspended : IEquatable<PostgresDetailSuspended>
    {
        private readonly string _value;

        private PostgresDetailSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailSuspended Suspended { get; } = new PostgresDetailSuspended("suspended");
        public static PostgresDetailSuspended NotSuspended { get; } = new PostgresDetailSuspended("not_suspended");

        public static bool operator ==(PostgresDetailSuspended left, PostgresDetailSuspended right) => left.Equals(right);
        public static bool operator !=(PostgresDetailSuspended left, PostgresDetailSuspended right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailSuspended other && Equals(other);
        public bool Equals(PostgresDetailSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresDetailSuspendersItem : IEquatable<PostgresDetailSuspendersItem>
    {
        private readonly string _value;

        private PostgresDetailSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailSuspendersItem Admin { get; } = new PostgresDetailSuspendersItem("admin");
        public static PostgresDetailSuspendersItem Billing { get; } = new PostgresDetailSuspendersItem("billing");
        public static PostgresDetailSuspendersItem User { get; } = new PostgresDetailSuspendersItem("user");
        public static PostgresDetailSuspendersItem ParentService { get; } = new PostgresDetailSuspendersItem("parent_service");
        public static PostgresDetailSuspendersItem Unknown { get; } = new PostgresDetailSuspendersItem("unknown");

        public static bool operator ==(PostgresDetailSuspendersItem left, PostgresDetailSuspendersItem right) => left.Equals(right);
        public static bool operator !=(PostgresDetailSuspendersItem left, PostgresDetailSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailSuspendersItem other && Equals(other);
        public bool Equals(PostgresDetailSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PostgreSQL version
    /// </summary>
    [EnumType]
    public readonly struct PostgresDetailVersion : IEquatable<PostgresDetailVersion>
    {
        private readonly string _value;

        private PostgresDetailVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresDetailVersion PostgresDetailVersion_11 { get; } = new PostgresDetailVersion("11");
        public static PostgresDetailVersion PostgresDetailVersion_12 { get; } = new PostgresDetailVersion("12");
        public static PostgresDetailVersion PostgresDetailVersion_13 { get; } = new PostgresDetailVersion("13");
        public static PostgresDetailVersion PostgresDetailVersion_14 { get; } = new PostgresDetailVersion("14");
        public static PostgresDetailVersion PostgresDetailVersion_15 { get; } = new PostgresDetailVersion("15");
        public static PostgresDetailVersion PostgresDetailVersion_16 { get; } = new PostgresDetailVersion("16");

        public static bool operator ==(PostgresDetailVersion left, PostgresDetailVersion right) => left.Equals(right);
        public static bool operator !=(PostgresDetailVersion left, PostgresDetailVersion right) => !left.Equals(right);

        public static explicit operator string(PostgresDetailVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresDetailVersion other && Equals(other);
        public bool Equals(PostgresDetailVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresPlan : IEquatable<PostgresPlan>
    {
        private readonly string _value;

        private PostgresPlan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresPlan Free { get; } = new PostgresPlan("free");
        public static PostgresPlan Starter { get; } = new PostgresPlan("starter");
        public static PostgresPlan Standard { get; } = new PostgresPlan("standard");
        public static PostgresPlan Pro { get; } = new PostgresPlan("pro");
        public static PostgresPlan ProPlus { get; } = new PostgresPlan("pro_plus");
        public static PostgresPlan Custom { get; } = new PostgresPlan("custom");
        public static PostgresPlan Basic256mb { get; } = new PostgresPlan("basic_256mb");
        public static PostgresPlan Basic1gb { get; } = new PostgresPlan("basic_1gb");
        public static PostgresPlan Basic4gb { get; } = new PostgresPlan("basic_4gb");
        public static PostgresPlan Pro4gb { get; } = new PostgresPlan("pro_4gb");
        public static PostgresPlan Pro8gb { get; } = new PostgresPlan("pro_8gb");
        public static PostgresPlan Pro16gb { get; } = new PostgresPlan("pro_16gb");
        public static PostgresPlan Pro32gb { get; } = new PostgresPlan("pro_32gb");
        public static PostgresPlan Pro64gb { get; } = new PostgresPlan("pro_64gb");
        public static PostgresPlan Pro128gb { get; } = new PostgresPlan("pro_128gb");
        public static PostgresPlan Pro192gb { get; } = new PostgresPlan("pro_192gb");
        public static PostgresPlan Pro256gb { get; } = new PostgresPlan("pro_256gb");
        public static PostgresPlan Pro384gb { get; } = new PostgresPlan("pro_384gb");
        public static PostgresPlan Pro512gb { get; } = new PostgresPlan("pro_512gb");
        public static PostgresPlan Accelerated16gb { get; } = new PostgresPlan("accelerated_16gb");
        public static PostgresPlan Accelerated32gb { get; } = new PostgresPlan("accelerated_32gb");
        public static PostgresPlan Accelerated64gb { get; } = new PostgresPlan("accelerated_64gb");
        public static PostgresPlan Accelerated128gb { get; } = new PostgresPlan("accelerated_128gb");
        public static PostgresPlan Accelerated256gb { get; } = new PostgresPlan("accelerated_256gb");
        public static PostgresPlan Accelerated384gb { get; } = new PostgresPlan("accelerated_384gb");
        public static PostgresPlan Accelerated512gb { get; } = new PostgresPlan("accelerated_512gb");
        public static PostgresPlan Accelerated768gb { get; } = new PostgresPlan("accelerated_768gb");
        public static PostgresPlan Accelerated1024gb { get; } = new PostgresPlan("accelerated_1024gb");

        public static bool operator ==(PostgresPlan left, PostgresPlan right) => left.Equals(right);
        public static bool operator !=(PostgresPlan left, PostgresPlan right) => !left.Equals(right);

        public static explicit operator string(PostgresPlan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresPlan other && Equals(other);
        public bool Equals(PostgresPlan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct PostgresRegion : IEquatable<PostgresRegion>
    {
        private readonly string _value;

        private PostgresRegion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresRegion Frankfurt { get; } = new PostgresRegion("frankfurt");
        public static PostgresRegion Oregon { get; } = new PostgresRegion("oregon");
        public static PostgresRegion Ohio { get; } = new PostgresRegion("ohio");
        public static PostgresRegion Singapore { get; } = new PostgresRegion("singapore");
        public static PostgresRegion Virginia { get; } = new PostgresRegion("virginia");

        public static bool operator ==(PostgresRegion left, PostgresRegion right) => left.Equals(right);
        public static bool operator !=(PostgresRegion left, PostgresRegion right) => !left.Equals(right);

        public static explicit operator string(PostgresRegion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresRegion other && Equals(other);
        public bool Equals(PostgresRegion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresRole : IEquatable<PostgresRole>
    {
        private readonly string _value;

        private PostgresRole(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresRole Primary { get; } = new PostgresRole("primary");
        public static PostgresRole Replica { get; } = new PostgresRole("replica");

        public static bool operator ==(PostgresRole left, PostgresRole right) => left.Equals(right);
        public static bool operator !=(PostgresRole left, PostgresRole right) => !left.Equals(right);

        public static explicit operator string(PostgresRole value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresRole other && Equals(other);
        public bool Equals(PostgresRole other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresStatus : IEquatable<PostgresStatus>
    {
        private readonly string _value;

        private PostgresStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresStatus Creating { get; } = new PostgresStatus("creating");
        public static PostgresStatus Available { get; } = new PostgresStatus("available");
        public static PostgresStatus Unavailable { get; } = new PostgresStatus("unavailable");
        public static PostgresStatus ConfigRestart { get; } = new PostgresStatus("config_restart");
        public static PostgresStatus Suspended { get; } = new PostgresStatus("suspended");
        public static PostgresStatus MaintenanceScheduled { get; } = new PostgresStatus("maintenance_scheduled");
        public static PostgresStatus MaintenanceInProgress { get; } = new PostgresStatus("maintenance_in_progress");
        public static PostgresStatus RecoveryFailed { get; } = new PostgresStatus("recovery_failed");
        public static PostgresStatus RecoveryInProgress { get; } = new PostgresStatus("recovery_in_progress");
        public static PostgresStatus Unknown { get; } = new PostgresStatus("unknown");
        public static PostgresStatus UpdatingInstance { get; } = new PostgresStatus("updating_instance");

        public static bool operator ==(PostgresStatus left, PostgresStatus right) => left.Equals(right);
        public static bool operator !=(PostgresStatus left, PostgresStatus right) => !left.Equals(right);

        public static explicit operator string(PostgresStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresStatus other && Equals(other);
        public bool Equals(PostgresStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresSuspended : IEquatable<PostgresSuspended>
    {
        private readonly string _value;

        private PostgresSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresSuspended Suspended { get; } = new PostgresSuspended("suspended");
        public static PostgresSuspended NotSuspended { get; } = new PostgresSuspended("not_suspended");

        public static bool operator ==(PostgresSuspended left, PostgresSuspended right) => left.Equals(right);
        public static bool operator !=(PostgresSuspended left, PostgresSuspended right) => !left.Equals(right);

        public static explicit operator string(PostgresSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresSuspended other && Equals(other);
        public bool Equals(PostgresSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct PostgresSuspendersItem : IEquatable<PostgresSuspendersItem>
    {
        private readonly string _value;

        private PostgresSuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresSuspendersItem Admin { get; } = new PostgresSuspendersItem("admin");
        public static PostgresSuspendersItem Billing { get; } = new PostgresSuspendersItem("billing");
        public static PostgresSuspendersItem User { get; } = new PostgresSuspendersItem("user");
        public static PostgresSuspendersItem ParentService { get; } = new PostgresSuspendersItem("parent_service");
        public static PostgresSuspendersItem Unknown { get; } = new PostgresSuspendersItem("unknown");

        public static bool operator ==(PostgresSuspendersItem left, PostgresSuspendersItem right) => left.Equals(right);
        public static bool operator !=(PostgresSuspendersItem left, PostgresSuspendersItem right) => !left.Equals(right);

        public static explicit operator string(PostgresSuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresSuspendersItem other && Equals(other);
        public bool Equals(PostgresSuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PostgreSQL version
    /// </summary>
    [EnumType]
    public readonly struct PostgresVersion : IEquatable<PostgresVersion>
    {
        private readonly string _value;

        private PostgresVersion(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static PostgresVersion PostgresVersion_11 { get; } = new PostgresVersion("11");
        public static PostgresVersion PostgresVersion_12 { get; } = new PostgresVersion("12");
        public static PostgresVersion PostgresVersion_13 { get; } = new PostgresVersion("13");
        public static PostgresVersion PostgresVersion_14 { get; } = new PostgresVersion("14");
        public static PostgresVersion PostgresVersion_15 { get; } = new PostgresVersion("15");
        public static PostgresVersion PostgresVersion_16 { get; } = new PostgresVersion("16");

        public static bool operator ==(PostgresVersion left, PostgresVersion right) => left.Equals(right);
        public static bool operator !=(PostgresVersion left, PostgresVersion right) => !left.Equals(right);

        public static explicit operator string(PostgresVersion value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is PostgresVersion other && Equals(other);
        public bool Equals(PostgresVersion other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RecoverPostgresSuspended : IEquatable<RecoverPostgresSuspended>
    {
        private readonly string _value;

        private RecoverPostgresSuspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RecoverPostgresSuspended Suspended { get; } = new RecoverPostgresSuspended("suspended");
        public static RecoverPostgresSuspended NotSuspended { get; } = new RecoverPostgresSuspended("not_suspended");

        public static bool operator ==(RecoverPostgresSuspended left, RecoverPostgresSuspended right) => left.Equals(right);
        public static bool operator !=(RecoverPostgresSuspended left, RecoverPostgresSuspended right) => !left.Equals(right);

        public static explicit operator string(RecoverPostgresSuspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RecoverPostgresSuspended other && Equals(other);
        public bool Equals(RecoverPostgresSuspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct RedisDetailpropertiesmaintenanceState : IEquatable<RedisDetailpropertiesmaintenanceState>
    {
        private readonly string _value;

        private RedisDetailpropertiesmaintenanceState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static RedisDetailpropertiesmaintenanceState Scheduled { get; } = new RedisDetailpropertiesmaintenanceState("scheduled");
        public static RedisDetailpropertiesmaintenanceState InProgress { get; } = new RedisDetailpropertiesmaintenanceState("in_progress");
        public static RedisDetailpropertiesmaintenanceState UserFixRequired { get; } = new RedisDetailpropertiesmaintenanceState("user_fix_required");
        public static RedisDetailpropertiesmaintenanceState Cancelled { get; } = new RedisDetailpropertiesmaintenanceState("cancelled");
        public static RedisDetailpropertiesmaintenanceState Succeeded { get; } = new RedisDetailpropertiesmaintenanceState("succeeded");
        public static RedisDetailpropertiesmaintenanceState Failed { get; } = new RedisDetailpropertiesmaintenanceState("failed");

        public static bool operator ==(RedisDetailpropertiesmaintenanceState left, RedisDetailpropertiesmaintenanceState right) => left.Equals(right);
        public static bool operator !=(RedisDetailpropertiesmaintenanceState left, RedisDetailpropertiesmaintenanceState right) => !left.Equals(right);

        public static explicit operator string(RedisDetailpropertiesmaintenanceState value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RedisDetailpropertiesmaintenanceState other && Equals(other);
        public bool Equals(RedisDetailpropertiesmaintenanceState other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// Defaults to "oregon"
    /// </summary>
    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Region Frankfurt { get; } = new Region("frankfurt");
        public static Region Oregon { get; } = new Region("oregon");
        public static Region Ohio { get; } = new Region("ohio");
        public static Region Singapore { get; } = new Region("singapore");
        public static Region Virginia { get; } = new Region("virginia");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Role : IEquatable<Role>
    {
        private readonly string _value;

        private Role(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Role Primary { get; } = new Role("primary");
        public static Role Replica { get; } = new Role("replica");

        public static bool operator ==(Role left, Role right) => left.Equals(right);
        public static bool operator !=(Role left, Role right) => !left.Equals(right);

        public static explicit operator string(Role value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Role other && Equals(other);
        public bool Equals(Role other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Status : IEquatable<Status>
    {
        private readonly string _value;

        private Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Status Creating { get; } = new Status("creating");
        public static Status Available { get; } = new Status("available");
        public static Status Unavailable { get; } = new Status("unavailable");
        public static Status ConfigRestart { get; } = new Status("config_restart");
        public static Status Suspended { get; } = new Status("suspended");
        public static Status MaintenanceScheduled { get; } = new Status("maintenance_scheduled");
        public static Status MaintenanceInProgress { get; } = new Status("maintenance_in_progress");
        public static Status RecoveryFailed { get; } = new Status("recovery_failed");
        public static Status RecoveryInProgress { get; } = new Status("recovery_in_progress");
        public static Status Unknown { get; } = new Status("unknown");
        public static Status UpdatingInstance { get; } = new Status("updating_instance");

        public static bool operator ==(Status left, Status right) => left.Equals(right);
        public static bool operator !=(Status left, Status right) => !left.Equals(right);

        public static explicit operator string(Status value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Status other && Equals(other);
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Suspended : IEquatable<Suspended>
    {
        private readonly string _value;

        private Suspended(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Suspended Suspended_ { get; } = new Suspended("suspended");
        public static Suspended NotSuspended { get; } = new Suspended("not_suspended");

        public static bool operator ==(Suspended left, Suspended right) => left.Equals(right);
        public static bool operator !=(Suspended left, Suspended right) => !left.Equals(right);

        public static explicit operator string(Suspended value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Suspended other && Equals(other);
        public bool Equals(Suspended other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct SuspendersItem : IEquatable<SuspendersItem>
    {
        private readonly string _value;

        private SuspendersItem(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static SuspendersItem Admin { get; } = new SuspendersItem("admin");
        public static SuspendersItem Billing { get; } = new SuspendersItem("billing");
        public static SuspendersItem User { get; } = new SuspendersItem("user");
        public static SuspendersItem ParentService { get; } = new SuspendersItem("parent_service");
        public static SuspendersItem Unknown { get; } = new SuspendersItem("unknown");

        public static bool operator ==(SuspendersItem left, SuspendersItem right) => left.Equals(right);
        public static bool operator !=(SuspendersItem left, SuspendersItem right) => !left.Equals(right);

        public static explicit operator string(SuspendersItem value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is SuspendersItem other && Equals(other);
        public bool Equals(SuspendersItem other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The PostgreSQL version
    /// </summary>
    [EnumType]
    public readonly struct Version : IEquatable<Version>
    {
        private readonly string _value;

        private Version(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Version Version_11 { get; } = new Version("11");
        public static Version Version_12 { get; } = new Version("12");
        public static Version Version_13 { get; } = new Version("13");
        public static Version Version_14 { get; } = new Version("14");
        public static Version Version_15 { get; } = new Version("15");
        public static Version Version_16 { get; } = new Version("16");

        public static bool operator ==(Version left, Version right) => left.Equals(right);
        public static bool operator !=(Version left, Version right) => !left.Equals(right);

        public static explicit operator string(Version value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Version other && Equals(other);
        public bool Equals(Version other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
