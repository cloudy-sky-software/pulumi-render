// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PostgresExport struct {
	pulumi.CustomResourceState
}

// NewPostgresExport registers a new resource with the given unique name, arguments, and options.
func NewPostgresExport(ctx *pulumi.Context,
	name string, args *PostgresExportArgs, opts ...pulumi.ResourceOption) (*PostgresExport, error) {
	if args == nil {
		args = &PostgresExportArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresExport
	err := ctx.RegisterResource("render:postgres:PostgresExport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresExport gets an existing PostgresExport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresExport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresExportState, opts ...pulumi.ResourceOption) (*PostgresExport, error) {
	var resource PostgresExport
	err := ctx.ReadResource("render:postgres:PostgresExport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresExport resources.
type postgresExportState struct {
}

type PostgresExportState struct {
}

func (PostgresExportState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresExportState)(nil)).Elem()
}

type postgresExportArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a PostgresExport resource.
type PostgresExportArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (PostgresExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresExportArgs)(nil)).Elem()
}

type PostgresExportInput interface {
	pulumi.Input

	ToPostgresExportOutput() PostgresExportOutput
	ToPostgresExportOutputWithContext(ctx context.Context) PostgresExportOutput
}

func (*PostgresExport) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresExport)(nil)).Elem()
}

func (i *PostgresExport) ToPostgresExportOutput() PostgresExportOutput {
	return i.ToPostgresExportOutputWithContext(context.Background())
}

func (i *PostgresExport) ToPostgresExportOutputWithContext(ctx context.Context) PostgresExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresExportOutput)
}

type PostgresExportOutput struct{ *pulumi.OutputState }

func (PostgresExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresExport)(nil)).Elem()
}

func (o PostgresExportOutput) ToPostgresExportOutput() PostgresExportOutput {
	return o
}

func (o PostgresExportOutput) ToPostgresExportOutputWithContext(ctx context.Context) PostgresExportOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresExportInput)(nil)).Elem(), &PostgresExport{})
	pulumi.RegisterOutputType(PostgresExportOutput{})
}
