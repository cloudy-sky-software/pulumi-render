// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Postgres
{
    public static class GetPostgres
    {
        public static Task<GetPostgresResult> InvokeAsync(GetPostgresArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPostgresResult>("render:postgres:getPostgres", args ?? new GetPostgresArgs(), options.WithDefaults());

        public static Output<GetPostgresResult> Invoke(GetPostgresInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPostgresResult>("render:postgres:getPostgres", args ?? new GetPostgresInvokeArgs(), options.WithDefaults());

        public static Output<GetPostgresResult> Invoke(GetPostgresInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPostgresResult>("render:postgres:getPostgres", args ?? new GetPostgresInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPostgresArgs : global::Pulumi.InvokeArgs
    {
        [Input("postgresId", required: true)]
        public string PostgresId { get; set; } = null!;

        public GetPostgresArgs()
        {
        }
        public static new GetPostgresArgs Empty => new GetPostgresArgs();
    }

    public sealed class GetPostgresInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("postgresId", required: true)]
        public Input<string> PostgresId { get; set; } = null!;

        public GetPostgresInvokeArgs()
        {
        }
        public static new GetPostgresInvokeArgs Empty => new GetPostgresInvokeArgs();
    }


    [OutputType]
    public sealed class GetPostgresResult
    {
        public readonly string CreatedAt;
        /// <summary>
        /// The URL to view the Postgres instance in the Render Dashboard
        /// </summary>
        public readonly string DashboardUrl;
        public readonly string DatabaseName;
        public readonly string DatabaseUser;
        public readonly int? DiskSizeGB;
        public readonly string? EnvironmentId;
        /// <summary>
        /// The time at which the database will be expire. Applies to free tier databases only.
        /// </summary>
        public readonly string? ExpiresAt;
        public readonly bool HighAvailabilityEnabled;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.CidrBlockAndDescription> IpAllowList;
        public readonly Outputs.RedisDetailpropertiesmaintenance? Maintenance;
        public readonly string Name;
        public readonly Outputs.Owner Owner;
        public readonly Pulumi.Render.Postgres.PostgresDetailPlan Plan;
        public readonly string? PrimaryPostgresID;
        public readonly ImmutableArray<Outputs.ReadReplica> ReadReplicas;
        /// <summary>
        /// Defaults to "oregon"
        /// </summary>
        public readonly Pulumi.Render.Postgres.PostgresDetailRegion Region;
        public readonly Pulumi.Render.Postgres.PostgresDetailRole Role;
        public readonly Pulumi.Render.Postgres.PostgresDetailStatus Status;
        public readonly Pulumi.Render.Postgres.PostgresDetailSuspended Suspended;
        public readonly ImmutableArray<Pulumi.Render.Postgres.PostgresDetailSuspendersItem> Suspenders;
        public readonly string UpdatedAt;
        /// <summary>
        /// The PostgreSQL version
        /// </summary>
        public readonly Pulumi.Render.Postgres.PostgresDetailVersion Version;

        [OutputConstructor]
        private GetPostgresResult(
            string createdAt,

            string dashboardUrl,

            string databaseName,

            string databaseUser,

            int? diskSizeGB,

            string? environmentId,

            string? expiresAt,

            bool highAvailabilityEnabled,

            string id,

            ImmutableArray<Outputs.CidrBlockAndDescription> ipAllowList,

            Outputs.RedisDetailpropertiesmaintenance? maintenance,

            string name,

            Outputs.Owner owner,

            Pulumi.Render.Postgres.PostgresDetailPlan plan,

            string? primaryPostgresID,

            ImmutableArray<Outputs.ReadReplica> readReplicas,

            Pulumi.Render.Postgres.PostgresDetailRegion region,

            Pulumi.Render.Postgres.PostgresDetailRole role,

            Pulumi.Render.Postgres.PostgresDetailStatus status,

            Pulumi.Render.Postgres.PostgresDetailSuspended suspended,

            ImmutableArray<Pulumi.Render.Postgres.PostgresDetailSuspendersItem> suspenders,

            string updatedAt,

            Pulumi.Render.Postgres.PostgresDetailVersion version)
        {
            CreatedAt = createdAt;
            DashboardUrl = dashboardUrl;
            DatabaseName = databaseName;
            DatabaseUser = databaseUser;
            DiskSizeGB = diskSizeGB;
            EnvironmentId = environmentId;
            ExpiresAt = expiresAt;
            HighAvailabilityEnabled = highAvailabilityEnabled;
            Id = id;
            IpAllowList = ipAllowList;
            Maintenance = maintenance;
            Name = name;
            Owner = owner;
            Plan = plan;
            PrimaryPostgresID = primaryPostgresID;
            ReadReplicas = readReplicas;
            Region = region;
            Role = role;
            Status = status;
            Suspended = suspended;
            Suspenders = suspenders;
            UpdatedAt = updatedAt;
            Version = version;
        }
    }
}
