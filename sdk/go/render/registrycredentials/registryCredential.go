// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package registrycredentials

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegistryCredential struct {
	pulumi.CustomResourceState

	AuthToken pulumi.StringOutput `pulumi:"authToken"`
	// Descriptive name for this credential
	Name    pulumi.StringOutput `pulumi:"name"`
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// The registry to use this credential with
	Registry RegistryOutput `pulumi:"registry"`
	// Last updated time for the credential
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The username associated with the credential
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewRegistryCredential registers a new resource with the given unique name, arguments, and options.
func NewRegistryCredential(ctx *pulumi.Context,
	name string, args *RegistryCredentialArgs, opts ...pulumi.ResourceOption) (*RegistryCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthToken == nil {
		return nil, errors.New("invalid value for required argument 'AuthToken'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Registry == nil {
		return nil, errors.New("invalid value for required argument 'Registry'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryCredential
	err := ctx.RegisterResource("render:registrycredentials:RegistryCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryCredential gets an existing RegistryCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryCredentialState, opts ...pulumi.ResourceOption) (*RegistryCredential, error) {
	var resource RegistryCredential
	err := ctx.ReadResource("render:registrycredentials:RegistryCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryCredential resources.
type registryCredentialState struct {
}

type RegistryCredentialState struct {
}

func (RegistryCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryCredentialState)(nil)).Elem()
}

type registryCredentialArgs struct {
	AuthToken string  `pulumi:"authToken"`
	Name      *string `pulumi:"name"`
	OwnerId   string  `pulumi:"ownerId"`
	// The registry to use this credential with
	Registry Registry `pulumi:"registry"`
	Username string   `pulumi:"username"`
}

// The set of arguments for constructing a RegistryCredential resource.
type RegistryCredentialArgs struct {
	AuthToken pulumi.StringInput
	Name      pulumi.StringPtrInput
	OwnerId   pulumi.StringInput
	// The registry to use this credential with
	Registry RegistryInput
	Username pulumi.StringInput
}

func (RegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryCredentialArgs)(nil)).Elem()
}

type RegistryCredentialInput interface {
	pulumi.Input

	ToRegistryCredentialOutput() RegistryCredentialOutput
	ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput
}

func (*RegistryCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryCredential)(nil)).Elem()
}

func (i *RegistryCredential) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return i.ToRegistryCredentialOutputWithContext(context.Background())
}

func (i *RegistryCredential) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialOutput)
}

type RegistryCredentialOutput struct{ *pulumi.OutputState }

func (RegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryCredential)(nil)).Elem()
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutput() RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) ToRegistryCredentialOutputWithContext(ctx context.Context) RegistryCredentialOutput {
	return o
}

func (o RegistryCredentialOutput) AuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredential) pulumi.StringOutput { return v.AuthToken }).(pulumi.StringOutput)
}

// Descriptive name for this credential
func (o RegistryCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RegistryCredentialOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredential) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// The registry to use this credential with
func (o RegistryCredentialOutput) Registry() RegistryOutput {
	return o.ApplyT(func(v *RegistryCredential) RegistryOutput { return v.Registry }).(RegistryOutput)
}

// Last updated time for the credential
func (o RegistryCredentialOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredential) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username associated with the credential
func (o RegistryCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialInput)(nil)).Elem(), &RegistryCredential{})
	pulumi.RegisterOutputType(RegistryCredentialOutput{})
}
