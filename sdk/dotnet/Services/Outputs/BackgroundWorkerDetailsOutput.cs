// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Render.Services.Outputs
{

    [OutputType]
    public sealed class BackgroundWorkerDetailsOutput
    {
        public readonly Outputs.WebServiceDetailspropertiesautoscaling? Autoscaling;
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputBuildPlan BuildPlan;
        public readonly Outputs.WebServiceDetailspropertiesdisk? Disk;
        /// <summary>
        /// This field has been deprecated, runtime should be used in its place.
        /// </summary>
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputEnv Env;
        public readonly Outputs.EnvSpecificDetails EnvSpecificDetails;
        /// <summary>
        /// The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending it a SIGTERM signal.
        /// </summary>
        public readonly int? MaxShutdownDelaySeconds;
        /// <summary>
        /// For a *manually* scaled service, this is the number of instances the service is scaled to. DOES NOT indicate the number of running instances for an *autoscaled* service.
        /// </summary>
        public readonly int NumInstances;
        public readonly Outputs.Resource? ParentServer;
        /// <summary>
        /// The instance type to use for the preview instance. Note that base services with any paid instance type can't create preview instances with the `free` instance type.
        /// </summary>
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputPlan Plan;
        public readonly Outputs.Previews? Previews;
        /// <summary>
        /// This field has been deprecated. previews.generation should be used in its place.
        /// </summary>
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled? PullRequestPreviewsEnabled;
        /// <summary>
        /// Defaults to "oregon"
        /// </summary>
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputRegion Region;
        /// <summary>
        /// Runtime
        /// </summary>
        public readonly Pulumi.Render.Services.BackgroundWorkerDetailsOutputRuntime Runtime;
        /// <summary>
        /// The SSH address for the service. Only present for services that have SSH enabled.
        /// </summary>
        public readonly string? SshAddress;

        [OutputConstructor]
        private BackgroundWorkerDetailsOutput(
            Outputs.WebServiceDetailspropertiesautoscaling? autoscaling,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputBuildPlan buildPlan,

            Outputs.WebServiceDetailspropertiesdisk? disk,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputEnv env,

            Outputs.EnvSpecificDetails envSpecificDetails,

            int? maxShutdownDelaySeconds,

            int numInstances,

            Outputs.Resource? parentServer,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputPlan plan,

            Outputs.Previews? previews,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputPullRequestPreviewsEnabled? pullRequestPreviewsEnabled,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputRegion region,

            Pulumi.Render.Services.BackgroundWorkerDetailsOutputRuntime runtime,

            string? sshAddress)
        {
            Autoscaling = autoscaling;
            BuildPlan = buildPlan;
            Disk = disk;
            Env = env;
            EnvSpecificDetails = envSpecificDetails;
            MaxShutdownDelaySeconds = maxShutdownDelaySeconds;
            NumInstances = numInstances;
            ParentServer = parentServer;
            Plan = plan;
            Previews = previews;
            PullRequestPreviewsEnabled = pullRequestPreviewsEnabled;
            Region = region;
            Runtime = runtime;
            SshAddress = sshAddress;
        }
    }
}
