// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package postgres

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ResumePostgres struct {
	pulumi.CustomResourceState
}

// NewResumePostgres registers a new resource with the given unique name, arguments, and options.
func NewResumePostgres(ctx *pulumi.Context,
	name string, args *ResumePostgresArgs, opts ...pulumi.ResourceOption) (*ResumePostgres, error) {
	if args == nil {
		args = &ResumePostgresArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResumePostgres
	err := ctx.RegisterResource("render:postgres:ResumePostgres", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResumePostgres gets an existing ResumePostgres resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResumePostgres(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResumePostgresState, opts ...pulumi.ResourceOption) (*ResumePostgres, error) {
	var resource ResumePostgres
	err := ctx.ReadResource("render:postgres:ResumePostgres", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResumePostgres resources.
type resumePostgresState struct {
}

type ResumePostgresState struct {
}

func (ResumePostgresState) ElementType() reflect.Type {
	return reflect.TypeOf((*resumePostgresState)(nil)).Elem()
}

type resumePostgresArgs struct {
	PostgresId *string `pulumi:"postgresId"`
}

// The set of arguments for constructing a ResumePostgres resource.
type ResumePostgresArgs struct {
	PostgresId pulumi.StringPtrInput
}

func (ResumePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resumePostgresArgs)(nil)).Elem()
}

type ResumePostgresInput interface {
	pulumi.Input

	ToResumePostgresOutput() ResumePostgresOutput
	ToResumePostgresOutputWithContext(ctx context.Context) ResumePostgresOutput
}

func (*ResumePostgres) ElementType() reflect.Type {
	return reflect.TypeOf((**ResumePostgres)(nil)).Elem()
}

func (i *ResumePostgres) ToResumePostgresOutput() ResumePostgresOutput {
	return i.ToResumePostgresOutputWithContext(context.Background())
}

func (i *ResumePostgres) ToResumePostgresOutputWithContext(ctx context.Context) ResumePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResumePostgresOutput)
}

type ResumePostgresOutput struct{ *pulumi.OutputState }

func (ResumePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResumePostgres)(nil)).Elem()
}

func (o ResumePostgresOutput) ToResumePostgresOutput() ResumePostgresOutput {
	return o
}

func (o ResumePostgresOutput) ToResumePostgresOutputWithContext(ctx context.Context) ResumePostgresOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResumePostgresInput)(nil)).Elem(), &ResumePostgres{})
	pulumi.RegisterOutputType(ResumePostgresOutput{})
}
