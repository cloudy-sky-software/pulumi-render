// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package notificationsettings

import (
	"context"
	"reflect"

	"github.com/cloudy-sky-software/pulumi-render/sdk/go/render/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetOwnerNotificationSetting(ctx *pulumi.Context, args *GetOwnerNotificationSettingArgs, opts ...pulumi.InvokeOption) (*GetOwnerNotificationSettingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetOwnerNotificationSettingResult
	err := ctx.Invoke("render:notification-settings:getOwnerNotificationSetting", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetOwnerNotificationSettingArgs struct {
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId string `pulumi:"ownerId"`
}

type GetOwnerNotificationSettingResult struct {
	EmailEnabled                bool                                                     `pulumi:"emailEnabled"`
	NotificationsToSend         GetOwnerNotificationSettingPropertiesNotificationsToSend `pulumi:"notificationsToSend"`
	OwnerId                     string                                                   `pulumi:"ownerId"`
	PreviewNotificationsEnabled bool                                                     `pulumi:"previewNotificationsEnabled"`
	SlackEnabled                bool                                                     `pulumi:"slackEnabled"`
}

func GetOwnerNotificationSettingOutput(ctx *pulumi.Context, args GetOwnerNotificationSettingOutputArgs, opts ...pulumi.InvokeOption) GetOwnerNotificationSettingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetOwnerNotificationSettingResultOutput, error) {
			args := v.(GetOwnerNotificationSettingArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetOwnerNotificationSettingResult
			secret, err := ctx.InvokePackageRaw("render:notification-settings:getOwnerNotificationSetting", args, &rv, "", opts...)
			if err != nil {
				return GetOwnerNotificationSettingResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetOwnerNotificationSettingResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetOwnerNotificationSettingResultOutput), nil
			}
			return output, nil
		}).(GetOwnerNotificationSettingResultOutput)
}

type GetOwnerNotificationSettingOutputArgs struct {
	// The ID of the owner (team or personal user) whose resources should be returned
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
}

func (GetOwnerNotificationSettingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOwnerNotificationSettingArgs)(nil)).Elem()
}

type GetOwnerNotificationSettingResultOutput struct{ *pulumi.OutputState }

func (GetOwnerNotificationSettingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOwnerNotificationSettingResult)(nil)).Elem()
}

func (o GetOwnerNotificationSettingResultOutput) ToGetOwnerNotificationSettingResultOutput() GetOwnerNotificationSettingResultOutput {
	return o
}

func (o GetOwnerNotificationSettingResultOutput) ToGetOwnerNotificationSettingResultOutputWithContext(ctx context.Context) GetOwnerNotificationSettingResultOutput {
	return o
}

func (o GetOwnerNotificationSettingResultOutput) EmailEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOwnerNotificationSettingResult) bool { return v.EmailEnabled }).(pulumi.BoolOutput)
}

func (o GetOwnerNotificationSettingResultOutput) NotificationsToSend() GetOwnerNotificationSettingPropertiesNotificationsToSendOutput {
	return o.ApplyT(func(v GetOwnerNotificationSettingResult) GetOwnerNotificationSettingPropertiesNotificationsToSend {
		return v.NotificationsToSend
	}).(GetOwnerNotificationSettingPropertiesNotificationsToSendOutput)
}

func (o GetOwnerNotificationSettingResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOwnerNotificationSettingResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

func (o GetOwnerNotificationSettingResultOutput) PreviewNotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOwnerNotificationSettingResult) bool { return v.PreviewNotificationsEnabled }).(pulumi.BoolOutput)
}

func (o GetOwnerNotificationSettingResultOutput) SlackEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOwnerNotificationSettingResult) bool { return v.SlackEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetOwnerNotificationSettingResultOutput{})
}
